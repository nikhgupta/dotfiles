#!/usr/bin/env ruby
# encoding: utf-8
#
# ---------------------------------------------------------------------
#
#   Summary: Measure load times for VIM, ZSH, etc. between 2 commits.
#   Author:  Nikhil Gupta
#   Usage:   benchdiff head~ head
#            benchdiff master..develop
#            benchdiff # => compares origin/master..master
#
# ---------------------------------------------------------------------

commands = {
  vim:      "vim +q &>/dev/tty",
  vim_ruby: "vim /tmp/test.rb +q &>/dev/tty",
  zsh:      "zsh -lic 'print -P \"$PROMPT $RPROMPT\"' &>/dev/null",
  # prompt:   "print -P $PROMPT $RPROMPT"
}

require 'optparse'
require 'benchmark'

ARGV.options do |opts|
  opts.on("-h", "--help") { puts %x(list-commands #{$0}); exit(0) }
  opts.parse!
end

def run(cmd); %x(#{cmd}).strip; end

GIT = "git --git-dir=$DOTCASTLE/.git --work-tree=$DOTCASTLE"
unless run("#{GIT} status --short").empty?
  puts "\e[31mERROR: You must commit your changes first.\e[0m"
  exit
end

def compare(name, prev, curr, n = 10, &block)
  [prev, curr].each do |ref|
    printf "\e[#{ref == prev ? 31 : 33}m%12s on %8s:\e[0m ", name, ref
    time_taken = run_with(ref, n, &block)
    print "#{"%02.3f" % time_taken}s (ran #{n} times with rehearsal)\n"
  end
end

def run_with(ref, n = 10, &block)
  time_taken = nil
  Dir.chdir(ENV['DOTCASTLE']) do
    %x(#{GIT} checkout #{ref} &>/dev/null)
    yield if block_given?                 # rehearsal
    start = Time.now
    n.times { yield if block_given? }     # real
    time_taken = (Time.now - start)/n.to_f
  end
  return time_taken
end

# arguments parsing..
args = ARGV.empty? ? ["origin/master", "master", 10] : ARGV
prev, curr, times = args.flatten.join(".").split(".").flatten.reject(&:empty?)
prev, curr = prev.split("..") if curr.empty?
times = times.to_s.strip.empty? ? 10 : times.to_i

# setup tests..
File.open("/tmp/test.rb", "w"){ |f| f.puts "puts 'hello world!'" }

# memoize...
prev_ref = run "#{GIT} rev-parse --short=8 #{prev}"
curr_ref = run "#{GIT} rev-parse --short=8 #{curr}"
   o_ref = %x(#{GIT} rev-parse --abbrev-ref HEAD).strip

print "\e[32mComparing branches "
print "\e[31m#{prev}\e[0m..\e[33m#{curr}\e[0m "
print "(\e[31m#{prev_ref}\e[0m..\e[33m#{curr_ref}\e[0m)\n"

commands.each_pair{|name, command| compare(name, prev_ref, curr_ref){ run command }}

%x(#{GIT} checkout #{o_ref} &>/dev/null)
puts "\e[32mYou can compare two different branches using: \e[33m#{File.basename $0} <git-ref-pre> <git-ref-post>\e[0m"
