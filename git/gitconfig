[core]
  # nano is set as default, but when running the bootstrap it is changed to $EDITOR
  editor           = vim
  pager            = "less -FRSX"
  filemode         = true
  logallrefupdates = true
  whitespace       = "space-before-tab, trailing-space"
  excludesfile     = ~/.gitignore

[status]
  relativePaths = false

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[diff]
  renames        = copies
  mnemonicprefix = true
  algorithm      = patience

[sendemail]
  smtpserver     = "smtp.gmail.com"
  smtpserverport = 587
  smtpencryption = tls

[diff]
  tool = vimdiff

[merge]
  tool = vimdiff
  summary = true
  verbosity = 1

[difftool]
  prompt = false

[mergetool]
  prompt = false
  keepbackup = false

[push]
  default = current

[help]
  browser = open

[color]
  ui = true

[color "diff"]
  meta = "blue bold"
  frag = "magenta bold"
  old  = "red bold"
  new  = "green bold"

[color "branch"]
  current = "yellow reverse"
  local   = "yellow bold"
  remote  = "green bold"
  plain   = "red bold"

[color "status"]
  added     = "yellow"
  changed   = "green bold"
  untracked = "blue bold"

[rerere]
  enabled = 1

[format]
  pretty = format:%C(green)%ad%Creset %C(red)%h%C(yellow)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[gist]
  private   = no
  browse    = no
  extension = rb

[alias]
  a         = add
  chunkyadd = add --patch             # stage commits chunk by chunk
  c         = commit -m               # commit with message
  ca        = commit -am              # commit all with message
  ci        = commit                  # commit
  cp        = cherry-pick -x          # grab a change from a branch
  b         = branch -v
  r         = remote -v               # show remotes (verbose)
  co        = checkout                # checkout
  nb        = checkout -b             # create and switch to a new branch
  s         = status -sb -uno --ignore-submodules=untracked  # simple status
  sa        = status -sb --ignore-submodules=untracked       # simple status, all files
  st        = status
  t         = tag -n                  # show tags with <n> lines of each tag message
  uncommit  = reset --soft HEAD^      # go back before last commit, with files in uncommitted state

  # Find commits by source code
  fc        = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
  # Find commits by commit message
  fm        = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Diff
  d         = !"git diff-index --quiet HEAD -- || clear; git diff --patch-with-stat"
  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di        = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
  dc        = diff --cached           # diff staged changes

  # Pull in remote changes for the current repository and all its submodules
  p         = !"git pull; git submodule foreach git pull origin master"

  # Interactive rebase with the given number of latest commits
  reb       = "!r() { git rebase -i HEAD~$1; }; r"
  rc        = rebase --continue       # continue rebase
  rs        = rebase --skip           # skip rebase

  # generate ctags, quickly
  ctags     = ![[ -f ./.git/hooks/ctags ]] && ./.git/hooks/ctags || echo 'No ctags hook found.'

  # git flow
  new       = !git pull origin develop && git flow feature start
  done      = !git pull origin develop && git flow feature finish "$(git symbolic-ref --short HEAD | sed -n 's/^feature\\///p')"
  go        = !git checkout $1 && pull
  master    = !git checkout master && pull
  develop   = !git checkout develop && pull
  mmm       = !git fetch origin master && git rebase origin/master
  ddd       = !git fetch origin develop && git rebase origin/develop

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot  = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # logs
  l            = log --graph --date=short
  short        = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple       = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  recent       = log --pretty=oneline --abbrev-commit --max-count=15
  changes      = log --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit --date=relative

[advice]
  statusHints = false
[diff]
  # Git diff will use (i)ndex, (w)ork tree, (c)ommit and (o)bject
  # instead of a/b/c/d as prefixes for patches
  mnemonicprefix = true
  algorithm = patience
[rerere]
  # Remember my merges
  # http://gitfu.wordpress.com/2008/04/20/git-rerere-rereremember-what-you-did-last-time/
  enabled = true
[include]
  path = .gitconfig.user

[ghi "highlight"]
  style = colorful

[init]
  templatedir = ~/.git-template

[url "https://bitbucket.org/"]
  insteadOf = bb:

[url "https://github.com/"]
  insteadOf = gh:

[url "https://gist.github.com/"]
  insteadOf = gist:
