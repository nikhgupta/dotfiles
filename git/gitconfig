# Credits:       =================================================== {{{
#
#            _ _    _                       _        _
#           (_) |  | |                     | |      ( )
#      _ __  _| | _| |__   __ _ _   _ _ __ | |_ __ _|/ ___
#     | '_ \| | |/ / '_ \ / _` | | | | '_ \| __/ _` | / __|
#     | | | | |   <| | | | (_| | |_| | |_) | || (_| | \__ \
#     |_| |_|_|_|\_\_| |_|\__, |\__,_| .__/ \__\__,_| |___/
#                          __/ |     | |
#                         |___/      |_|
#                            _       _    __ _ _
#                           | |     | |  / _(_) |
#                         __| | ___ | |_| |_ _| | ___  ___
#                        / _` |/ _ \| __|  _| | |/ _ \/ __|
#                       | (_| | (_) | |_| | | | |  __/\__ \
#                        \__,_|\___/ \__|_| |_|_|\___||___/
#
#
#   Hello, I am Nikhil Gupta, and
#   You can find me at http://nikhgupta.com
#
#   You can find an online version of this vimrc file at:
#   https://github.com/nikhgupta/dotfiles/blob/master/gitconfig
#
#   This is the personal git configuration file of Nikhil Gupta.
#   While much of it is beneficial for general use, I would
#   recommend picking out the parts you want and understand.
#
#   ---
#
#   This file defines some basic (and, some advanced) git options and
#   aliases. This file ommits certain options, such as `user.name`,
#   which are provided by running the bundled `./scripts/bootstrap`
#   script. In case, you have not run the aforesaid script, please open
#   it and extract the relevant commands from it for setting these
#   options.
#
#   For convenience, here are the options that are provided by the
#   bootstrapper script:
#   - core.editor
#   - user.name
#   - user.email
#   - github.user
#   - github.token
#   - sendemail.smtpuser
#
# ================================================================== }}}

[core]
  # nano is set as default, but when running the bootstrap it is changed to $EDITOR
  editor           = nano
  pager            = "less -FRSX"
  filemode         = true
  logallrefupdates = true
  whitespace       = "space-before-tab, trailing-space"
  excludesfile     = ~/.gitignore

[status]
  relativePaths = false

[apply]
  whitespace = nowarn

[branch]
  autosetupmerge = true

[diff]
  renames        = copies
  mnemonicprefix = true
  algorithm      = patience

[sendemail]
  smtpserver     = "smtp.gmail.com"
  smtpserverport = 587
  smtpencryption = tls

[diff]
  tool = vimdiff

[merge]
  tool = vimdiff
  summary = true
  verbosity = 1

[difftool]
  prompt = false

[mergetool]
  prompt = false
  keepbackup = false

[push]
  default = current

[help]
  browser = open

[color]
  ui = true

[color "diff"]
  meta = "blue bold"
  frag = "magenta bold"
  old  = "red bold"
  new  = "green bold"

[color "branch"]
  current = "yellow reverse"
  local   = "yellow bold"
  remote  = "green bold"
  plain   = "red bold"

[color "status"]
  added     = "yellow"
  changed   = "green bold"
  untracked = "blue bold"

[rerere]
  enabled = 1

[format]
  pretty = format:%C(green)%ad%Creset %C(red)%h%C(yellow)%d%Creset %C(blue)%s %C(magenta) [%an]%Creset

[gist]
  private   = no
  browse    = no
  extension = rb

[alias]

  # add
  a         = add
  chunkyadd = add --patch             # stage commits chunk by chunk

  # commits
  c         = commit -m               # commit with message
  ca        = commit -am              # commit all with message
  ci        = commit                  # commit
  amend     = commit --amend          # ammend your last commit
  ammend    = commit --amend          # ammend your last commit
  cp        = cherry-pick -x          # grab a change from a branch

  # branches
  b         = branch -v

  # remotes
  r         = remote -v               # show remotes (verbose)

  # checkouts
  co        = checkout                # checkout
  nb        = checkout -b             # create and switch to a new branch

  # diffs
  d         = diff                    # diff unstaged changes
  dc        = diff --cached           # diff staged changes
  last      = diff HEAD^              # diff last committed change

  # rebase
  rc        = rebase --continue       # continue rebase
  rs        = rebase --skip           # skip rebase

  # reset
  unstage   = reset HEAD              # remove files from index (tracking)
  uncommit  = reset --soft HEAD^      # go back before last commit, with files in uncommitted state
  filelog   = log -u                  # show changes to a file
  mt        = mergetool               # fire up the merge tool

  # stash
  ss        = stash                   # stash changes
  sl        = stash list              # list stashes
  sa        = stash apply             # apply stash (restore changes)
  sd        = stash drop              # drop stashes (destory changes)

  # status
  s         = status -sb -uno --ignore-submodules=untracked  # simple status
  sa        = status -sb --ignore-submodules=untracked       # simple status, all files
  st        = status

  # tag
  t         = tag -n                  # show tags with <n> lines of each tag message

  # generate ctags, quickly
  ctags     = ![[ -f ./.git/hooks/ctags ]] && ./.git/hooks/ctags || echo 'No ctags hook found.'

  # git flow
  ffs       = flow feature start
  fff       = flow feature finish

  # via http://blog.apiaxle.com/post/handy-git-tips-to-stop-you-getting-fired/
  snapshot  = !git stash save "snapshot: $(date)" && git stash apply "stash@{0}"
  snapshots = !git stash list --grep snapshot

  #via http://stackoverflow.com/questions/5188320/how-can-i-get-a-list-of-git-branches-ordered-by-most-recent-commit
  recent-branches = !git for-each-ref --count=15 --sort=-committerdate refs/heads/ --format='%(refname:short)'

  # logs
  l            = log --graph --date=short
  short        = log --pretty=format:\"%h %cr %cn %Cgreen%s%Creset\"
  simple       = log --pretty=format:\" * %s\"
  shortnocolor = log --pretty=format:\"%h %cr %cn %s\"
  recent       = log --pretty=oneline --abbrev-commit --max-count=15
  changes      = log --graph --pretty=format:\"%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset\" --abbrev-commit --date=relative

[advice]
  statusHints = false

[ghi "highlight"]
  style = colorful

[init]
  templatedir = ~/.git-template

[url "https://bitbucket.org/"]
  insteadOf = bb:

[url "https://github.com/"]
  insteadOf = gh:

[url "https://gist.github.com/"]
  insteadOf = gist:
