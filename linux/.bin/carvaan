#!/usr/bin/env ruby

# Download Carvaan songs.
#
# First get the PDF with list of songs from Carvaan website.
# Then, extract text from it using `pdftotext` or online services.

require 'pry'
require 'yaml'
require 'digest'
require 'taglib'
require 'open-uri'
require 'nokogiri'

class Carvaan
  attr_reader :list_dir, :download_dir

  def initialize(download, playlist)
    @text = File.join(playlist, "carvaan.txt")
    @yaml = File.join(playlist, "carvaan.yaml")
    ensure_yaml_exists!
    @playlist ||= YAML.load_file(@yaml) if File.exist?(@yaml)
    raise "Could not find a valid playlist in given directory!" unless @playlist
    @list_dir, @download_dir = playlist, download
  end

  def ensure_yaml_exists!
    return if File.exist?(@yaml) || !File.exist?(@text)
    @playlist = File.read(@text).scan(
      /\n(?:.?\d+\.)\s*(.*?)\nFilm\s*:\s*(.*?)\nArtiste?s?\:\s*(.*?(?:\n|,\n.*)+)/
    ).map do |song|
      id = Digest::MD5.hexdigest(song.map(&:strip).join(" "))
      [id, {"name" => song[0], "album" => song[1], "artist" => song[2].gsub("\n", " ").split(",").map(&:strip).join(", ")}]
    end.to_h
    File.open(@yaml, "w"){|f| f.puts @playlist.to_yaml}
  end

  def process!
    puts "[LIST!]: Found nearly #{@playlist.length} unique songs."
    @playlist.map do |id, data|
      song = Song.new(id, data, self)
      song.process!
    end
  end

  def save_song_data(song)
    @playlist[song.id] = song.data
    File.open(@yaml, "w"){|f| f.puts @playlist.to_yaml}
  end

  class Song
    attr_reader :id, :name, :album, :artist, :data, :list

    def initialize(id, data, list)
      @id, @data, @list = id, data, list
      @name, @album, @artist = data['name'], data['album'], data['artist']
      @ydl = `which youtube-dl`.strip
    end

    def to_s
      "#{name}, #{album}"
    end

    def search_queries
      queries = []
      queries << [name, album, artist].join(", ")
      queries << [name, album].join(", ")
      queries << [name, artist].join(", ")
      queries
    end

    def process!
      puts "[+SONG]: #{self}"
      search_queries.each do |query|
        return if data['artifact']
        data["youtube"] = fetch_youtube_data(query) if !data['youtube']
        download_and_write_metadata
        fetch_metadata_from_gaana
        write_mp3_info
        rename_song_file
        list.save_song_data self
      end
    end

    private

    def rename_song_file
      return if !data['download'] || data['artifact']
      _album = data['gaana'][:album] if data['gaana'] && data['gaana'][:album]
      dir = album.to_s.strip.empty? ? (_album.to_s.strip.empty? ? "Unknown Album" : _album) : album
      path = File.join(list.download_dir, dir, "#{name}.mp3")
      FileUtils.mkdir_p(File.dirname(path))
      FileUtils.mv(data['download'], path)
      if File.exist?(path)
        data['artifact'] = path
        puts "[FINAL]: Song processed and saved to: #{path}"
      end
    end

    def fetch_metadata_from_gaana
      return if data['gaana'] && !data['gaana'].empty?
      html = open("https://gaana.com/search/#{URI.encode search_queries[0]}").read
      info = html.scan(/\{\"title\":.*?\}/).map{|a| JSON.parse(a)}
      info = info.map do |item|
        html = Nokogiri::HTML(open("https://gaana.com/#{item['share_url']}").read)
        _album = html.search(".songInfo_page a").detect{|a| a.attr("href") =~ /\/album\//}.text.strip rescue nil
        next if album != _album && !album.include?(_album) && !_album.include?(album)
        _artwork = html.search(".songInfo_page img").attr("src").to_s.gsub("_175x175_", "_480x480_")
        _name = html.search(".songInfo_page h1").text.strip
        _info = html.search(".info_col1, .info_col2").map(&:text).each_slice(2).to_h.map{|k,v| [k.downcase.gsub(/[^a-z0-9]/, ''), v.strip]}.to_h
        _year = Time.parse(_info['releasedon']).year rescue nil
        {name: _name, album: _album, artwork: _artwork, year: _year, info: _info}
      end.compact.first
      puts "[GAANA]: Found match => #{info[:name]}, #{info[:album]}" if info
      data['gaana'] = info
    end

    def download_and_write_metadata
      yt = data['youtube']
      return if !yt || !yt['found'] || data['download'] || data['artifact']
      template = "#{list.download_dir}/__downloading__/%(id)s.%(ext)s"
      puts "[DWNLD]: Found YouTube video => #{yt['webpage_url']}"
      info = `#{@ydl} --continue --ignore-config --embed-thumbnail --add-metadata -x --audio-format=mp3 --audio-quality=320k --restrict-filenames --ignore-errors "#{yt['webpage_url']}" -o "#{template}" 2>&1`
      dpath = File.join(list.download_dir, "__downloading__", "#{yt['id']}.mp3")
      if File.exist?(dpath)
        data['download'] = dpath
      else
        puts "[FAIL!]: Could not download song from: #{yt['webpage_url']}"
        puts info
      end
    end

    def fetch_youtube_data(query)
      puts "[QUERY]: YouTube => #{query}"
      data = `#{@ydl} --ignore-config -j "ytsearch:#{query}" 2>&1`.strip
      JSON.parse(data).merge("found" => true, "query" => query)
    rescue JSON::ParserError
      { "error" => data, "found" => false }
    end

    def write_mp3_info
      return unless data['download']
      yt, gaana = data['youtube'], (data['gaana'] || {})

      TagLib::MPEG::File.open(data['download']) do |f|
        tag = f.id3v2_tag

        tag.title = gaana[:name] || name
        tag.artist = artist
        tag.album = gaana[:album] || album
        tag.year = gaana[:year].to_i if gaana[:year]

        comment  = "Downloaded from: #{yt['webpage_url']}"
        comment += "\nYouTube Title: #{yt['title']}"
        comment += "\nYouTube Thumb: #{yt['thumbnail']}"
        comment += "\nYouTube Categories: #{yt['categories'].join(", ")}"
        comment += "\nYouTube Tags: #{yt['tags'].join(", ")}"
        comment += "\nYouTube Stats: #{yt['view_count']}views, #{yt['like_count']}likes, #{yt['dislike_count']}dislikes, #{yt['average_rating']}rating"
        tag.comment = comment

        if gaana[:artwork]
          picture_data = begin
                           open(gaana[:artwork]).read
                         rescue OpenURI::HTTPError
                         end

          if picture_data
            pic = TagLib::ID3v2::AttachedPictureFrame.new
            pic.picture = picture_data
            pic.mime_type = "image/jpeg"
            pic.type = TagLib::ID3v2::AttachedPictureFrame::FrontCover
            tag.add_frame(pic)
          end
        end

        f.save
      end

      puts "[ID3TG]: Wrote ID3v2 tags to: #{data['downlaod']}"
    end
  end
end

Carvaan.new(
  "/media/JukeBox/Music/Carvaan",
  "/media/JukeBox/Music/Playlists"
).process!
