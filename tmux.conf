# Credits:      ==================================================== {{{
#
#            _ _    _                       _        _
#           (_) |  | |                     | |      ( )
#      _ __  _| | _| |__   __ _ _   _ _ __ | |_ __ _|/ ___
#     | '_ \| | |/ / '_ \ / _` | | | | '_ \| __/ _` | / __|
#     | | | | |   <| | | | (_| | |_| | |_) | || (_| | \__ \
#     |_| |_|_|_|\_\_| |_|\__, |\__,_| .__/ \__\__,_| |___/
#                          __/ |     | |
#                         |___/      |_|
#                            _       _    __ _ _
#                           | |     | |  / _(_) |
#                         __| | ___ | |_| |_ _| | ___  ___
#                        / _` |/ _ \| __|  _| | |/ _ \/ __|
#                       | (_| | (_) | |_| | | | |  __/\__ \
#                        \__,_|\___/ \__|_| |_|_|\___||___/
#
#
#   Hello, I am Nikhil Gupta, and
#   You can find me at http://nikhgupta.com
#
#   You can find an online version of this file at:
#   https://github.com/nikhgupta/dotfiles/blob/master/tmux.conf
#
#   This is the personal tmux configuration of Nikhil Gupta.
#   While much of it is beneficial for general use, I would recommend picking
#   out the parts you want and understand.
#
#   ---
#
#   Configuration inside `~/.tmux.conf` is used by `tmux` program, and
#   can be used to define various configurations for it. This configuration
#   attempts to add vimification, as well as easier navigation and looks for
#   tmux.
#
# ================================================================== }}}
# Basics:       set the basic behaviour of tmux {{{
  # default termtype. ZSH plugin 'tmux', also, sets this value.
  set -g  default-terminal screen-256color

  # ring the bell if any background window rang a bell
  set -g  bell-action any
  set -g  visual-bell off

  # use vi keybindings for tmux commandline input.
  # NOTE: To get command mode, hit ESC twice.
  set -g  status-keys vi

  # use vi keybindings in copy and choice modes
  set -gw mode-keys vi

  # set first window to index 1 (not 0) to map more to the keyboard layout
  set -g  base-index 1
  set -gw pane-base-index 1

  # no escape time for vi mode
  set -gs escape-time 0

  # bigger history
  set -g  history-limit 10000

  # allow mouse click to select panes
  set -g  mouse-select-pane on
  set -gw mode-mouse on

  set -g  set-titles on
  set -g  set-titles-string '#H:#S.#I.#P #W #T' # window number,program name, active(or not)
# }}}
# Key Bindings: relax a bit, and use easier mappings {{{
# NOTE: all window movement/resizing mappings have, also, been mapped to better
#       and saner mappings within iTerm2.
# NOTE: for the same reason, do not remap `n` or `p` bindings in this file.

  # use `^a` as tmux prefix
  unbind-key C-b
  set -g prefix C-a

  # allow sending tmux commands to inner mutiplexer via `^a a`
  bind-key a send-prefix

  # detach from the tmux client with a simple `^a ^d`
  bind-key ^D detach-client

  # jump to last window with `^a ^a`
  unbind-key l       # default: last-window
  bind-key C-a last-window

  # new windows should be created within PWD
  bind-key c   new-window -c "#{pane_current_path}"
  bind-key C-c new-window -c "#{pane_current_path}"

  # create splits and vertical splits
  unbind-key %
  unbind-key _
  unbind-key |

  bind-key  | split-window -h -c "#{pane_current_path}"
  bind-key  _ split-window -v -c "#{pane_current_path}"
  bind-key ^V split-window -h -c "#{pane_current_path}"
  bind-key ^S split-window -v -c "#{pane_current_path}"

  # resize panes easily using vi bindings
  # mapped to Shift-Ctrl-<h,j,k,l> in iTerm.
  bind-key -r H resize-pane -L 5
  bind-key -r J resize-pane -D 5
  bind-key -r K resize-pane -U 5
  bind-key -r L resize-pane -R 5

  # adds vim keys to move between panes
  bind-key h select-pane -L
  bind-key l select-pane -R
  bind-key j select-pane -D
  bind-key k select-pane -U

  # easily toggle synchronization
  # sends input to all panes in a given window.
  bind-key ^E setw synchronize-panes on    # mimic all panes to Echo somethinh
  bind-key ^L setw synchronize-panes off   # get back to Individual

  # force a reload of the config file
  unbind r              # default: refresh-client
  bind r source-file ~/.tmux.conf \; display " Reloaded!" \; refresh-client

  # rename a window easily
  bind-key ^R command-prompt "rename-window %%"

  # connect to a SSH session easily
  bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

  # Better defaults for moving and renaming windows
  # bind-key , previous-window
  # bind-key . next-window
  # bind-key m move-window
  # bind-key n command-prompt "rename-window %%"

  # Use Vi-style keys for copying and pasting
  # unbind-key v
  # bind-key v copy-mode
  # unbind-key p
  # bind-key p paste-buffer
# }}}
# Appearance:   everything has a right to look awesome {{{
  # set -g status-left '#[fg=colour235,bg=colour252,bold] ❐ #S #[fg=colour252,bg=colour238,nobold]⮀#[fg=colour245,bg=colour238,bold] #(whoami) #[fg=colour238,bg=colour234,nobold]⮀'

  # messages should be displayed in a distinctive bg color to notice them easily
  # bg: blue, fg: white
  set -g message-command-style         fg=colour0,bg=colour4
  set -g message-style                 fg=colour0,bg=colour2
  # set -g message-attr bold

  # pane borders should distinguish between active and inactive panes
  set -g pane-border-style             fg=colour20
  set -g pane-active-border-style      fg=colour196

  # have a beautiful statusline that mimics vim airline
  set -g status                        on
  set -g status-utf8                   on
  set -g status-style                  bg=colour241,none
  set -g status-justify                left
  set -g status-interval               5
  set -g status-left-style             none
  set -g status-right-style            none
  set -g status-left-length            100
  set -g status-right-length           100
  set -g visual-activity on
  set -g visual-content on
  set -g visual-silence on
  set -g visual-bell on

  set -gw window-status-separator      "  "

  set -g status-position top
  set -gw aggressive-resize on

  # show a beautiful powerline and display a notification when `prefix` is typed
  set -g status-left "#[bg=colour#{?client_prefix,1,3},fg=colour0] tmux  #S #[bg=colour241,fg=colour#{?client_prefix,1,3},none]"
  set -g status-right "#[fg=colour#{?client_prefix,1,3},bg=colour241,none]#[fg=colour0,bg=colour#{?client_prefix,1,3}] %Y-%m-%d  %H:%M #[fg=colour19,bg=colour#{?client_prefix,1,3},none]#[bg=colour19,fg=colour20] #($DOTCASTLE/tmux/status_line battery) #[bg=colour19,fg=colour#{?client_prefix,1,3},none]#[bg=colour#{?client_prefix,1,3},fg=colour0] #h  #(curl ipecho.net/plain || echo -ne 'OFFLINE') "
  set -gw window-status-format "#[bg=colour241]#[fg=colour21]#I #[fg=colour19] #[fg=colour20]#W "
  set -gw window-status-current-format "#[fg=colour241,bg=colour21,none]#[fg=colour18,bg=colour21] #I  #W #[fg=colour21,bg=colour241,none] "
# }}}
# Tweaks:       various hacks to make things stick {{{
  # patch for OS X pbpaste and pbcopy under tmux.
  set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"
# }}}
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'
