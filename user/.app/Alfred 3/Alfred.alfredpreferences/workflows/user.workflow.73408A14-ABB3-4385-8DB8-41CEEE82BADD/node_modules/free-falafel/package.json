{
  "_args": [
    [
      {
        "raw": "free-falafel@0.1.6",
        "scope": null,
        "escapedName": "free-falafel",
        "name": "free-falafel",
        "rawSpec": "0.1.6",
        "spec": "0.1.6",
        "type": "version"
      },
      "/Users/nlo/Library/Application Support/Alfred 3/Alfred.alfredpreferences/workflows/user.workflow.5A612E3E-4242-48A3-B1B3-355F00E2FC9E/node_modules/durable-json-lint"
    ]
  ],
  "_from": "free-falafel@0.1.6",
  "_id": "free-falafel@0.1.6",
  "_inCache": true,
  "_installable": true,
  "_location": "/free-falafel",
  "_npmUser": {
    "name": "freethenation",
    "email": "rpklafter@yahoo.com"
  },
  "_npmVersion": "1.1.62",
  "_phantomChildren": {},
  "_requested": {
    "raw": "free-falafel@0.1.6",
    "scope": null,
    "escapedName": "free-falafel",
    "name": "free-falafel",
    "rawSpec": "0.1.6",
    "spec": "0.1.6",
    "type": "version"
  },
  "_requiredBy": [
    "/durable-json-lint"
  ],
  "_resolved": "https://registry.npmjs.org/free-falafel/-/free-falafel-0.1.6.tgz",
  "_shasum": "abaa130c3ad446e6cf74c702f6d78fe7da4cd157",
  "_shrinkwrap": null,
  "_spec": "free-falafel@0.1.6",
  "_where": "/Users/nlo/Library/Application Support/Alfred 3/Alfred.alfredpreferences/workflows/user.workflow.5A612E3E-4242-48A3-B1B3-355F00E2FC9E/node_modules/durable-json-lint",
  "bugs": {
    "url": "https://github.com/freethenation/node-falafel/issues"
  },
  "dependencies": {
    "esprima": "1.0.2"
  },
  "description": "transform the ast on a recursive walk",
  "devDependencies": {
    "tap": "~0.3.0",
    "tape": "~0.0.2"
  },
  "directories": {
    "example": "example",
    "test": "test"
  },
  "dist": {
    "shasum": "abaa130c3ad446e6cf74c702f6d78fe7da4cd157",
    "tarball": "https://registry.npmjs.org/free-falafel/-/free-falafel-0.1.6.tgz"
  },
  "engines": {
    "node": ">=0.4.0"
  },
  "homepage": "https://github.com/freethenation/node-falafel#readme",
  "keywords": [
    "ast",
    "source",
    "traversal",
    "syntax",
    "tree",
    "burrito"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "freethenation",
      "email": "rpklafter@yahoo.com"
    }
  ],
  "name": "free-falafel",
  "optionalDependencies": {},
  "readme": "# free-falafel\r\n\r\nTransform the [ast](http://en.wikipedia.org/wiki/Abstract_syntax_tree) on a recursive walk.\r\n\r\n[![Build Status](https://travis-ci.org/freethenation/node-falafel.png?branch=master)](https://travis-ci.org/freethenation/node-falafel)\r\n\r\nThis module is like [burrito](https://github.com/substack/node-burrito),\r\nexcept that it uses [esprima](http://esprima.org) instead of\r\n[uglify](https://github.com/mishoo/UglifyJS) for friendlier-looking ast nodes.\r\n\r\n# Example\r\n\r\n## array.js\r\n\r\nPut a function wrapper around all array literals.\r\n\r\n``` js\r\nvar falafel = require('free-falafel');\r\n\r\nvar src = '(' + function () {\r\n    var xs = [ 1, 2, [ 3, 4 ] ];\r\n    var ys = [ 5, 6 ];\r\n    console.dir([ xs, ys ]);\r\n} + ')()';\r\n\r\nvar output = falafel(src, function (node) {\r\n    if (node.type === 'ArrayExpression') {\r\n        node.update('fn(' + node.source() + ')');\r\n    }\r\n});\r\nconsole.log(output);\r\n```\r\n\r\noutput:\r\n\r\n```\r\n(function () {\r\n    var xs = fn([ 1, 2, fn([ 3, 4 ]) ]);\r\n    var ys = fn([ 5, 6 ]);\r\n    console.dir(fn([ xs, ys ]));\r\n})()\r\n```\r\n\r\n# Methods\r\n\r\n``` js\r\nvar falafel = require('free-falafel')\r\n```\r\n\r\n## falafel(src, opts={}, fn, breadthFirstFn)\r\n\r\nTransform the string source `src` with the function `fn`, returning a\r\nstring-like transformed output object.\r\n\r\nFor every node in the ast, `fn(node)` fires. The recursive walk is \r\ndepth first, so children get called before their parents.\r\n\r\nPerforming the transforms during a depth first traversal makes it easier \r\nto write nested transforms since transforming parents often requires transforming \r\nall its children first.\r\n\r\nThe return value is string-like (it defines `.toString()` and `.inspect()`) so\r\nthat you can call `node.update()` asynchronously after the function has\r\nreturned and still capture the output.\r\n\r\nInstead of passing a `src` you can also pass `opts.source` or, if the source code\r\nhas already been parsed into an ast, you can pass `opts.ast`.\r\n\r\nAll of the `opts` will be passed directly to esprima except for `'range'` which\r\nis always turned on because falafel needs it.\r\n\r\nSome of the options you might want from esprima includes:\r\n`'loc'`, `'raw'`, `'comments'`, `'tokens'`, and `'tolerant'`.\r\n\r\nYou can optionally provide the function `breadthFirstFn`. This function will be\r\ncalled before `fn` during a breadth first traversal of the ast. This function allows\r\nyou to add additional properties to the `node` parameter so that you can easily do things\r\nlike not transforming any code inside of a function definition. There is an example of\r\nthis below.\r\n\r\n# Nodes\r\n\r\nAside from the regular [esprima](http://esprima.org) data, you can also call\r\nsome inserted methods on nodes.\r\n\r\nAside from updating the current node, you can also reach into sub-nodes to call\r\nupdate functions on children from parent nodes.\r\n\r\n## node.source()\r\n\r\nReturn the source for the given node, including any modifications made to\r\nchildren nodes.\r\n\r\n## node.update(s)\r\n\r\nTransform the source for the present node to the string `s`. This function is not\r\navailable during the breadth first traversal of the ast.\r\n\r\nNote that in `'ForStatement'` node types, there is an existing subnode called\r\n`update`. For those nodes all the properties are copied over onto the\r\n`node.update()` function.\r\n\r\n## node.parent\r\n\r\nReference to the parent element or `null` at the root element.\r\n\r\n# More Examples\r\n\r\n## breadthFirstFn example\r\nPut a function wrapper around all array literals that are not inside of a function definition.\r\n\r\n``` js\r\nvar falafel = require('free-falafel');\r\n\r\nvar src = '(' + function () {\r\n    var xs = [ 1, 2, [ 3, 4 ] ];\r\n    var ys = [ 5, 6 ];\r\n    somefunc([ xs, ys ]);\r\n} + ')();\\n';\r\nsrc += 'var g = [ 5, 6 ];';\r\n\r\nvar output = falafel(src, \r\n    function (node) {\r\n        if (node.type === 'ArrayExpression' && !node.inFunc) {\r\n            node.update('fn(' + node.source() + ')');\r\n        }\r\n    },\r\n    function (node) {\r\n        if (node.type === 'FunctionExpression') {\r\n            node.inFunc = true;\r\n        }\r\n        else if (node.parent && node.parent.inFunc) {\r\n            //inherit from parent\r\n            node.inFunc = node.parent.inFunc;\r\n        }\r\n        else { node.inFunc = false; }\r\n    });\r\nconsole.log(output.toString());\r\n```\r\n\r\noutput:\r\n\r\n```\r\n(function () {\r\n    var xs = [ 1, 2, [ 3, 4 ] ];\r\n    var ys = [ 5, 6 ];\r\n    somefunc([ xs, ys ]);\r\n})();\r\nvar g = fn([ 5, 6 ]);\r\n```\r\n\r\nYou can play with this example at JS Bin [here](http://jsbin.com/free-falafel/4/edit)\r\n\r\n# Install\r\n\r\nWith [npm](http://npmjs.org) do:\r\n\r\n```\r\nnpm install free-falafel\r\n```\r\n\r\n# License\r\n\r\nMIT\r\n\r\n",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/freethenation/node-falafel.git"
  },
  "scripts": {
    "test": "tap ./test/array.js ./test/async.js ./test/for.js ./test/parent.js ./test/breadthFirstFn.js"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": {
      "iexplore": [
        "6.0",
        "7.0",
        "8.0",
        "9.0"
      ],
      "chrome": [
        "20.0"
      ],
      "firefox": [
        "10.0",
        "15.0"
      ],
      "safari": [
        "5.1"
      ],
      "opera": [
        "12.0"
      ]
    }
  },
  "version": "0.1.6"
}
