#!/usr/bin/env ruby
#
# ---------------------------------------------------------------------
#
#   Summary:     Browse and search commandlinefu.com commands
#   Author:      Nikhil Gupta
#   Description: This script allows browsing and search commandlineflu.com
#                website by using its API. Several options are available.
#
#                Duration can be last month, week or day.
#                By default, duration is all time.
#                Sorting is done by dates, and optionally by votes.
#                You can limit the number of returned results in CUSTOM format.
#                You can specify one of the JSON, RSS or PLAINTEXT formats.
#                Otherwise, commands are displayed in CUSTOM format for display.
#
#   Usage:       commandlinefu [-m|--last-month]|[-w|--last-week]|[-d|--last-day]
#                commandlinefu [-j|--json]|[-x|--xml]|[-t|--text]
#                commandlinefu [-v|--by-votes]
#                commandlinefu [-l|--limit=VAL]
#                commandlinefu [-f|--format=json|rss|plaintext]
#
#                # default: sort all time by date with custom format
#
#                commandlinefu -h
#
#                commandlinefu search|matching <term>
#                commandlinefu random
#                commandlinefu (browse|explore)/[duration]/[sorting]
#
#                commandlinefu [all-time-greats]
#                # => all time greats on CFU (browse/sort-by-votes)
#                commandlinefu [hot-this-week]
#                # => hot this week on CFU (browse/last-week/sort-by-votes)
#                commandlinefu browse/last-month/sort-by-votes -l 10 -f plaintext
#                # => top 10 commands in last month sorted by votes in plaintext format
#                # => same as: commandlinefu explore -mvtl 10
#                commandlinefu matching python -vf json
#                # => all commands matching `python` sorted by votes in json format
#
# ---------------------------------------------------------------------

require 'uri'
require 'pry'
require 'json'
require 'net/http'
require 'optparse'
require 'base64'

format = duration = sorting = nil
limit = offset = 0
API_URL = "http://www.commandlinefu.com/commands/%{command}/%{format}/%{offset}/"

ARGV.options do |opts|
  opts.on("-m", "--last-month"){ duration = "last-month" }
  opts.on("-w", "--last-week") { duration = "last-week" }
  opts.on("-d", "--last-day")  { duration = "last-day" }
  opts.on("-v", "--by-votes")  { sorting = "sort-by-votes" }
  opts.on("-j", "--json")      { format = "json" }
  opts.on("-x", "--xml")       { format = "rss" }
  opts.on("-t", "--text")      { format = "plaintext" }
  opts.on("-f", "--format VAL"){ |val| format = val }
  opts.on("-l", "--limit VAL") { |val| limit  = val.to_i }
  opts.on("-p", "--page VAL")  { |val| offset = val.to_i * 25 - 25 }
  opts.on("-h", "--help")      { puts %x(list-commands #{$0}); exit(0); }
  opts.parse!
end

command = case ARGV[0].to_s.downcase
          when 'id' then "collection/#{ARGV[1]}"
          when 'search', 'matching'  then "matching/#{ARGV[1]}/#{Base64.encode64(ARGV[1]).strip}/%{sorting}"
          when 'browse', 'explore'   then "browse/%{duration}/%{sorting}"
          when 'hot-this-week'       then "browse/last-week/sort-by-votes"
          when '', 'all-time-greats' then "browse/sort-by-votes"
          # when 'random'              then "random"
          else ARGV[0]
          end

def fetch(uri_str, limit = 10)
  raise ArgumentError, 'too many HTTP redirects' if limit == 0
  response = Net::HTTP.get_response(URI(uri_str))

  case response
  when Net::HTTPSuccess then
    response
  when Net::HTTPRedirection then
    location = response['location']
    # warn "redirected to #{location}"
    fetch(location, limit - 1)
  else
    response.value
  end
end

fasked   = !format.to_s.empty? && %(rss json plaintext).include?(format.to_s)
options  = {command: command, offset: offset, format: (fasked ? format : :json)}
url      = (API_URL % options) % {duration: duration, sorting: sorting}
response = fetch(url).body

if fasked
  print response
else
  puts "--> \e[31m#{url}\e[0m\n\n"
  response = JSON.parse(response)
  response = response.take(limit) if limit > 0
  response.each do |item|
    puts "\e[32m## #{item["summary"]}\e[0m"
    puts '-' * (item["summary"].length + 3)
    puts ">>    \e[35m#{item["command"]}\e[0m"
    puts "@@    #{item["url"]}"
    puts "..    #{item["votes"]} votes; ID: #{item["id"]}"
    puts
  end
end
