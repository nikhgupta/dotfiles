#!/usr/bin/env ruby

# Script to create Gitlab repo from the CLI

require 'pp'
require 'json'
require 'optparse'
require 'net/https'

def error(message)
  puts "\x1b[31mError: #{message}\x1b[0m"
  exit 1
end

repo_name = nil
OptionParser.new do |opts|
  opts.on('-n', '--name=STRING') { |val| repo_name = val }
end.parse!
repo_name ||= File.basename(File.realpath(Dir.pwd))
puts "Creating Gitlab repository: #{repo_name}"

token = ENV['GITLAB_TOKEN'].to_s.strip
error 'GITLAB_TOKEN environment variable needs to be set!' if token.empty?

nsid = 2_035_359
uri  = URI('https://gitlab.com/api/v4/projects')

data = { path: repo_name, namespace_id: nsid, visibility: 'private',
         issues_enabled: true, private_token: token }

headers  = { 'Content-Type' => 'application/json' }
res = Net::HTTP.post uri, data.to_json, headers
res = JSON.parse(res.body)

command = nil
if res.has_key?("id")
  puts "\e[32mRepository created: #{res['path_with_namespace']}\e[0m"
  puts "Will add repo as remote and push to it.."
  exec "git remote add gitlab #{res['ssh_url_to_repo']} && git push -u gitlab master"
elsif res.has_key?("message")
  puts "\e[31mFound following errors:\e[0m"
  res['message'].map do |key, val|
    "  - #{key}: #{val.join("; ")}" if val.any?
  end.compact.sort_by(&:length).each{|err| puts err}
else
  pp res
end
