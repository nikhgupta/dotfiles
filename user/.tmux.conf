#
#   Configuration inside `~/.tmux.conf` is used by `tmux` program, and
#   can be used to define various configurations for it. This configuration
#   attempts to add vimification, as well as easier navigation and looks for
#   tmux.
#

run-shell "which kitty &>/dev/null && kitty @ set-spacing padding=0"

# default termtype. ZSH plugin 'tmux', also, sets this value.
# set -g  default-terminal screen-256color
# set-option -g default-terminal screen-256color
set -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"

# ring the bell if any background window rang a bell
set -g  bell-action any
set -g  visual-bell off

# use vi keybindings for tmux commandline input.
# NOTE: To get command mode, hit ESC twice.
set -g  status-keys vi

# use vi keybindings in copy and choice modes
set -gw mode-keys vi

# set first window to index 1 (not 0) to map more to the keyboard layout
set -g  base-index 1
set -gw pane-base-index 1

# no escape time for vi mode
set -gs escape-time 0

# bigger history
set -g  history-limit 10000

# allow mouse click to select panes
# set -g  mouse-select-pane on
# set -gw mode-mouse on

# NOTE: all window movement/resizing mappings have, also, been mapped to better
#       and saner mappings within iTerm2.
# NOTE: for the same reason, do not remap `n` or `p` bindings in this file.

# use `^a` as tmux prefix
unbind-key C-b
set -g prefix C-o

# allow sending tmux commands to inner mutiplexer via `^a a`
bind-key a send-prefix

# detach from the tmux client with a simple `^a ^d`
bind-key ^D detach-client

# jump to last window with `^a ^a`
unbind-key l       # default: last-window
bind-key C-o last-window

# new windows should be created within PWD
bind-key c   new-window -c "#{pane_current_path}"
bind-key C-c new-window -c "#{pane_current_path}"

# create splits and vertical splits
unbind-key %
unbind-key _
unbind-key |

bind-key  | split-window -h -c "#{pane_current_path}"
bind-key  _ split-window -v -c "#{pane_current_path}"
bind-key ^V split-window -h -c "#{pane_current_path}"
bind-key ^S split-window -v -c "#{pane_current_path}"

# resize panes easily using vi bindings
# mapped to Shift-Ctrl-<h,j,k,l> in iTerm.
bind-key -r H resize-pane -L 5
bind-key -r J resize-pane -D 5
bind-key -r K resize-pane -U 5
bind-key -r L resize-pane -R 5

# easily toggle synchronization
# sends input to all panes in a given window.
bind-key ^E setw synchronize-panes on \; display " Turning on all-pane sync.."
bind-key ^L setw synchronize-panes off \; display " Turned off all-pane sync."

# force a reload of the config file
unbind r              # default: refresh-client
bind r source-file ~/.tmux.conf \; display " Reloaded!" \; refresh-client

# rename a window easily
bind-key ^R command-prompt "rename-window %%"

# connect to a SSH session easily
bind-key S command-prompt -p ssh: "new-window -n %1 'ssh %1'"

# Better defaults for moving and renaming windows
# bind-key , previous-window
# bind-key . next-window
# bind-key m move-window
# bind-key n command-prompt "rename-window %%"

# Use Vi-style keys for copying and pasting
# unbind-key v
# bind-key v copy-mode
# unbind-key p
# bind-key p paste-buffer

# messages should be displayed in a distinctive bg color to notice them easily
# bg: blue, fg: white
set -g message-command-style         fg=colour0,bg=colour4
# set -g message-style                 fg=colour0,bg=colour2
# set -g message-attr bold

# pane borders should distinguish between active and inactive panes
# set -g pane-border-style             fg=colour5
# set -g pane-active-border-style      fg=colour2
set -g pane-border-style                 'bg=black,fg=#1E272C'
set -g pane-active-border-style          'bg=black,fg=#1E272C'

# have a beautiful statusline that mimics vim airline
set -g status                        on
# set -g status-style                  bg=colour214,none
set -g status-style                  'bg=#1E272C,fg=#6A7D89'
set -g status-justify                left
set -g status-interval               30
set -g status-left-style             none
set -g status-right-style            none
set -g status-left-length            100
set -g status-right-length           100
set -g status-position               bottom

if-shell 'test -n "$SSH_CLIENT"' \
  'set -g status-position top'


set -gw main-pane-width 100
set -gw main-pane-height 36
set -gw aggressive-resize on
set -gw window-status-separator      "  "

# show a beautiful powerline and display a notification when `prefix` is typed
set -g status-left "#[bg=colour#{?client_prefix,1,6},fg=colour231] #S #[bg=#1E272C,fg=colour#{?client_prefix,1,6},none] "
set -g status-right "#[fg=colour#{?client_prefix,1,6},bg=#1E272C,none]#[fg=#1E272C,bg=colour#{?client_prefix,1,6}] %d/%m/%Y %H:%M #[fg=#1E272C,bg=colour#{?client_prefix,1,6},none]#[bg=#1E272C,fg=colour6,none] #($DOTCASTLE/terminal/tmux/status_line battery) "
# set -g status-left "#[bg=colour#{?client_prefix,1,3},fg=colour0] tmux  #S #[bg=colour241,fg=colour#{?client_prefix,1,3},none]"
# set -g status-right "#[fg=colour#{?client_prefix,1,3},bg=colour241,none]#[fg=colour0,bg=colour#{?client_prefix,1,3}] %Y-%m-%d  %H:%M #[fg=colour19,bg=colour#{?client_prefix,1,3},none]#[bg=colour19,fg=colour20] #($DOTCASTLE/tmux/status_line battery) #[bg=colour19,fg=colour#{?client_prefix,1,3},none]#[bg=colour#{?client_prefix,1,3},fg=colour0] #h  #(curl http://ipecho.net/plain || echo 'OFFLINE') "
# set -gw window-status-format "#[bg=colour241]#[fg=colour21]#I#[fg=colour19]#[fg=colour20]#W"
set -gw window-status-format "#[bg=#1E272C]#[fg=cyan]#I #[fg=#1E272C]#[fg=cyan]#W#[fg=cyan] "
set -gw window-status-current-format "#[bg=cyan,fg=#1E272C,none]#[fg=#1E272C,bg=cyan] #I  #W #[fg=cyan,bg=#1E272C,none]"

set -wg mode-style 'bg=cyan,fg=black'
set -g message-style 'bg=black,fg=cyan'
set -g clock-mode-colour cyan
# set-window-option -g window-status-current-bg '#1E272C'
# set-window-option -g window-status-current-fg cyan

# patch for OS X pbpaste and pbcopy under tmux.
set-option -g default-command "which reattach-to-user-namespace > /dev/null && reattach-to-user-namespace -l $SHELL || $SHELL"
if-shell "[ -f ~/.tmux.conf.user ]" 'source ~/.tmux.conf.user'

# smart pane switching with awareness of vim splits
bind -n C-h run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-h) || tmux select-pane -L"
bind -n C-j run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-j) || tmux select-pane -D"
bind -n C-k run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-k) || tmux select-pane -U"
bind -n C-l run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys C-l) || tmux select-pane -R"
bind -n C-\\ run "(tmux display-message -p '#{pane_current_command}' | grep -iq vim && tmux send-keys 'C-\\') || tmux select-pane -l"

# pane movement
bind-key h resize-pane -Z
bind-key C-h resize-pane -Z
bind-key j command-prompt -p "join pane from:"  "join-pane -hs '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -ht '%%'"
