" Credits: """""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"            _ _    _                       _        _
"           (_) |  | |                     | |      ( )
"      _ __  _| | _| |__   __ _ _   _ _ __ | |_ __ _|/ ___
"     | '_ \| | |/ / '_ \ / _` | | | | '_ \| __/ _` | / __|
"     | | | | |   <| | | | (_| | |_| | |_) | || (_| | \__ \
"     |_| |_|_|_|\_\_| |_|\__, |\__,_| .__/ \__\__,_| |___/
"                          __/ |     | |
"                         |___/      |_|
"                            _       _    __ _ _
"                           | |     | |  / _(_) |
"                         __| | ___ | |_| |_ _| | ___  ___
"                        / _` |/ _ \| __|  _| | |/ _ \/ __|
"                       | (_| | (_) | |_| | | | |  __/\__ \
"                        \__,_|\___/ \__|_| |_|_|\___||___/
"
"
"   This is the personal .vimrc file of Nikhil Gupta.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   Hello, I am Nikhil Gupta, and
"   You can find me at http://nikhgupta.com
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NORC: """"""""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   To start vim without using this .vimrc file, use:
"     vim -u NORC
"
"   To start vim without loading any .vimrc or plugins, use:
"     vim -u NONE
" }}}
" Vim Tips: """"""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - Use `:X` to set encryption on any file
"   - Use `setl key=` to disable this encryption
"   - Use `gx` to open the current Url/File/etc. using OS-specific command
"   - Use `g:netrw_browserx_viewer` to set the binary for above command
"   - Use `''` to jump to location of the last jump
"   - Use `'.` to jump to location of your last edit
" }}}
" Sections: """"""""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"     => Variable declaration to be used in this file
"     => Custom functions to be used in this file
"     => Load ~/.vimrc.before
"     => Make this configuration cross-platform
"     => NeoBundle and other Vim plugins
"     => Editing behaviour of Vim
"     => General behaviour of Vim
"     => Shell behaviour for Vim
"     => GUI behaviour of Vim
"     => Syntax highlighting and Search behaviour
"     => Folding behaviour of Vim
"     => Matching and Auto-Command behaviours
"     => Shortcut mappings
"     => Filetype specific handling
"     => Common abbreviations / misspellings
"     => Custom functions
"     => Reload Vim configuration automatically?
"     => Extra vi-compatibility
"     => Load ~/.vimrc.after
"
" }}}
" TODOs: """""""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - convert common functionality into a plugin
"   - revisit: http://learnvimscriptthehardway.stevelosh.com/
"   - search for a suitable autocompletion bundle
"   - recreate MyFoldText() function based on: http://git.io/7QA1Dg
"   - create sections, vis-a-vis http://git.io/aDaz_g
"   - revisit exuberant tags http://bit.ly/17rL4P8
"   - implement visual search http://bit.ly/17rLkxv
"   - implement sessions http://bit.ly/1e36WmX
"   - line numbers must use 4 columns
"   - implement Ranger file browser
"   - display syntax highlighting in foldtext
"   - create a command to run arbitrary shell and ruby source and replace content-in-place
"   - auto-open fold when a search match is found or when it is jumped upon
"   - integrate a vim-enabled notes manager
"   - integrate a vim-enabled scripts manager
"   - add spelling related mappings to vim (as well as some other togglers)
"   - read and implement vim configuration from:
"     - https://github.com/skwp/dotfiles
"     - https://github.com/holman/dotfiles
"     - https://github.com/ryanb/dotfiles
"     - https://github.com/thoughtbot/dotfiles
"     - https://github.com/garybernhardt/dotfiles
"     - https://github.com/rtomayko/dotfiles
"     - https://github.com/gf3/dotfiles
"   - verify and reinstall bundles
" }}}
" Completed: """""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - recreate folds when reloading a file?
"     : use foldlevel and foldlevelstart settings for this purpose
"   - make airline work
"   - use patched fonts for AirLine
"   - read and implement vim configuration from:
"     - https://github.com/amix/vimrc
"     - https://github.com/vgod/vimrc
"     - https://github.com/humiaozuzu/dot-vimrc
"     - https://github.com/sontek/dotfiles
"     - https://github.com/mathiasbynens/dotfiles
"     - https://github.com/nvie/vimrc (originally, based on it)
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible                                        " No to the total compatibility with the ancient vi
let mapleader=","                                       " change mapleader key configuration

" Custom functions for easy VimRC configuration {{{
  " vim: source a file, only if we can read it :) {{{
  " TODO: change this function to include a _name before
  "       and name_ file afterwards
  function! SourceIfReadable(file)
    if filereadable(expand(a:file))
      execute "source" expand(a:file)
    endif
  endfunction " }}}
  " vim: ensure that a directory exists {{{
  function! EnsureExists(path)
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path), 'p')
    endif
  endfunction
  " }}}
" }}}
" Declare some variables for easy VimRC configuration {{{
  let g:is_mac     = has('mac') || has('macunix') || has('gui_macvim')
  let g:is_macvim  = has('gui_macvim')
  let g:is_linux   = has('linux')
  let g:is_windows = has('win16') || has('win32') || has('win64')
" }}}

" Cross Platform Compatibility {{{
  " Better Unix / Windows compatibility
  set viewoptions=folds,options,cursor,unix,slash

  " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
  " across (heterogeneous) systems easier.
  if g:is_windows
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
    if has("multi_byte")
      " Windows cmd.exe still uses cp850. If Windows ever moved to
      " Powershell as the primary terminal, this would be utf-8
      set termencoding=cp850
      " Let Vim use utf-8 internally, because many scripts require this
      set encoding=utf-8
      setglobal fileencoding=utf-8
      " Windows has traditionally used cp1252, so it's probably wise to
      " fallback into cp1252 instead of eg. iso-8859-15.
      " Newer Windows files might contain utf-8 or utf-16 LE so we might
      " want to try them first.
      set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
    endif
  endif
" }}}

call SourceIfReadable('~/.vimrc.before')                " source ~/.vimrc.before, if exists
" NeoBundle: Installation and its settings {{{

  " Auto-install NeoBundle, if not found
  let iCanHazNeoBundle=1
  let neobundle_readme=expand('~/.vim/bundle/neobundle.vim/README.md')
  if !filereadable(neobundle_readme)
      echo "Installing NeoBundle.."
      silent !mkdir -p ~/.vim/bundle
      silent !git clone https://github.com/Shougo/neobundle.vim ~/.vim/bundle/neobundle.vim
      let iCanHazNeoBundle=0
  endif

  " call our NeoBundle setup
  if has('vim_starting')
      set runtimepath+=~/.vim/bundle/neobundle.vim/
  endif
  call neobundle#rc(expand('~/.vim/bundle/'))

  " let NeoBundle manage NeoBundle
  NeoBundle 'Shougo/neobundle.vim'

  " Use local bundles, if available and then, load our bundles
  call SourceIfReadable("~/.vim/lib/_bundles.vim")
  call SourceIfReadable("~/.vim/lib/bundles.vim")

  " required by NeoBundle
  filetype plugin indent on       " enable detection, plugins and indenting in one step
  syntax on                       " enable syntax highlighting
" }}}

" Behaviour: Vim {{{
" set encoding
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

" security related matters
set nomodeline                  " disable mode lines (security measure)

" mouse related matters
if has('mouse')
  set mouse=a                   " enable using mouse if terminal supports it
  set mousehide
endif

" wrapping related matters
set nowrap                      " don't wrap lines
set linebreak                   " break long lines at words, when wrap is on
set textwidth=80                " wrap after this many characters in a line
set colorcolumn=+1              " highlight end of textwidth
set whichwrap=b,s,h,l,<,>,[,]   " allow <BS> & cursor keys to move to prev/next line
set scrolloff=3                 " keep lines off edges of the screen when scrolling
" set scrolljump=5                " lines to scroll when cursor leaves screen
set sidescroll=1                " brings characters in view when side scrolling
set sidescrolloff=15            " start side-scrolling when n chars are left

" look related matters
set number                      " always show line numbers
set showmode                    " always show what mode we're currently editing in
set report=0                    " always report number of lines changed
set cursorline                  " highlight the current line, for quick orientation
set nocursorcolumn              " highlight the current column, for quick orientation
set shortmess+=filmnrxoOtT      " abbrev. vim-messages (avoids 'hit enter', also)
" set shortmess-=I                " force display of intro message on Vim startup
set list                        " show invisible characters, by default
set listchars=tab:▸\ ,trail:·,extends:▶,precedes:◀,nbsp:·

" windows related matters
set splitright                  " puts new vsplit windows to the right of the current
set splitbelow                  " puts new split windows to the bottom of the current
set lazyredraw                  " don't update the display while executing macros
set tabpagemax=15               " only show 15 tabs

" statusline related matters
set laststatus=2                " tell VIM to always put a status line in
set cmdheight=2                 " use a status bar that is 2 rows high
if !exists('g:loaded_airline')
  set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \
  set statusline+=\ \ \ [%{&ff}/%Y]
  set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\
  set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L
endif
if has('cmdline_info')
  set ruler                     " Show the ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
  set showcmd                   " show (partial) command in the last line of the screen this also shows visual selection info
endif

" wildcard related matters for filename completion
set wildmenu                        " make tab completion for files/buffers act like bash
set wildmode=list:longest,full      " show a list when pressing tab, then longest common part and then full name.
set wildignore+=*.o,*.obj,*~        " stuff to ignore when tab completing
set wildignore+=*.swp,*.bak         " ...
set wildignore+=*.pyc,*.class,*.so  " ...
set wildignore+=*/tmp/*,*.so,*.zip  " ...
set wildignore+=*vim/backups*       " ...
set wildignore+=*sass-cache*        " ...
set wildignore+=*DS_Store*          " ...
set wildignore+=vendor/rails/**     " ...
set wildignore+=vendor/cache/**     " ...
set wildignore+=*.gem               " ...
set wildignore+=log/**              " ...
set wildignore+=tmp/**              " ...
set wildignore+=*.png,*.jpg,*.gif   " ... phew!!

" completion related matters
set completeopt+=menuone,longest  " don't select first item, follow typing in autocomplete
set completeopt-=preview          " disable doc preview in omnicomplete
set pumheight=6                   " Keep a small completion window

" terminal related matters
set title                         " change the terminal's title
set ttyfast                       " always use a fast terminal
set visualbell                    " don't beep
set noerrorbells                  " don't beep
set t_vb=                         " remove visual bell character

" other really (ir)relevant matters
set autoread                      " watch for file changes
" set autowrite                     " auto write file when moving away from it.
set autochdir                     " automatically change the working directory
set hidden                        " hide buffers instead of closing them this means that the current buffer can be put to background without being written; and that marks and undo history are preserved.
set switchbuf=useopen,split       " reveal already opened files from the quickfix window instead of opening new buffers, otherwise split current window to make room for new one.
set history=1000                  " remember more commands and search history
set viminfo='50,%,<200,s100       " save marks for 50 files, save buffers, not more than 200 lines of register and 100 KiB of data
set nofsync                       " improves performance -- let OS decide when to flush disk

" undo/redo related matters
if has('persistent_undo')
    set undofile                  " So is persistent undo ...
    set undolevels=1000           " Maximum number of changes that can be undone
    set undoreload=10000          " Maximum number lines to save for undo on a buffer reload
    set undodir=~/.vim/.undo,~/tmp,/tmp
endif

" shell related matters
if !g:is_windows                  " use bash with login shell and
  set shell=bash\ -i              " interactive mode overwrite in vimrc.after
endif                             " if needed

" backup related matters
set nobackup                      " do not keep backup files, it's 70's style cluttering
set nowritebackup                 " do not make a write backup
set noswapfile                    " do not write annoying intermediate swap files
set directory=~/.vim/.tmp,/tmp    " store swap files in one of these directories (in case swapfile is ever turned on)
" }}}
" Behaviour: GUI {{{
set background=dark             " make vim to use dark background on terminal

" use colorscheme if we have gui or 256 color support
if &t_Co >= 256 || has("gui_running")
  colorscheme solarized
  " let g:solarized_termcolors=256
  " let g:solarized_termtrans=1
  " let g:solarized_contrast="high"
  " let g:solarized_visibility="high"
endif

" Exta settings for the graphical version
if has("gui_running")
  call SourceIfReadable("~/.gvimrc")
endif
" }}}
" Behaviour: Editor {{{
set ttimeout                    " timeout on key codes
set ttimeoutlen=50              " timeout duration should be small
set nrformats-=octal            " do not treat octal as numbers
set nojoinspaces                " prevents two spaces after punctuation on join
set virtualedit=onemore         " allow cursor 1 char beyond end of current line
set fileformats="unix,dos,mac"  " EOL that will be tried when reading buffers
set formatoptions+=1ron         " see :h formatoptions-values for details
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set pastetoggle=<F2>            " when in insert mode, press <F2> to go to paste mode
set showmatch                   " set show matching parenthesis
set matchtime=2                 " show matching parenthesis for 0.2 seconds
" set complete=.,w,b,u,U,t,i,d    " do lots of scanning on tab completion,  FIXME?
" set cinoptions=b1,g0,N-s,t0,(0,W4 " see :h cinoptions-values for details
set iskeyword+=_,$,@,%,#        " none of these should be word dividers, so make them not be

" tab related matters
set tabstop=4                   " a tab is two spaces
set softtabstop=4               " when <BS>, pretend tab is removed, even if spaces
set expandtab                   " expand tabs, by default

" indentation related matters
set autoindent                  " always set autoindenting on
set shiftwidth=4                " number of spaces to use for autoindenting
set copyindent                  " copy the previous indentation on autoindenting
set shiftround                  " use multiple of 'sw' when indenting with '<' and '>'
set smarttab                    " insert tabs on start of line acc to 'sw' not 'ts'

" spelling related matters
if has('syntax')
  setlocal spell spelllang=en_us
  set nospell                   " no spell check, by default
endif

" clipboard related matters
if has ('x') && has('unnamedplus')
  set clipboard=unnamedplus,unnamed      " On Linux use + register for copy-paste
else
  set clipboard+=unnamed                 " On mac and Windows, use * register for copy-paste
endif
" }}}
" Behaviour: Folding {{{
set foldenable                  " enable folding
set foldcolumn=2                " add a fold column to the left of line-numbers
set foldlevel=0                 " folds with a higher level will be closed
set foldlevelstart=0            " start out with everything closed
set foldmethod=indent           " create folds based on indentation
set foldnestmax=3               " deepest fold is 3 levels
set foldtext=MyFoldText()       " function for text that appears over folds
" which commands trigger auto-unfold
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
" http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod |
                    \ setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') |
                             \ let &l:foldmethod=w:last_fdm |
                             \ unlet w:last_fdm | endif
" }}}
" Behaviour: Search and Syntax Highlighting {{{
set incsearch                   " show search matches as you type
set ignorecase                  " by default, the search should ignore case
set smartcase                   " ignore case lowercase, else case-sensitive
set gdefault                    " search/replace globally (on a line) by default
set magic                       " use magic mode when searching/replacing

if has("gui_running") || &t_Co > 2
  syntax on                     " syntax highlight on, when terminal has colors
  set hlsearch                  " enable highlighting of search items
endif
" }}}
" Behaviour: CTags {{{
set tags=./tags;/                  " find and load tags file up until root
set tags+=~/.ctags/*/*/tags;       " load all tags files in the ~/.ctags directory: http://bit.ly/19d59YJ
" }}}

set exrc                                                " enable per-directory .vimrc files
set secure                                              " disable unsafe commands in them

" other files that need to be sourced
call SourceIfReadable('~/.vim/lib/mappings.vim')        " shortcut key mappings
call SourceIfReadable('~/.vim/lib/autocommands.vim')    " auto-commands for various filetypes, settings, etc.
call SourceIfReadable('~/.vim/lib/functions.vim')       " functions used throughout this vimrc configuration
call SourceIfReadable('~/.vim/lib/autocorrect.vim')     " auto-corrections for spellings
call SourceIfReadable('~/.vim/lib/tipsandtricks.vim')   " quick tips and tricks go in this file, before classification
call SourceIfReadable('~/.vimrc.after')                 " useful to override vimrc configuration
