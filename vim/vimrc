" Credits: """""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"            _ _    _                       _        _
"           (_) |  | |                     | |      ( )
"      _ __  _| | _| |__   __ _ _   _ _ __ | |_ __ _|/ ___
"     | '_ \| | |/ / '_ \ / _` | | | | '_ \| __/ _` | / __|
"     | | | | |   <| | | | (_| | |_| | |_) | || (_| | \__ \
"     |_| |_|_|_|\_\_| |_|\__, |\__,_| .__/ \__\__,_| |___/
"                          __/ |     | |
"                         |___/      |_|
"                            _       _    __ _ _
"                           | |     | |  / _(_) |
"                         __| | ___ | |_| |_ _| | ___  ___
"                        / _` |/ _ \| __|  _| | |/ _ \/ __|
"                       | (_| | (_) | |_| | | | |  __/\__ \
"                        \__,_|\___/ \__|_| |_|_|\___||___/
"
"
"   This is the personal .vimrc file of Nikhil Gupta.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   Hello, I am Nikhil Gupta, and
"   You can find me at http://nikhgupta.com
"
"   You can find an online version of this vimrc file at:
"   https://github.com/nikhgupta/dotfiles/blob/master/vim/vimrc
" }}}
" Compatibility: """""""""""""""""""""""""""""""""""""""""""""" {{{
"
"   I am on a MacOSX, and the configuration works wonderfully on it.
"
"   I have not, yet, checked this configuration for Linux environment, but
"   I am quite sure that the configuration should work nicely with it :)
"
"   Since, I never use Windows, this configuration might not be (and, I know for
"   a fact, that it won't be) compatible with it :(
"   I have, deliberately, removed any configuration that attempted to have such
"   a compatibility from this file, at around December, 2013.
"
" }}}
" Updated On: """"""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"   Here, you will find date ranges where I devoted much of my time configuring
"   this vim configuration. Note that, this section includes only major updates
"   starting from December, 2013.
"
"   :: 27/12/13 - 30/12/13  # 4 days
"
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NORC: """"""""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   To start vim without using this .vimrc file, use:
"     vim -u NORC
"
"   To start vim without loading any .vimrc or plugins, use:
"     vim -u NONE
" }}}
" Vim Tips: """"""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - Press `F1` key on any keyword to get quick help!
"   - Use `:X` to set encryption on any file
"   - Use `setl key=` to disable this encryption
"   - Use `gf` to open file under cursor using default file handler
"   - Use `gx` to open the current url using default url handler
"   - Use `g:netrw_browserx_viewer` to set the binary for above command
"   - Use `''` to jump to location of the last jump
"   - Use `'.` to jump to location of your last edit
" }}}
" Sections: """"""""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"     => Variable declaration for variables used in this file
"     => Custom functions which have been used in this file
"     => Load ~/.vimrc.before and ~/.vimrc.local, if they are readable
"     => Apply some configuration for cross-platform compatibility
"     => Vundle and other plugins and their settings and mappings
"     => General behaviour of Vim
"     => GUI behaviour of Vim
"     => Editing behaviour of Vim
"     => Define how folding will be done in the Editor
"     => Define Syntax highlighting and Search behaviour
"     => CTags configuration
"     => Settings for variour inbuilt plugins
"     => Security related configuration
"     => Shortcut mappings
"        => Common abbreviations / misspellings
"     => Auto-Command behaviour
"        => Filetype specific handling
"     => Load ~/.vimrc.after
" }}}
" TODOs: """""""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - shortcut to quickly play macro in register `q`
"   - shortcut to quickly play a given macro on selected lines
"   - shortcut to open url/file in the current line in browser/vim, resp.
"   - ensure that correct ruby version is detected by syntastic
"   - ensure that 'echo &tags' includes all valid ruby gem paths
"   - map all toggle commands to use a command leader
"   - map caps lock to esc key
"   - create a todo list mode and a note mode in vim
"   - projects in vim?
"   - emails in vim?
"   - add mappings for conque shell
"   - syntastic and tagbar have a bug that suspend vim on startup
"
"   - convert common functionality into a plugin
"   - display whether working in terminal or gui mode inside the airline statusbar
"   - revisit: http://learnvimscriptthehardway.stevelosh.com/
"   - create sections, vis-a-vis http://git.io/aDaz_g
"   - revisit exuberant tags http://bit.ly/17rL4P8
"   - implement visual search http://bit.ly/17rLkxv
"   - line numbers must use 4 columns
"   - implement Ranger file browser
"   - display syntax highlighting in foldtext
"   - create a command to run arbitrary shell and ruby source and replace content-in-place
"   - auto-open fold when a search match is found or when it is jumped upon
"   - integrate a vim-enabled notes manager
"   - integrate a vim-enabled scripts manager
"   - add spelling related mappings to vim (as well as some other togglers)
"   - read and implement vim configuration from:
"     - https://github.com/skwp/dotfiles
"     - https://github.com/gf3/dotfiles
" }}}
" Completed: """""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - recreate folds when reloading a file?
"     : use foldlevel and foldlevelstart settings for this purpose
"   - make airline work
"   - use patched fonts for AirLine
"   - search for a suitable autocompletion bundle
"   - verify and reinstall bundles
"   - read and implement vim configuration from:
"     - https://github.com/zenom/dotfiles
"     - https://github.com/jferris/config_files
"     - https://github.com/ryanb/dotfiles
"     - https://github.com/holman/dotfiles
"     - https://github.com/thoughtbot/dotfiles
"     - https://github.com/rtomayko/dotfiles
"     - https://github.com/garybernhardt/dotfiles
"     - https://github.com/amix/vimrc
"     - https://github.com/vgod/vimrc
"     - https://github.com/humiaozuzu/dot-vimrc
"     - https://github.com/sontek/dotfiles
"     - https://github.com/mathiasbynens/dotfiles
"     - https://github.com/nvie/vimrc (originally, based on it)
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible             " No to the total compatibility with the ancient vi
" Behaviour: Leader Key Configuration {{{
  let mapleader      = ","                                      " change mapleader key from / to ,
  let g:mapleader    = ","                                      " some plugins may require this variable to be set
  let maplocalleader = "\\"                                     " used inside filetype settings
" }}}
" Behaviour: Custom Variables {{{
  " os specific variables
  let g:is_mac     = has('mac') || has('macunix') || has('gui_macvim')
  let g:is_macvim  = has('gui_macvim')
  let g:is_linux   = has('linux')
  let g:is_windows = has('win16') || has('win32') || has('win64')

  " other relevant variables
  let g:is_gui     = has('gui_running')
  let g:is_posix   = 1 " enable better bash syntax highlighting
" }}}
" Behaviour: Custom Functions {{{
  " Source a file, only if we can read it :) {{{
  function! SourceIfReadable(file)
    let l:file = expand(a:file)
    if filereadable(l:file) | execute "source" l:file | endif
  endfunction " }}}
  " Load a default statusline, if no relevant plugin exists {{{
  function! LoadDefaultStatusLine()
    if !exists('g:loaded_airline')
      set statusline+=\ \ \ [%{&ff}/%Y]
      set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L
    endif
  endfunction
  " }}}
  " Text to display on folded lines {{{
  function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
    return line . ' ' . repeat("-",fillcharcount) . ' ' . foldedlinecount . ' '
  endfunction " }}}
  " View changes in the current buffer {{{
  function! DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
  endfunction " }}}
  " Pulsate the line containing the cursor {{{
  function! PulseCursorLine()
    let current_window = winnr()

    windo set nocursorline
    execute current_window . 'wincmd w'

    setlocal cursorline

    redir => old_hi
    silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    hi CursorLine guibg=#3a3a3a
    redraw
    sleep 20m

    hi CursorLine guibg=#4a4a4a
    redraw
    sleep 30m

    hi CursorLine guibg=#3a3a3a
    redraw
    sleep 30m

    hi CursorLine guibg=#2a2a2a
    redraw
    sleep 20m

    execute 'hi ' . old_hi

    windo set cursorline
    execute current_window . 'wincmd w'
  endfunction
  " }}}
  " Append a modeline in the current buffer {{{
  function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
          \ &tabstop, &shiftwidth, &textwidth)
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
  endfunction " }}}
  " Quickly toggle in/out the QuickFix window {{{
  function! QFixToggle(forced)
    if exists("g:qfix_win") && a:forced == 0
      cclose
      unlet g:qfix_win
    else
      copen 10
      let g:qfix_win = bufnr("$")
    endif
  endfunction " }}}
  " Search for a pattern across multiple files {{{
  function! SearchAcrossMultipleFiles(word)
    if strlen(a:word)
      let l:pattern = a:word
      echo "Searching for: " . l:pattern
    else
      let l:pattern = input("Give me a pattern: ")
    end
    let l:infiles = input("Give me patterns for files to search inside: ")
    execute ":lvim /" . l:pattern . "/gj" . l:infiles
    :lwindow
  endfunction
  " }}}
  " Clean up Startuptime log generated by Vim {{{
    function! CleanStartupLog()
      let l:fname = expand("%")
      :silent Sscratch
      :normal ggVGd
      execute ":silent read ". fnameescape(l:fname)
      :silent %s@\v^\d+\.\d+\s+@@
      :silent %s@\v^\d+\.\d+\s+@@
      :silent g@\v^0\d+\.\d+:@d
      :silent g!@\v^\d+\.\d+:@d
    endfunction
  " }}}
  " " Create session with a prompt {{{
  " function! SaveSessionWithPrompt()
  "   " guess name from current session, if any
  "   let name = xolox#session#find_current_session()
  "   let is_tab_scoped = xolox#session#is_tab_scoped()

  "   " ask user for a session name, otherwise
  "   if empty(name)
  "     let default_name = ''
  "     if g:session_default_name
  "       let default_name = g:session_default_name
  "     endif

  "     call inputsave()
  "     let name = input('save session? by what name? ', default_name)
  "     call inputrestore()
  "   endif

  "   " use the default session name, otherwise
  "   if empty(name) && g:session_default_name
  "     let name = g:session_default_name
  "   endif

  "   " save the given session
  "   if xolox#session#is_tab_scoped()
  "     call xolox#session#save_tab_cmd(name, '!', 'SaveTabSession')
  "   else
  "     call xolox#session#save_cmd(name, '!', 'SaveSession')
  "   endif

  " endfunction
  " " }}}
  " " Set background of the GUI based on the time of the day {{{
  " function! LoadBackgroundBasedOnTime()
  "   let curr_hour    = strftime("%H")
  "   let g:background = curr_hour > 7 && curr_hour < 19 ? 'light' : 'dark'

  "   execute 'set background=' . g:background
  "   echo 'Background set to dark since current time is: ' . strftime('%H:%M')
  " endfunction
  " " 
  " " }}}
  " " Load default colorscheme based on gui/terminal and time of day {{{
  " function! LoadDefaultVimColors()
  "   call LoadBackgroundBasedOnTime()
  "   " only load solarized if we are on gui and working in daytime
  "   if g:is_gui && g:background == 'light'
  "     execute 'colorscheme solarized'
  "     let g:airline_theme = 'solarized'
  "   else
  "     execute 'colorscheme base16-eighties'
  "     let g:airline_theme = 'base16'
  "   endif
  "   call airline#load_theme()
  "   redraw
  " endfunction
  " " }}}
  " " Load a random colorscheme {{{
  " function! LoadRandomColorScheme()
  "   call LoadBackgroundBasedOnTime()
  "   let l:colorschemes = split(globpath(&rtp,"**/colors/*.vim"),"\n")
  "   let l:colorscheme  = l:colorschemes[localtime() % len(l:colorschemes)]
  "   let l:colorscheme  = fnamemodify(expand(l:colorscheme), ":t:r")
  "   execute 'colorscheme ' . l:colorscheme
  "   redraw

  "   echo "Loaded colorscheme (" . g:background . "): " . l:colorscheme
  " endfunction
  " " }}}
  " " Load focus theme when asked for specifically {{{
  " function! LoadColorSchemeForFocusMode()
  "   call LoadBackgroundBasedOnTime()
  "   execute 'colorscheme focus-' . g:background
  " endfunction
  " " }}}
  " " Load theme designed specifically for text mode {{{
  " function! LoadColorSchemeForTextMode()
  "   call LoadBackgroundBasedOnTime()
  "   execute 'colorscheme awesome-text-' . g:background
  " endfunction
  " " }}}
  " " Reload last session and restore vim colors {{{
  " function! ReloadSessionAndRestoreColors()
  "   if function_exists("xolox#session#auto_load")
  "     call xolox#session#auto_load()
  "   endif
  "   call LoadDefaultVimColors()
  " endfunction
  " " }}}
  " Return the first argument if working in daylight, otherwise second {{{
  function! DayOrNight(day, night)
    let curr_hour = strftime("%H")
    return curr_hour > 7 && curr_hour < 19 ? a:day : a:night
  endfunction
  " }}}
  " Quick distraction-free theme setup for Thematic {{{
  function! DistractionFree(theme)
    let l:theme = {
    \     'ruler': 1,
    \     'laststatus': 0,
    \     'sign-column-color-fix': 1,
    \     'fold-column-color-mute': 1,
    \     'number-column-color-mute': 1,
    \     'fullscreen-background-color-fix': 1,
    \ }
    call extend(l:theme, a:theme)
    return l:theme
  endfunction
  " }}}
" }}}
" Behaviour: Pre/Local Configuration {{{
  call SourceIfReadable('~/.vimrc.before')              " source ~/.vimrc.before, if exists
  call SourceIfReadable('~/.vimrc.local')               " source ~/.vimrc.before, if exists
" }}}
" Behaviour: Vundle and Plugins {{{

  " Auto-install Vundle, if not found
  let iCanHazVundle = 1
  if !filereadable(expand("~/.vim/bundle/vundle/README.md"))
    echo "Installing Vundle..\n"
    :silent !mkdir -p ~/.vim/bundle
    :silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
    let iCanHazVundle=0
  endif

  " turn filetype detection off (MacOSX Fix: http://bit.ly/17MENzJ)
  filetype on
  filetype off

  " initialize Vundle
  set rtp+=~/.vim/bundle/vundle
  call vundle#rc()

  " let Vundle manage Vundle:
  Bundle 'gmarik/vundle'

  " read my bundles
  call SourceIfReadable("~/.vim/bundles.vim")

  " install Bundles, if we just installed Vundle
  if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    :BundleInstall
  endif

  " require matchit
  runtime macros/matchit.vim

  " required by Vundle
  filetype plugin indent on       " enable detection, plugins and indenting in one step
" }}}
" Behaviour: General {{{
  " set encoding
  scriptencoding utf-8
  set encoding=utf-8 nobomb " BOM often causes trouble
  set termencoding=utf-8
  set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

  " security related matters
  set nomodeline                  " disable mode lines (security measure)

  " mouse related matters
  if has('mouse')
    set mouse=a                   " enable using mouse if terminal supports it
    set mousehide
  endif

  " session related matters
  if has('mksession')
    set sessionoptions+=resize
  endif

  " wrapping related matters
  set nowrap                      " don't wrap lines
  set linebreak                   " break long lines at words, when wrap is on
  set textwidth=80                " wrap after this many characters in a line
  set colorcolumn=+1              " highlight end of textwidth
  set whichwrap=b,s,h,l,<,>,[,]   " allow <BS> & cursor keys to move to prev/next line
  set showbreak=↪                 " string to put at the starting of wrapped lines
  set scrolloff=7                 " keep lines off edges of the screen when scrolling
  " set scrolljump=5                " lines to scroll when cursor leaves screen
  set sidescroll=1                " brings characters in view when side scrolling
  set sidescrolloff=15            " start side-scrolling when n chars are left

  " look related matters
  set number                      " always show line numbers
  set numberwidth=4               " number of culumns for line numbers
  set showmode                    " always show what mode we're currently editing in
  set report=0                    " always report number of lines changed
  set cursorline                  " highlight the current line, for quick orientation
  set nocursorcolumn              " highlight the current column, for quick orientation
  set shortmess+=filmnrxoOtT      " abbrev. vim-messages (avoids 'hit enter', also)
  set shortmess+=I                " do not display intro message on Vim startup
  set nolist                      " do not show invisible characters
                                  " enabled later via autocmd on certain filetypes
  set listchars=tab:▸\ ,trail:·,extends:▶,precedes:◀,nbsp:·

  " windows related matters
  set splitbelow                  " puts new split windows to the bottom of the current
  set splitright                  " puts new vsplit windows to the right of the current
  set lazyredraw                  " even update the display while executing macros
  set tabpagemax=15               " only show 15 tabs
  set equalalways                 " split windows are always of eqal size

  " statusline related matters
  set cmdheight=2                 " use a status bar that is 2 rows high
  set laststatus=2                " tell VIM to always put a status line in
  if has('cmdline_info')
    set ruler                     " Show the ruler
    set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
    set showcmd                   " show (partial) command in the last line of the screen this also shows visual selection info
  endif
  call LoadDefaultStatusLine()

  " wildcard related matters for filename completion
  set wildmenu                        " make tab completion for files/buffers act like bash
  set wildmode=list:longest,full      " show a list when pressing tab, then longest common part and then full name.
  set wildignore+=*/vendor/*          " stuff to ignore when tab completing ...
  set wildignore+=*/.hg/*,*/.svn/*
  set wildignore+=*vim/backups*       " ...
  set wildignore+=*/smarty/*          " ...
  set wildignore+=*/node_modules/*    " ...
  set wildignore+=*/.sass-cache/*     " ...
  set wildignore+=*/tmp/*,tmp/**      " ...
  set wildignore+=*/out/**,log/**     " ... phew!!
  " file suffixes that can be safely ignored for file name completion
  set suffixes+=.swo,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.DS_Store,.class,.so
  set suffixes+=.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll,.zip
  set suffixes+=.gem,.pdf,.avi,.mkv,.png,.jpg,.gif,.psd

  " completion related matters
  set completeopt+=menuone,longest  " don't select first item, follow typing in autocomplete
  set completeopt-=preview          " disable doc preview in omnicomplete
  set complete=.,w,b,t              " do lots of scanning on tab completion,  FIXME?
  set pumheight=6                   " Keep a small completion window

  " terminal related matters
  set title                         " change the terminal's title
  set ttyfast                       " always use a fast terminal
  set visualbell                    " don't beep
  set noerrorbells                  " don't beep
  set t_vb=                         " remove visual bell character
  " Prevent Vim from clobbering the scrollback buffer. See
  " http://www.shallowsky.com/linux/noaltscreen.html
  set t_ti= t_te=

  " other really (ir)relevant matters
  set autoread                      " watch for file changes
  " set autowrite                     " auto write file when moving away from it.
  set autochdir                     " automatically change the working directory
  set hidden                        " hide buffers instead of closing them this means that the current buffer can be put to background without being written; and that marks and undo history are preserved.
  set switchbuf=useopen,split       " reveal already opened files from the quickfix window instead of opening new buffers, otherwise split current window to make room for new one.
  set history=1000                  " remember more commands and search history
  set viminfo='500,:100,@100,/20,f1,%,<200    " see :h viminfo to understand what this means :)
  set nofsync                       " improves performance -- let OS decide when to flush disk

  " undo/redo related matters
  if has('persistent_undo')
    set undofile                  " So is persistent undo ...
    set undolevels=1000           " Maximum number of changes that can be undone
    set undoreload=10000          " Maximum number lines to save for undo on a buffer reload
    set undodir=~/.vim/.tmp,/tmp
  endif

  " shell related matters
  if !g:is_windows && executable('zsh')
    set shell=zsh\ -l               " use a ZSH login shell
  endif

  " backup related matters
  set nobackup                      " do not keep backup files, it's 70's style cluttering
  set nowritebackup                 " do not make a write backup
  set noswapfile                    " do not write annoying intermediate swap files
  set directory=~/.vim/.tmp,/tmp    " store swap files in one of these directories (in case swapfile is ever turned on)
" }}}
" Behaviour: GUI and Appearance {{{

  " set appropriate terminal colors
  if &t_Co > 2 && &t_Co < 16
    set t_Co =16
  elseif &t_Co > 16
    set t_Co =256
  endif

  let g:thematic#defaults = {
  \ 'fullscreen'   : 1,
  \ 'background'   : DayOrNight("light", "dark"),
  \ 'airline-theme': DayOrNight("solarized", "base16"),
  \ }

  let g:thematic#themes = {
  \ 'default-dark' : { 'colorscheme'  : 'base16-eighties',
  \                    'background'   : 'dark',
  \                    'airline-theme': 'base16' },
  \ 'default-light': { 'colorscheme'  : 'solarized',
  \                    'background'   : 'light',
  \                    'airline-theme': 'solarized' },
  \ 'default': { 'colorscheme' : DayOrNight("solarized", "base16-eighties") },
  \
  \ 'focus-dark' : DistractionFree({'colorscheme': 'focus-dark' }),
  \ 'focus-light': DistractionFree({'colorscheme': 'focus-light'}),
  \ 'focus': DistractionFree({
  \    'colorscheme': DayOrNight('focus-light', 'focus-dark'),
  \ }),
  \
  \ 'awesome-text-dark' : DistractionFree({
  \    'colorscheme': 'awesome-text-dark',
  \    'typeface'   : 'Source Code Pro Light',
  \    'font-size'  : '20',
  \    'linespace'  : '8',
  \ }),
  \ 'awesome-text-light': DistractionFree({
  \    'colorscheme': 'awesome-text-light',
  \    'typeface'   : 'Source Code Pro Light',
  \    'font-size'  : '20',
  \    'linespace'  : '8',
  \ }),
  \ 'awesome-text': DistractionFree({
  \    'colorscheme': DayOrNight('awesome-text-light', 'awesome-text-dark'),
  \    'typeface'   : 'Source Code Pro Light',
  \    'font-size'  : '20',
  \    'linespace'  : '8',
  \ }),
  \ }

  " set vim's default colorscheme, airline theme and background
  " depending on the time of day and whether gui is running or not
  let g:thematic#theme_name = g:is_gui ? "default" : "default-dark"

  " Vertical bar in insert mode (for iTerm users only)
  let &t_SI = "\<Esc>]50;CursorShape=1\x7"
  let &t_EI = "\<Esc>]50;CursorShape=0\x7"

  " source our ~/.gvimrc, if gui is running
  if g:is_gui | call SourceIfReadable('~/.gvimrc') | endif

  if g:is_gui
    " Use a nice font on the specific OS
    if g:is_mac
      set guifont=Monaco\ For\ Powerline:h13
    elseif g:is_windows
        set guifont=Bitstream\ Vera\ Sans\ Mono:h11
    elseif g:is_linux
        set guifont=Monospace\ 11
    endif

    " adjust the GUI accordingly
    set guioptions-=T   " Remove the toolbar
    set guioptions-=m   " Remove the menu
    set guioptions+=c   " Use console dialogs

    " remove scrollbars
    set guioptions-=r
    set guioptions-=R
    set guioptions-=l
    set guioptions-=L

    " disable cursor blinking and set it to be a block
    " set guicursor+=a:blinkon0
    " cursor does not blink for nvc modes
    let &guicursor = substitute(&guicursor, 'n-v-c:', '&blinkon0-', '')
    set guicursor+=a:block-Cursor

    " Custom tabs label
    set guitablabel=%t\ %m

    " Maximize gvim window
    set lines=999 columns=999
  endif

" }}}
" Behaviour: Editor {{{
  set ttimeout                    " timeout on key codes
  set ttimeoutlen=50              " timeout duration should be small
  set nrformats-=octal            " do not treat octal as numbers
  set nrformats+=alpha            " but, allow inc/dec on alphabetical letters
  set nojoinspaces                " prevents two spaces after punctuation on join
  set virtualedit=onemore         " allow cursor 1 char beyond end of current line
  set fileformats="unix,dos,mac"  " EOL that will be tried when reading buffers
  set formatoptions+=1ron         " see :h formatoptions-values for details
  set backspace=indent,eol,start  " allow backspacing over everything in insert mode
  set pastetoggle=<F2>            " when in insert mode, press <F2> to go to paste mode
  set showmatch                   " set show matching parenthesis
  set matchtime=2                 " show matching parenthesis for 0.2 seconds
  " set cinoptions=b1,g0,N-s,t0,(0,W4 " see :h cinoptions-values for details
  set iskeyword+=_,$,@,%,#        " none of these should be word dividers, so make them not be

  " tab related matters
  set tabstop=4                   " a tab is two spaces
  set softtabstop=4               " when <BS>, pretend tab is removed, even if spaces
  set expandtab                   " expand tabs, by default

  " indentation related matters
  set autoindent                  " always set autoindenting on
  set shiftwidth=4                " number of spaces to use for autoindenting
  set copyindent                  " copy the previous indentation on autoindenting
  set shiftround                  " use multiple of 'sw' when indenting with '<' and '>'
  set smarttab                    " insert tabs on start of line acc to 'sw' not 'ts'

  " spelling related matters
  if has('syntax')
    setlocal spell spelllang=en_us
    set nospell                   " no spell check, by default
  endif

  " clipboard related matters
  if has ('x') && has('unnamedplus')
    set clipboard=unnamedplus,unnamed      " On Linux use + register for copy-paste
  else
    set clipboard+=unnamed                 " On mac and Windows, use * register for copy-paste
  endif
" }}}
" Behaviour: Folding {{{
  set nofoldenable                " do not enable folding, by default
  set foldcolumn=2                " add a fold column to the left of line-numbers
  set foldlevel=0                 " folds with a higher level will be closed
  set foldlevelstart=0            " start out with everything closed
  set foldmethod=indent           " create folds based on indentation
  set foldnestmax=7               " deepest fold is 3 levels
  set foldminlines=1              " do not fold single lines, fold everything else
  set foldtext=MyFoldText()       " function for text that appears over folds
  " which commands trigger auto-unfold
  set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

  " Don't screw up folds when inserting text that might affect them, until
  " leaving insert mode. Foldmethod is local to the window. Protect against
  " screwing up folding when switching between windows.
  " http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
  autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod |
                      \ setlocal foldmethod=manual | endif
  autocmd InsertLeave,WinLeave * if exists('w:last_fdm') |
                              \ let &l:foldmethod=w:last_fdm |
                              \ unlet w:last_fdm | endif
" }}}
" Behaviour: Search and Syntax Highlighting {{{
  set incsearch                   " show search matches as you type
  set ignorecase                  " by default, the search should ignore case
  set smartcase                   " ignore case lowercase, else case-sensitive
  set gdefault                    " search/replace globally (on a line) by default
  set synmaxcol=800               " don't try to highlight lines longer than 800 characters.
  set magic                       " use magic mode when searching/replacing
  set wrapscan                    " search continues after the end of file

  if g:is_gui || &t_Co > 2
    syntax on                     " syntax highlight on, when terminal has colors
    set hlsearch                  " enable highlighting of search items
  endif

  if has("diff")
    set diffopt+=iwhite           " Ignore whitespace changes (focus on code changes)
  endif
" }}}
" Behaviour: CTags {{{
  set tags+=./tags,tags;/         " find and load tags file up until root
" }}}
" Behaviour: Inbuilt Plugin Settings {{{
  " Stop fucking netrw
  let g:netrw_silent = 1
  let g:netrw_quiet  = 1
  " let g:loaded_netrw = 1          " prevents loading of netrw, but messes 'gx'
  " let g:loaded_netrwPlugin = 1    " ^ ..same.. and therefore, commented
" }}}
" Behaviour: Security {{{
  set exrc                                                 " enable per-directory .vimrc files
  set secure                                               " disable unsafe commands in them

  " https://coderwall.com/p/hypjbg
  if exists("&cryptmethod") | set cryptmethod=blowfish | endif
" }}}
" Behaviour: Mappings {{{
  " ease-of-use related mappings {{{
    " Since I never use the ; key anyway, this is a real optimization for almost
    " all Vim commands, since we don't have to press that annoying Shift key that
    " slows the commands down
    nnoremap ; :
    " nnoremap : ;    " not recommended

    " Swap implementations of ` and ' jump to markers
    nnoremap ' `
    nnoremap ` '

    " Swap implementations of 0 and ^
    nnoremap 0 ^
    nnoremap ^ 0

    " bring the cursor back when repeat command has been used
    nmap . .`[
  " }}}
  " mappings created to avoid any accidental hits {{{
    " avoid accidental hits of <F1> while aiming for <Esc>
    map! <F1> <Esc>

    " avoid accidental hits of Shift key
    cmap Tabe tabe
    if has("user_commands")
      command! -bang -nargs=* -complete=file E e<bang> <args>
      command! -bang -nargs=* -complete=file W w<bang> <args>
      command! -bang -nargs=* -complete=file Wq wq<bang> <args>
      command! -bang -nargs=* -complete=file WQ wq<bang> <args>
      command! -bang Wa wa<bang>
      command! -bang WA wa<bang>
      command! -bang Q q<bang>
      command! -bang QA qa<bang>
      command! -bang Qa qa<bang>
    endif
  " }}}
  " mappings that perform everyday tasks quicker {{{
    " quickly close the current window
    noremap <leader>q :q<CR>

    " quick save a file
    nnoremap <leader>w :w!<CR>

    " sudo to write
    cmap w!! w !sudo tee % >/dev/null

    " quickly yanking a complete line
    nmap Y yy

    " Switch between the last two files
    nnoremap <leader><leader> <c-^>
  " }}}
  " movement related mappings {{{

    " use the damn hjkl keys
    " nnoremap <Left> :echoe "Use h"<CR>
    " nnoremap <Right> :echoe "Use l"<CR>
    " nnoremap <Up> :echoe "Use k"<CR>
    " nnoremap <Down> :echoe "Use j"<CR>

    " use cursor keys for switching buffers, tags and tabs
    " TODO: also, allow for movement on tabs
    " nnoremap <left>  <esc>:silent bp<cr>
    " nnoremap <right> <esc>:silent bn<cr>
    nnoremap <up>    <esc>:silent tn<cr>
    nnoremap <down>  <esc>:silent tp<cr>

    " remap j and k to act as expected when used on long, wrapped, lines
    noremap j gj
    noremap k gk

    " jump to matching pairs easily, with Tab
    nnoremap <Tab> %
    vnoremap <Tab> %

    " toggle RelativeLineNumbers manually using Ctrl+n
    nnoremap <C-n> :set relativenumber!<cr>

  " }}}
  " windows related mappings {{{

    " resize windows automatically
    map <leader>= <C-w>=

    " easy window navigation
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l

    " easy window navigation with maximize
    map <leader><C-h> <C-w>h<C-w><bar>
    map <leader><C-j> <C-w>j<C-w>_
    map <leader><C-k> <C-w>k<C-w>_
    map <leader><C-l> <C-w>l<C-w><bar>

    " speed up scrolling of the viewport slightly
    nnoremap <C-e> 2<C-e>
    nnoremap <C-y> 2<C-y>

    " create a split buffer containing the current file and switch to it
    nnoremap <leader>wh <C-w>s<C-w>k
    nnoremap <leader>wv <C-w>v<C-w>l

    " Split previously opened file ('#') in a split window and switch to it
    nnoremap <leader>ph :execute 'rightbelow split' bufname('#')<cr>
    nnoremap <leader>pv :execute 'leftabove vsplit' bufname('#')<cr>

  " }}}
  " editing/formatting related mappings {{{

    " strip all trailing whitespace from a file and save it
    nnoremap <silent> <leader>W  :%s/\v<C-v><C-m>//e<CR>:retab<CR>:%s/\s\+$//e<CR>:let @/=''<CR>:w<CR>

    " allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " join lines and restore cursor location
    nnoremap J mjJ`j

    " quickly get out of insert mode without your fingers having to leave the
    " home row (either use 'jj' or 'jk')
    inoremap jj <Esc>
    inoremap jk <Esc>

    " toggle highlighting of cursor column - useful for manual indentation
    nnoremap <leader>cr :set cursorcolumn!<CR>

    " view changes in the current buffer as compared to the last saved document
    nnoremap <leader>ds :call DiffWithSaved()<CR>

    " quickly create new buffers with files from current directory
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=expand('%:h').'/'<cr>

    map <leader>er :e **/*
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " use Q for formatting the current paragraph (or visual selection)
    vmap Q gq
    nmap Q gqap

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " auto-indent the entire document, and jump back to current location
    nmap <leader>fef ggVG=''

    " quick alignment of text across the window-width
    nmap <leader>al :left<CR>
    nmap <leader>ar :right<CR>
    nmap <leader>ac :center<CR>

    " insert modeline after last line of the file
    nnoremap <silent> <leader>ml :call AppendModeline()<CR>:echo 'Added Modeline.'<CR>

    " insert current time
    nnoremap <F5> "=strftime("%d-%m-%y %H:%M:%S")<CR>P
    inoremap <F5> <C-R>=strftime("%d-%m-%y %H:%M:%S")<CR>

    " underline the current line with '='
    nmap <silent> <leader>ul YpVr=<CR>

  " }}}
  " " UI related mappings {{{

  "   " Load a random ColorScheme
  "   nmap <silent> <leader>csr :call LoadRandomColorScheme()<CR>
  "   nmap <silent> <leader>csd :call LoadDefaultVimColors()<CR>

  "   " enable theme for focus mode: https://github.com/sindresorhus/focus
  "   nmap <silent> <leader>csf :call LoadColorSchemeForFocusMode()<CR>

  "   " enable theme for text mode
  "   nmap <silent> <leader>cst :call LoadColorSchemeForTextMode()<CR>
  " " }}}
  " file system related mappings {{{

    " change Working Directory to that of the current file
    cmap cd. lcd %:p:h
    cmap cwd lcd %:p:h

    " create the directory containing the file in the buffer
    nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

    " make file executable
    command! -nargs=* Xe !chmod +x <args>
    command! -nargs=0 Xe !chmod +x %

  " }}}
  " search/replace related mappings {{{

    " use 'really' magic mode for search patterns
    " 01-09-13 03:03:06 - using `magic` mode, instead.
    " nnoremap / /\v
    " vnoremap / /\v

    " run Ack fast
    nnoremap <leader>a :Ag -i<Space>

    " clears the search register
    nmap <silent> <leader><cr> :nohlsearch<CR>

    " keep search matches in the middle of the window and pulse the line when moving
    " to them (no need to map to: Nzz hence)
    nnoremap <silent> n n:call PulseCursorLine()<cr>
    nnoremap <silent> N N:call PulseCursorLine()<cr>

    " search: display all lines with keyword under cursor and ask which one to jump to
    nmap <Leader>fs [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

    " replace: pull word under cursor into LHS of a substitute (for quick search and replace)
    nmap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#

    " search: search for a pattern across multiple files
    nmap <leader>fm :call SearchAcrossMultipleFiles("")<cr>
    nmap <leader>fc :call SearchAcrossMultipleFiles("<C-r>=expand("<cword>")<CR>")<cr>

    " center display after searching
    nnoremap n   nzz
    nnoremap N   Nzz
    nnoremap *   *zz
    nnoremap #   #zz
    nnoremap g*  g*zz
    nnoremap g#  g#z
  " }}}
  " clipboard related mappings {{{

    " toggle paste mode on and off
    map <leader>pp :setlocal paste!<cr>

    " yank/paste to the OS clipboard with ,y and ,p
    " (not required, if using 'unnamed' clipboard on OS)
    nmap <leader>y "+y
    nmap <leader>Y "+yy
    nmap <leader>p "+p
    nmap <leader>P "+P

    " use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
    " yanked stack (also, in visual mode)
    nmap <silent> <leader>d "_d
    vmap <silent> <leader>d "_d

    " reselect text that was just pasted with ,v
    nnoremap <leader>v V`]

  " }}}
  " folding related mappings {{{

    " fold/unfold the current-fold using a space
    nnoremap <Space> za
    vnoremap <Space> za

    " code folding for a specific level
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>

    " creating folds for tags in HTML
    nnoremap <leader>ft Vatzf

  " }}}
  " completion related mappings {{{

    " complete filenames in insert mode
    imap <C-f> <C-x><C-f>

    " complete lines from current buffer in insert mode
    imap <C-l> <C-x><C-l>

  " }}}
  " command line mappings {{{

    " bash like keys for the command line
    cnoremap <C-A> <Home>
    cnoremap <C-E> <End>
    cnoremap <C-K> <C-U>
    cnoremap <C-P> <Up>
    cnoremap <C-N> <Down>
  " }}}
  " ctags related mappings {{{
    nnoremap <silent> <leader>j :tnext<cr>zt
    nnoremap <silent> <leader>J :tprev<cr>zt
    nnoremap <silent> <leader>k :pop<cr>zt
    map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
    map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
  " }}}
  " mappings that provide some expected behaviours {{{
    " make p in Visual mode replace the selected text with the yank register
    vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>
  " }}}
  " mappings that provide some special behaviours {{{

    " open/close QuickFix window using <l>f
    command! -bang -nargs=? QFix call QFixToggle(<bang>0)
    nmap <silent> <leader>f :QFix<CR>

    " shortcut to jump to next conflict marker
    nmap <silent> <leader>co /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>
    " nmap <silent> <leader>co /\v^[<\|=>]{7}( .*\|$)<CR>

    " Panic button - rot13s the current buffer
    nnoremap <f9> mzggg?G'z'

    " Md5 COMMAND - Show the MD5 of the current buffer or range
    command! -range Md5 :echo system('echo '.shellescape(join(getline(<line1>, <line2>), '\n')) . '| md5')

    " clean up vim's startuptime logs
    command! CleanStartupLog :call CleanStartupLog()<CR>
  " }}}
  " Vim related mappings {{{

    " edit the vimrc file
    nmap <leader>vi :vs<CR>:e $MYVIMRC<CR>

    " source the current file
    nmap <leader>vs :source %<CR>:set foldenable<CR>:e!<CR>

  " }}}
  " OSX specific mappings {{{
  if g:is_mac

    " indentation related
    omap <D-]> >>
    omap <D-[> <<
    nmap <D-]> >>
    nmap <D-[> <<
    vmap <D-]> >gv
    vmap <D-[> <gv
    imap <D-]> <Esc>>>i
    imap <D-[> <Esc><<i

    " bubble lines up/down
    nmap <D-k> [e
    nmap <D-j> ]e
    vmap <D-k> [egv
    vmap <D-j> ]egv

    " map Command-# to switch tabs
    map  <D-0> 0gt
    imap <D-0> <Esc>0gt
    map  <D-1> 1gt
    imap <D-1> <Esc>1gt
    map  <D-2> 2gt
    imap <D-2> <Esc>2gt
    map  <D-3> 3gt
    imap <D-3> <Esc>3gt
    map  <D-4> 4gt
    imap <D-4> <Esc>4gt
    map  <D-5> 5gt
    imap <D-5> <Esc>5gt
    map  <D-6> 6gt
    imap <D-6> <Esc>6gt
    map  <D-7> 7gt
    imap <D-7> <Esc>7gt
    map  <D-8> 8gt
    imap <D-8> <Esc>8gt
    map  <D-9> 9gt
    imap <D-9> <Esc>9gt
  endif
  " }}}
  " abbreviations: {{{
    call SourceIfReadable('~/.vim/autocorrect.vim')           " auto-corrections for spellings
    iabbr NG@  Nikhil Gupta
    iabbr WD@  Wicked Developers

    iabbr ng@  me@nikhgupta.com
    iabbr mg@  mestoic@gmail.com
    iabbr wd@  nikhil@wickeddevelopers.com

    iabbr ng/  http://nikhgupta.com/
    iabbr wd/  http://wickeddevelopers.com/
    iabbr gh/  http://github.com/
    iabbr ghn/ http://github.com/nikhgupta/

    iabbr nsig --<cr>Nikhil Gupta<cr>me@nikhgupta.com
    iabbr wsig --<cr>Nikhil Gupta<cr>nikhil@wickeddevelopers.com
  " }}}
" }}}
" Behaviour: AutoCommands {{{
  if has("autocmd")
    match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'  " highlight conflict markers

    augroup omni_complete           " declare functions used for omni-completion {{{
      au!
      if exists('+omnifunc')
        " Enable omni completion for filetypes (Ctrl-X Ctrl-O)
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType c set omnifunc=ccomplete#Complete
        autocmd filetype css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType java set omnifunc=javacomplete#Complete

        " use syntax complete if nothing else available
        autocmd Filetype * if &omnifunc == '' | setlocal omnifunc=syntaxcomplete#Complete | endif
      endif
    augroup end
  " }}}
    augroup miscelleneous           " miscelleneous auto-commands {{{
      au!

      " reload last session and colorscheme based on whether gui is running or not
      " autocmd VimEnter * nested silent! call ReloadSessionAndRestoreColors()

      " toggle relative line numbering
      autocmd FocusLost   * :set number
      autocmd FocusGained * :set relativenumber
      autocmd InsertEnter * :set number
      autocmd InsertLeave * :set relativenumber

      " Restore cursor position upon reopening files
      autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$")
                            \ | exe "normal! g`\"" | endif

      " Show invisible characters in all of these files
      autocmd filetype vim,python,ruby,javascript,css,rst setlocal list

      " resize splits when the windows is resized
      au VimResized * :wincmd =
    augroup end " }}}

    " filetype-specific auto-commands
    augroup shell_files             " {{{
      " TODO: let g:is_bash = 1
      au Filetype sh,zsh,bash set ts=4 sts=4 sw=4 expandtab
    " }}}
    augroup git_files               " {{{
      autocmd BufRead,BufNewFile GHI_* set ft=gitcommit
      autocmd FileType gitcommit setlocal spell textwidth=72
    " }}}
    augroup vim_files               " {{{
        au!

        " Reload Vim Configuration automatically (FIXME??) {{{
        " if has("autocmd")
          " augroup AutoReloadVimRC
            " au!
            " " automatically reload vimrc when it's saved
            " au BufWritePost $MYVIMRC so $MYVIMRC
            " " au BufWritePost $MYVIMRC call Pl#Load()
          " augroup END
        " endif
        " }}}
        autocmd filetype vim setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 textwidth=80
        autocmd filetype vim setlocal foldmethod=marker foldmarker={{{,}}} foldlevel=0
        " Bind <F1> to show the keyword under cursor
        autocmd filetype vim noremap <buffer> <F1> <Esc>:help <C-r><C-w><CR>
        autocmd filetype vim noremap! <buffer> <F1> <Esc>:help <C-r><C-w><CR>
    augroup end "}}}
    augroup html_files              " {{{
        au!

        " autocmd BufNewFile,BufRead *.html,*.htm call s:DetectHTMLVariant()
        autocmd filetype html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
        " Auto-closing of HTML/XML tags
        autocmd filetype html,htmldjango,xhtml,haml let b:closetag_html_style=1
        autocmd filetype html,htmldjango,xhtml,haml let b:closetag_default_xml=1
    augroup end " }}}
    augroup python_files            " {{{
      au!
      " autocmd BufNewFile,BufRead *.py call s:DetectPythonVariant()
      autocmd BufNewFile,BufRead *.jinja set syntax=htmljinja
      autocmd BufNewFile,BufRead *.mako set ft=mako

      " PEP8 compliance (set 1 tab = 4 chars explicitly, even if set
      " earlier, as it is important)
      autocmd filetype python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
      autocmd filetype python setlocal textwidth=79
      autocmd filetype python match ErrorMsg '\%>79v.\+'

      " But disable autowrapping as it is super annoying
      autocmd filetype python setlocal formatoptions-=t

      " Folding for Python (uses syntax/python.vim for fold definitions)
      "autocmd filetype python,rst setlocal nofoldenable
      "autocmd filetype python setlocal foldmethod=expr

      " Python runners
      autocmd filetype python map <buffer> <F5> :w<CR>:!python %<CR>
      autocmd filetype python imap <buffer> <F5> <Esc>:w<CR>:!python %<CR>
      autocmd filetype python map <buffer> <S-F5> :w<CR>:!ipython %<CR>
      autocmd filetype python imap <buffer> <S-F5> <Esc>:w<CR>:!ipython %<CR>

      " Run a quick static syntax check every time we save a Python file
      " autocmd BufWritePost *.py call Flake8()
    augroup end " }}}
    augroup ruby_files              " {{{
        au!

        autocmd BufNewFile,BufRead Rakefile,Capfile,Gemfile,Guardfile set ft=ruby syntax=ruby
        autocmd BufRead,BufNewFile Vagrantfile,Thorfile,Do,dorc,Dofile,config.ru set ft=ruby syntax=ruby
        autocmd BufNewFile,BufRead .autotest,.irbrc,.pryrc,.treetop,.tt set ft=ruby syntax=ruby

        autocmd filetype ruby,eruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 textwidth=80
        autocmd filetype ruby,eruby setlocal foldmethod=syntax
    augroup end " }}}
    augroup rst_files               " {{{
      au!

      " Auto-wrap text around 74 chars
      autocmd filetype rst setlocal textwidth=74
      autocmd filetype rst setlocal formatoptions+=nqt
      autocmd filetype rst match ErrorMsg '\%>74v.\+'
    augroup end " }}}
    augroup css_group_files         " {{{
      au!

      autocmd BufNewFile,BufRead *.less setlocal filetype=less
      autocmd BufNewFile,BufRead *.scss setlocal filetype=scss
      autocmd BufNewFile,BufRead *.sass setlocal filetype=sass
      autocmd filetype css,less,sass,scss setlocal foldmethod=marker foldmarker={,}
      autocmd filetype css,less,sass,scss setlocal tabstop=2 shiftwidth=2 softtabstop=2
    augroup end "}}}
    augroup javascript_group_files  " {{{
      au!

      autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript

      autocmd filetype javascript set syntax=javascript

      autocmd filetype coffee,javascript setlocal listchars=trail:·,extends:#,nbsp:·
      autocmd filetype coffee,javascript setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

      autocmd filetype coffee setlocal foldmethod=indent foldlevelstart=1
      " autocmd filetype javascript setlocal foldmethod=marker foldmarker={,}
      autocmd filetype javascript setlocal foldmethod=syntax foldlevelstart=1
      autocmd filetype javascript syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend
      " autocmd filetype javascript setlocal foldtext=substitute(getline(v:foldstart), '{.*', '{...}', '')

      autocmd Syntax javascript set syntax=jquery

    augroup end " }}}
    augroup textile_files           " {{{
      au!

      autocmd filetype textile setlocal tw=78 wrap spell

      " Render YAML front matter inside Textile documents as comments
      autocmd filetype textile syntax region frontmatter start=/\%^---$/ end=/^---$/
      autocmd filetype textile highlight link frontmatter Comment
    augroup end "}}}
    augroup markdown_files          " {{{
      au!

      autocmd BufRead,BufNewFile *.{md,mkd,mkdn,mdown,markdown} setfiletype ghmarkdown
      autocmd filetype ghmarkdown setlocal tw=78 wrap spell

      " Render YAML front matter inside Markdown documents as comments
      autocmd filetype ghmarkdown syntax region frontmatter start=/\%^---$/ end=/^---$/
      autocmd filetype ghmarkdown highlight link frontmatter Comment

      " md, markdown, and mk are markdown and define buffer-local preview
      autocmd filetype ghmarkdown setlocal wrap wrapmargin=2 textwidth=72 nolist
      autocmd filetype ghmarkdown map <buffer> <leader>p :Mm<CR>

      " use the distraction-free theme for text-mode
      autocmd BufRead,BufNewFile *.{md,mkd,mkdn,mdown,markdown}
            \ if g:is_gui | execute "Thematic awesome-text" | endif
    augroup end "}}}
    augroup php_files               " {{{
      au!

      autocmd BufRead *.php setlocal makeprg=php\ -l\ %
      autocmd BufRead *.ctp setlocal filetype=php
      autocmd filetype php,ctp setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=80
    " }}}
    augroup nu_files                " {{{
      au BufNewFile,BufRead *.nu,*.nujson,Nukefile setf nu
    " }}}
    augroup compiled_files          " {{{
      au FileType make set noexpandtab " make uses real tabs
    " }}}
    augroup yaml_files              " {{{
      au FileType yml,yaml setlocal tabstop=2 shiftwidth=2 softtabstop=2
    " }}}
  endif
" }}}
" Behaviour: Configuration Overrides {{{
  call SourceIfReadable('~/.vimrc.after')            " useful to override vimrc configuration
" }}}
