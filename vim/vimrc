" Credits: """""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"            _ _    _                       _        _
"           (_) |  | |                     | |      ( )
"      _ __  _| | _| |__   __ _ _   _ _ __ | |_ __ _|/ ___
"     | '_ \| | |/ / '_ \ / _` | | | | '_ \| __/ _` | / __|
"     | | | | |   <| | | | (_| | |_| | |_) | || (_| | \__ \
"     |_| |_|_|_|\_\_| |_|\__, |\__,_| .__/ \__\__,_| |___/
"                          __/ |     | |
"                         |___/      |_|
"                            _       _    __ _ _
"                           | |     | |  / _(_) |
"                         __| | ___ | |_| |_ _| | ___  ___
"                        / _` |/ _ \| __|  _| | |/ _ \/ __|
"                       | (_| | (_) | |_| | | | |  __/\__ \
"                        \__,_|\___/ \__|_| |_|_|\___||___/
"
"
"   This is the personal .vimrc file of Nikhil Gupta.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   Hello, I am Nikhil Gupta, and
"   You can find me at http://nikhgupta.com
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NORC: """"""""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   To start vim without using this .vimrc file, use:
"     vim -u NORC
"
"   To start vim without loading any .vimrc or plugins, use:
"     vim -u NONE
" }}}
" Vim Tips: """"""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - Use `:X` to set encryption on any file
"   - Use `setl key=` to disable this encryption
"   - Use `gx` to open the current Url/File/etc. using OS-specific command
"   - Use `g:netrw_browserx_viewer` to set the binary for above command
"   - Use `''` to jump to location of the last jump
"   - Use `'.` to jump to location of your last edit
" }}}
" Sections: """"""""""""""""""""""""""""""""""""""""""""""""""" {{{
"
"     => Variable declaration to be used in this file
"     => Custom functions to be used in this file
"     => Load ~/.vimrc.before
"     => Make this configuration cross-platform
"     => NeoBundle and other Vim plugins
"     => Editing behaviour of Vim
"     => General behaviour of Vim
"     => Shell behaviour for Vim
"     => GUI behaviour of Vim
"     => Syntax highlighting and Search behaviour
"     => Folding behaviour of Vim
"     => Matching and Auto-Command behaviours
"     => Shortcut mappings
"     => Filetype specific handling
"     => Common abbreviations / misspellings
"     => Custom functions
"     => Reload Vim configuration automatically?
"     => Extra vi-compatibility
"     => Load ~/.vimrc.after
"
" }}}
" TODOs: """""""""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - convert common functionality into a plugin
"   - display whether working in terminal or gui mode inside the airline statusbar
"   - revisit: http://learnvimscriptthehardway.stevelosh.com/
"   - recreate MyFoldText() function based on: http://git.io/7QA1Dg
"   - create sections, vis-a-vis http://git.io/aDaz_g
"   - revisit exuberant tags http://bit.ly/17rL4P8
"   - implement visual search http://bit.ly/17rLkxv
"   - line numbers must use 4 columns
"   - implement Ranger file browser
"   - display syntax highlighting in foldtext
"   - create a command to run arbitrary shell and ruby source and replace content-in-place
"   - auto-open fold when a search match is found or when it is jumped upon
"   - integrate a vim-enabled notes manager
"   - integrate a vim-enabled scripts manager
"   - add spelling related mappings to vim (as well as some other togglers)
"   - read and implement vim configuration from:
"     - https://github.com/skwp/dotfiles
"     - https://github.com/gf3/dotfiles
" }}}
" Completed: """""""""""""""""""""""""""""""""""""""""""""""""" {{{
"   - recreate folds when reloading a file?
"     : use foldlevel and foldlevelstart settings for this purpose
"   - make airline work
"   - use patched fonts for AirLine
"   - search for a suitable autocompletion bundle
"   - verify and reinstall bundles
"   - read and implement vim configuration from:
"     - https://github.com/zenom/dotfiles
"     - https://github.com/jferris/config_files
"     - https://github.com/ryanb/dotfiles
"     - https://github.com/holman/dotfiles
"     - https://github.com/thoughtbot/dotfiles
"     - https://github.com/rtomayko/dotfiles
"     - https://github.com/garybernhardt/dotfiles
"     - https://github.com/amix/vimrc
"     - https://github.com/vgod/vimrc
"     - https://github.com/humiaozuzu/dot-vimrc
"     - https://github.com/sontek/dotfiles
"     - https://github.com/mathiasbynens/dotfiles
"     - https://github.com/nvie/vimrc (originally, based on it)
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

set nocompatible                                        " No to the total compatibility with the ancient vi
let mapleader = ","                                     " change mapleader key configuration
let g:mapleader = ","                                   " some plugins may require this variable to be set
let maplocalleader = "\\"

" Declare some variables for easy VimRC configuration {{{
  let g:is_mac     = has('mac') || has('macunix') || has('gui_macvim')
  let g:is_macvim  = has('gui_macvim')
  let g:is_linux   = has('linux')
  let g:is_windows = has('win16') || has('win32') || has('win64')
  let g:is_posix   = 1 " enable better bash syntax highlighting

  " default colorschemes to load
  " array1: first one is for gui and second list is for non-gui sessions
  " array2: first arg is colorscheme, second is Airline theme, and third one is background setting option
  let g:colorschemes = [
        \   [
        \     [ 'base16-eighties', 'wombat', 'dark' ],
        \     [ 'solarized', 'solarized', 'light' ],
        \     [ 'base16-ocean', 'wombat', 'dark' ],
        \   ], [
        \     [ 'Tomorrow-Night-Eighties', 'badwolf', 'light' ],
        \   ]
        \ ]
  " \     [ 'codeschool', 'wombat', 'dark' ],

  " store the path to the vim directory, somewhere..
  if g:is_windows
    let g:vim_path = $HOME . "/vimfiles"
  else
    let g:vim_path = $HOME . "/.vim"
  endif

" }}}

" Custom functions for easy VimRC configuration {{{
  " vim: source a file, only if we can read it :) {{{
  " TODO: change this function to include a _name before
  "       and name_ file afterwards
  function! SourceIfReadable(file)
    if filereadable(expand(a:file))
      let l:file = expand(a:file)
    else
      let l:file = expand(g:vim_path . "/" . a:file)
    end
    if filereadable(l:file)
      execute "source" l:file
    endif
  endfunction " }}}
  " vim: ensure that a directory exists {{{
  function! EnsureExists(path)
    if !isdirectory(expand(a:path))
      call mkdir(expand(a:path), 'p')
    endif
  endfunction
  " }}}
  " get current directory path {{{
  function! CurDir()
    return substitute(getcwd(), $HOME, "~", "")
  endfunction
  " }}}
  " Text to display on folded lines {{{
  function! MyFoldText()
    let line = getline(v:foldstart)

    let nucolwidth = &fdc + &number * &numberwidth
    let windowwidth = winwidth(0) - nucolwidth - 3
    let foldedlinecount = v:foldend - v:foldstart

    " expand tabs into spaces
    let onetab = strpart('          ', 0, &tabstop)
    let line = substitute(line, '\t', onetab, 'g')

    let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
    let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
    return line . ' ' . repeat("-",fillcharcount) . ' ' . foldedlinecount . ' '
  endfunction " }}}
  " View changes in the current buffer {{{
  command! DiffSaved call s:DiffWithSaved()
  function! s:DiffWithSaved()
    let filetype=&ft
    diffthis
    vnew | r # | normal! 1Gdd
    diffthis
    exe "setlocal bt=nofile bh=wipe nobl noswf ro ft=" . filetype
  endfunction " }}}
  " Pulsate the line containing the cursor {{{
  function! PulseCursorLine()
    let current_window = winnr()

    windo set nocursorline
    execute current_window . 'wincmd w'

    setlocal cursorline

    redir => old_hi
    silent execute 'hi CursorLine'
    redir END
    let old_hi = split(old_hi, '\n')[0]
    let old_hi = substitute(old_hi, 'xxx', '', '')

    hi CursorLine guibg=#3a3a3a
    redraw
    sleep 20m

    hi CursorLine guibg=#4a4a4a
    redraw
    sleep 30m

    hi CursorLine guibg=#3a3a3a
    redraw
    sleep 30m

    hi CursorLine guibg=#2a2a2a
    redraw
    sleep 20m

    execute 'hi ' . old_hi

    windo set cursorline
    execute current_window . 'wincmd w'
  endfunction
  " }}}
  " Append a modeline in the current buffer {{{
  function! AppendModeline()
    let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
          \ &tabstop, &shiftwidth, &textwidth)
    let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
    call append(line("$"), l:modeline)
  endfunction " }}}
  " Relative line numbering for the nerds :P {{{
  function! NumberToggle()
    if(&relativenumber == 1)
      set number
    else
      set relativenumber
    endif
  endfunction " }}}
  " Quickly toggle in/out the QuickFix window {{{
  command! -bang -nargs=? QFix call QFixToggle(<bang>0)
  function! QFixToggle(forced)
    if exists("g:qfix_win") && a:forced == 0
      cclose
      unlet g:qfix_win
    else
      copen 10
      let g:qfix_win = bufnr("$")
    endif
  endfunction " }}}
  " Detect Python vs Django-Python based on python content {{{
  function! s:DetectPythonVariant()
    let n = 1
    while n < 50 && n < line("$")
      " check for django
      if getline(n) =~ 'import\s\+\<django\>' || getline(n) =~ 'from\s\+\<django\>\s\+import'
        set ft=python.django
        "set syntax=python
        return
      endif
      let n = n + 1
    endwhile
    " go with html
    set ft=python
  endfunction " }}}
  " Detect HTML vs Django templates and set filetype accordingly {{{
  function! s:DetectHTMLVariant()
    let n = 1
    while n < 50 && n < line("$")
      " check for django
      if getline(n) =~ '{%\s*\(extends\|load\|block\|if\|for\|include\|trans\)\>'
        set ft=htmldjango.html
        return
      endif
      let n = n + 1
    endwhile
    " go with html
    set ft=html
  endfunction " }}}
  " get whether PasteMode is on or off (used for statusline purposes) {{{
  function! HasPaste()
    if &paste
      return '[PASTE]'
    else
      return ''
    endif
  endfunction
  " }}}
  " load default colorscheme depending on gui is running or not {{{
  function! LoadDefaultVimColors()
    " reload colorscheme and related
    if has('gui_running')
      execute 'set background=' . g:colorschemes[0][1][2]
      execute 'colorscheme ' . g:colorschemes[0][1][0]
      let g:airline_theme = g:colorschemes[0][1][1]
    else
      execute 'set background=' . g:colorschemes[1][0][2]
      execute 'colorscheme ' . g:colorschemes[1][0][0]
      let g:airline_theme = g:colorschemes[1][0][1]
    endif
    if exists(g:airline_theme)
      call airline#load_theme(g:airline_theme)
    endif
    redraw
  endfunction
  " }}}
  " create session with a prompt {{{
  function! SaveSessionWithPrompt()
    " guess name from current session, if any
    let name = xolox#session#find_current_session()
    let is_tab_scoped = xolox#session#is_tab_scoped()

    " ask user for a session name, otherwise
    if empty(name)
      let default_name = ''
      if g:session_default_name
        let default_name = g:session_default_name
      endif

      call inputsave()
      let name = input('save session? by what name? ', default_name)
      call inputrestore()
    endif

    " use the default session name, otherwise
    if empty(name) && g:session_default_name
      let name = g:session_default_name
    endif

    " save the given session
    if xolox#session#is_tab_scoped()
      call xolox#session#save_tab_cmd(name, '!', 'SaveTabSession')
    else
      call xolox#session#save_cmd(name, '!', 'SaveSession')
    endif

  endfunction
  " }}}
  " reload last session and restore vim colors {{{
  function! ReloadSessionAndRestoreColors()
    if function_exists("xolox#session#auto_load")
      call xolox#session#auto_load()
    endif
    call LoadDefaultVimColors()
  endfunction
  " }}}
  " search for a pattern across multiple files {{{
  function! SearchAcrossMultipleFiles(word)
    if strlen(a:word)
      let l:pattern = a:word
      echo "Searching for: " . l:pattern
    else
      let l:pattern = input("Give me a pattern: ")
    end
    let l:infiles = input("Give me patterns for files to search inside: ")
    let l:cmdline = ":lvim /" . l:pattern . "/gj" . l:infiles
    execute l:cmdline
    :lwindow
  endfunction
  " }}}
  " load a random colorscheme {{{
  function! LoadRandomColorScheme()
    let l:colorschemes = split(globpath(&rtp,"**/colors/*.vim"),"\n")
    let l:colorscheme  = l:colorschemes[localtime() % len(l:colorschemes)]
    let l:colorscheme  = fnamemodify(expand(l:colorscheme), ":t:r")
    if localtime() % 2 == 1
      let l:background = "dark"
    else
      let l:background = "light"
    endif
    execute "colorscheme " . l:colorscheme
    execute "set background=".l:background
    redraw
    echo "Loading colorscheme (".l:background."): " . l:colorscheme
  endfunction
  " }}}
" }}}

call SourceIfReadable('~/.vimrc.before')                " source ~/.vimrc.before, if exists

" Cross Platform Compatibility {{{
  " Better Unix / Windows compatibility
  set viewoptions=folds,options,cursor,unix,slash

  " On Windows, also use '.vim' instead of 'vimfiles'; this makes synchronization
  " across (heterogeneous) systems easier.
  if g:is_windows
    set runtimepath=$HOME/.vim,$VIM/vimfiles,$VIMRUNTIME,$VIM/vimfiles/after,$HOME/.vim/after
    if has("multi_byte")
      " Windows cmd.exe still uses cp850. If Windows ever moved to
      " Powershell as the primary terminal, this would be utf-8
      set termencoding=cp850
      " Let Vim use utf-8 internally, because many scripts require this
      setglobal fileencoding=utf-8
      " Windows has traditionally used cp1252, so it's probably wise to
      " fallback into cp1252 instead of eg. iso-8859-15.
      " Newer Windows files might contain utf-8 or utf-16 LE so we might
      " want to try them first.
      set fileencodings=ucs-bom,utf-8,utf-16le,cp1252,iso-8859-15
    endif
  endif
  set encoding=utf-8 nobomb " BOM often causes trouble
" }}}

" Vundle: Installation and its settings {{{

  " Auto-install Vundle, if not found
  let iCanHazVundle = 1
  let vundle_path = expand(g:vim_path . '/bundle/vundle')
  if !filereadable(vundle_path . "/README.md")
    echo "Installing Vundle..\n"
    execute ":silent !mkdir -p "  . shellescape(vundle_path)
    execute ":silent !git clone https://github.com/gmarik/vundle " . shellescape(vundle_path)
    let iCanHazVundle=0
  endif

  " turn filetype detection off (MacOSX Fix: http://bit.ly/17MENzJ)
  filetype on
  filetype off

  " initialize Vundle
  exec 'set rtp+=' . fnameescape(vundle_path)
  call vundle#rc()

  " let Vundle manage Vundle:
  Bundle 'gmarik/vundle'

  " Bundles {{{
    " Interface:
    " themes:                     various templates/themes to make code in vim look pretty {{{
      " singles:
      Bundle 'wombat256.vim'
      Bundle 'DAddYE/soda.vim'
      Bundle 'Pychimp/vim-luna'
      Bundle 'cstrahan/grb256'
      Bundle 'jnurmine/Zenburn'
      Bundle 'ciaranm/inkpot'
      Bundle 'fugalh/desert.vim'
      Bundle 'nanotech/jellybeans.vim'
      Bundle '29decibel/codeschool-vim-theme'
      Bundle 'altercation/vim-colors-solarized'
      Bundle 'minofare/VIM-Railscasts-Color-Theme'

      " collections:
      Bundle 'chriskempson/base16-vim'
      Bundle 'chriskempson/vim-tomorrow-theme'
      Bundle 'daylerees/colour-schemes', { 'rtp': 'vim-themes/' }
    " }}}
    " airline:                    lean & mean statusline for vim that's light as air: {{{
      Bundle 'bling/vim-airline'
      " settings {{{
        let g:airline_left_alt_sep     = ''
        let g:airline_right_alt_sep    = ''
        let g:airline_powerline_fonts  = 1
        let g:airline_enable_syntastic = 1
        let g:airline#extensions#tabline#enabled = 0
        if !exists('g:airline_theme')
          let g:airline_theme          = 'solarized'
        endif
      " }}}
    " }}}
    " vim-startify:               a fancy start screen for Vim: {{{
      Bundle 'vim-startify'
    " }}}

    " Essentials:
    " ctrlP:                      quickly search for a file/buffer {{{
      Bundle 'kien/ctrlp.vim'
      " notes: {{{
      " - when CtrlP window is open:
      "   - f5 will clear the CtrlP cache (useful if you add new files during the session)
      "   - <C-f> & <C-b> will cycle between CtrlP modes
      "   - Press <c-d> to switch to filename only search instead of full path.
      "   - Press <c-r> to switch to regexp mode.
      "   - Use <c-j>, <c-k> or the arrow keys to navigate the result list.
      "   - Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
      "   - Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
      "   - Use <c-y> to create a new file and its parent directories.
      "   - Use <c-z> to mark/unmark multiple files and <c-o> to open them.
      " }}}
      " settings: {{{
        " Set no max file limit
        let g:ctrlp_max_files = 0

        " ignore files matching the following patterns
        let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'

        " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
        if executable("ag")
          let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
        endif
      " }}}
      " key mappings: {{{
        " really needed? we can cycle between modes?
        map <C-b> :CtrlPBuffer<CR>
        " Search from current directory instead of project root
        map <C-o> :CtrlP %:p:h<CR>
      " }}}
    " }}}
    " nerdtree:                   easy file browsing {{{
      Bundle 'scrooloose/nerdtree'
      " todos: {{{
      "    - Put focus to the NERD Tree with F2 (tricked by quickly closing it and
      "      immediately showing it again, since there is no :NERDTreeFocus command)
      " }}}
      " settings {{{
        " change NerdTree's appearance
        let NERDTreeWinPos    = "left"
        let NERDChristmasTree = 1

        " Show hidden files, and bookmarks
        let NERDTreeShowFiles     = 1
        let NERDTreeShowHidden    = 1
        let NERDTreeShowBookmarks = 1

        " change directory, whenever tree root is changed
        let NERDTreeChDirMode = 2

        " Quit on opening files from the tree
        let NERDTreeQuitOnOpen = 0

        " Highlight the selected entry in the tree
        let NERDTreeHighlightCursorline = 1

        " Use a single click to fold/unfold directories and a double click to open files
        let NERDTreeMouseMode = 2

        " use the default Status Line for NerdTree buffers
        let NerdTreeStatusLine = -1

        " Store the bookmarks file
        let NERDTreeBookmarksFile = expand("$HOME/.vim/bookmarks")

        " Sort NerdTree to show ruby and php files earlier
        let NerdTreeSortOrder = ['\/$', '\.rb$', '\.php$', '*', '\.swp$',  '\.bak$', '\~$']

        " Don't display these kinds of files
        let NERDTreeIgnore = [ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '\.egg$', '^\.git$', '^\.DS_Store' ]
      " }}}
      " key mappings {{{
        " nmap <leader>n :NERDTreeClose<CR>:NERDTreeToggle<CR>
        nmap <leader>m :NERDTreeClose<CR>:NERDTreeFind<CR>
        nmap <leader>N :NERDTreeClose<CR>
        nmap <Leader>n <plug>NERDTreeTabsToggle<CR>
      " }}}
    " }}}
    " gundo:                      awesome redo-undo {{{
      Bundle 'sjl/gundo.vim'
      nnoremap <F4> :GundoToggle<CR>
    " }}}
    " yankring:                   awesome yank history {{{
      Bundle 'skwp/YankRing.vim'
      " settings: {{{
        let g:yankring_min_element_length = 2
        let g:yankring_history_dir = '$HOME/.vim/.tmp'
        " let g:yankring_manual_clipboard_check = 0
        let g:yankring_replace_n_pkey = '<F7>'
        let g:yankring_replace_n_nkey = '<F8>'
        " let g:yankring_window_use_horiz = 0  " Use vertical split
      " }}}
      " key mappings: {{{
        nmap <leader>r :YRShow<CR>
      " }}}
    " }}}
    " clam:                       lightweight plugin to easily run shell commands in vim {{{
      Bundle 'sjl/clam.vim'
      nnoremap ! :Clam<space>
      vnoremap ! :ClamVisual<space>
    " }}}
    " narrow-region:              focus on a region of text and make reset inaccessible {{{
      Bundle 'chrisbra/NrrwRgn'
    " }}}
    " zoomwin:                    easily maximize the current buffer {{{
      " - Press <Ctrl-W>o to toggle buffer size
      Bundle 'blueyed/ZoomWin'
    " }}}
    " nerdtree-tabs:              extend the power of nerdtree over tabs {{{
      Bundle "jistr/vim-nerdtree-tabs"
      " let g:nerdtree_tabs_open_on_console_startup=1
    " }}}
    " rename2:                    quickly rename your files {{{
      Bundle 'Rename2'
    " }}}
    " quicktask:                  lightweight task management for vim {{{
      Bundle 'aaronbieber/quicktask'
    " }}}
    " visual-star-search:         start a * or # search from a visual block: http://bit.ly/1dIKVv5{{{
      Bundle 'nelstrom/vim-visual-star-search'
    " }}}
    " ack:                        power of Ack in Vim {{{
      Bundle 'mileszs/ack.vim'
    " }}}
    " session:                    exended session management {{{
      " vim-misc is required for vim-session
      " Bundle 'xolox/vim-misc'
      " Bundle 'xolox/vim-session'
      " let g:session_autoload = 'yes'
      " let g:session_autosave = 'yes'
      " " let g:session_default_overwrite = 1
      " let g:session_default_to_last = 1
      " " let g:session_command_aliases = 1

      " nnoremap <leader>QA :call SaveSessionWithPrompt()<CR>:qall<CR>

    " }}}
    " showmarks:                  visual representation of the location marks {{{
      Bundle 'xsunsmile/showmarks'
      let g:showmarks_enable = 0
      " <leader>mt : Toggles ShowMarks on and off. 
      " <leader>mh : Hides an individual mark. 
      " <leader>ma : Hides all marks in the current buffer. 
      " <leader>mm : Places the next available mark. 
    " }}}

    " Editor:
    " commentary:                 easy comments for the naive {{{
      Bundle 'tpope/vim-commentary'
    " }}}
    " surround:                   surround tags with a given string {{{
      Bundle 'tpope/vim-surround'
    " }}}
    " abolish:                    easily search for, substitute, and abbrv multiple variants of a word {{{
      Bundle 'tpope/vim-abolish'
    " }}}
    " unimpaired:                 handy pair of brackets to toggle settings {{{
    " TODO: remove mappings obsolete because of this plugin
      Bundle 'tpope/vim-unimpaired'
    " }}}
    " repeat:                     enable repeating supported plugin maps with '.' {{{
      " supports plugins namely: commentary, surround, abolish, unimpaired
      Bundle 'tpope/vim-repeat'
    " }}}
    " endwise:                    adds end after if, do, def and several other keywords {{{
      Bundle 'tpope/vim-endwise'
    " }}}
    " tabular:                    easily indent your assignments {{{
      Bundle 'godlygeek/tabular'
      " key mappings {{{
        nmap <leader>a= :Tabularize /=<CR>
        vmap <leader>a= :Tabularize /=<CR>
        nmap <leader>a: :Tabularize /:\zs<CR>
        vmap <leader>a: :Tabularize /:\zs<CR>
      " }}}
    " }}}
    " smartinput:                 autoclose and smarter punctuation pairs in Vim {{{
      Bundle 'kana/vim-smartinput'
    " }}}
    " pasta:                      smart, context-aware indented pasting (no need of paste mode) {{{
      Bundle "sickill/vim-pasta"
      " disable pasta on some file types:
      let g:pasta_disabled_filetypes = ['python', 'coffee', 'yaml']
      " " enable paste on specific file types:
      " let g:pasta_enabled_filetypes = ['ruby', 'javascript', 'css', 'sh']
      " " make pasta use different mappings rather than overloading [p,P]
      " let g:pasta_paste_before_mapping = ',P'
      " let g:pasta_paste_after_mapping = ',p'
    " }}}
    " splitjoin:                  simplifies the transition between multiline and single-line code {{{
      " use gS to split the lines, and gJ to join them.
      Bundle 'AndrewRadev/splitjoin.vim'
    " }}}
    " text objects:               create our own text objects {{{
      Bundle 'kana/vim-textobj-user'
      " indentations: i
      Bundle "austintaylor/vim-indentobject"
      " symbols: :
      Bundle "bootleq/vim-textobj-rubysymbol"
      " columns: c
      Bundle "coderifous/textobj-word-column.vim"
      " functions: f
      Bundle "kana/vim-textobj-function"
      Bundle "thinca/vim-textobj-function-javascript"
      " underscored words: _
      Bundle "lucapette/vim-textobj-underscore"
      " ruby blocks: r
      Bundle "nelstrom/vim-textobj-rubyblock"
      " arguments: a
      Bundle "vim-scripts/argtextobj.vim"
    " }}}
    " orgmode:                    emacs' org mode parsing in vim {{{
      Bundle "jceb/vim-orgmode"
      Bundle "tpope/vim-speeddating"
    " }}}

    " Git Related:
    " git:                        syntax highlighting and other Git niceties (<v7.2) {{{
      if (v:version < 7.2)
        Bundle 'tpope/vim-git'
      endif
    " }}}
    " gitv:                       gitk for vim: http://www.gregsexton.org/portfolio/gitv/ {{{
      Bundle 'gregsexton/gitv'
    " }}}
    " gist:                       for creating small Gist snippets {{{
      Bundle 'mattn/gist-vim'
      " settings {{{
        let g:gist_clip_command = 'pbcopy'
        let g:gist_detect_filetype = 1
        let g:gist_open_browser_after_post = 1
        let g:gist_show_privates = 1
        let g:github_user = $GITHUB_USER
        let g:github_token = $GITHUB_TOKEN
        let g:snips_author = "$MY_NAME <$MY_MAIL>"
      " }}}
    " }}}
    " fugitive:                   a Git wrapper so awesome, it should be illegal {{{
      Bundle 'tpope/vim-fugitive'
    " }}}
    " gitgutter:                  a Vim plugin which shows a git diff in the gutter (sign column) {{{
      Bundle 'airblade/vim-gitgutter'
      " todos: {{{
      "   - use the 'Switch' command to switch between git diff for the current line :)
      " }}}
      " settings: {{{
        " do not enable gitgutter by default
        let g:gitgutter_enabled = 0
        " do not be eager - only work when reading/writing a file
        let g:gitgutter_eager = 0
        " ignore whitespace
        let g:gitgutter_diff_args = '-w'
      " }}}
      " key mappings: {{{
        nmap <leader>g :GitGutterToggle<CR>
        " customize mappings for jumping to next/prev hunks
        " nmap gh <Plug>GitGutterNextHunk
        " nmap gH <Plug>GitGutterPrevHunk
      " }}}
    " }}}

    " Code Helpers:
    " tagbar:                     display tags of the current file ordered by scope {{{
      Bundle 'Tagbar'
      " settings {{{
        let g:tagbar_autofocus = 1
        let g:tagbar_autoshowtag = 1
        let g:tagbar_width = 40
        let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
      " }}}
      " key mappings {{{
        nmap <leader>l :TagbarToggle<CR>
      " }}}
    " }}}
    " syntastic:                  easy syntax checking {{{
      Bundle 'scrooloose/syntastic'
      " settings {{{
        let g:syntastic_enable_signs             = 1
        let g:syntastic_auto_loc_list            = 1
        let g:syntastic_check_on_open            = 1
        let g:syntastic_error_symbol             = '✗'
        let g:syntastic_warning_symbol           = '⚠'
        let g:syntastic_always_populate_loc_list = 1
      " }}}
    " }}}
    " switch:                     switch between code easily {{{
      Bundle "AndrewRadev/switch.vim"
      nnoremap - :Switch<cr>
    " }}}
    " indent-guides:              visually display indent levels in code {{{
      Bundle 'nathanaelkane/vim-indent-guides'
      " default map: <leader>ig
      let g:indent_guides_guide_size  = 1
      let g:indent_guides_start_level = 2
    " }}}
    " multiple-cursors:           true Sublime Text style multiple cursors for vim {{{
      Bundle 'terryma/vim-multiple-cursors'
      " TODO: check that the keys do work correctly
      let g:multi_cursor_use_default_mapping = 0
      let g:multi_cursor_next_key='<F6>'
      let g:multi_cursor_prev_key=''
      let g:multi_cursor_skip_key=''
      let g:multi_cursor_quit_key='<Esc>'
    " }}}

    " Snippets And Code Completion:
    " neocomplete/neocomplcache:  ultimate auto-completion system for Vim {{{
      if has('lua')
        Bundle 'Shougo/neocomplete.vim'
        " settings: {{{
          let g:neocomplete#enable_at_startup = 1                 " enable at startup
          let g:neocomplete#enable_smart_case = 1                 " enable SmartCase
          let g:neocomplete#sources#syntax#min_keyword_length = 3 " use a minimum syntax keyword length
          let g:neocomplete#force_overwrite_completefunc = 1
          " do not complete automatically on files matching this pattern
          " let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'
          " let g:neocomplete#keyword_patterns['default'] = '\h\w*'
        " }}}
        " key mappings: {{{
          inoremap <expr><C-g>     neocomplete#undo_completion()
          inoremap <expr><C-l>     neocomplete#complete_common_string()

          " <CR>: close popup and save indent.
          inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
          function! s:my_cr_function()
            return neocomplete#smart_close_popup() . "\<CR>"
            " For no inserting <CR> key.
            "return pumvisible() ? neocomplete#close_popup() : "\<CR>"
          endfunction

          " <TAB>: completion.
          inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

          " <C-h>, <BS>: close popup and delete backword char.
          inoremap <expr><C-h>  neocomplete#smart_close_popup()."\<C-h>"
          inoremap <expr><BS>   neocomplete#smart_close_popup()."\<C-h>"
          inoremap <expr><C-y>  neocomplete#close_popup()
          inoremap <expr><C-e>  neocomplete#cancel_popup()
        " }}}
      else
        Bundle 'Shougo/neocomplcache.vim'
        " settings: {{{
          let g:neocomplcache_enable_at_startup = 1               " enable at startup
          let g:neocomplcache_enable_smart_case = 1               " enable SmartCase
          let g:neocomplcache_min_syntax_length = 3               " use a minimum syntax keyword length
          " do not complete automatically on files matching this pattern
          " let g:neocomplcache_lock_buffer_name_pattern = '\*ku\*'
          " let g:neocomplcache_keyword_patterns['default'] = '\h\w*'
        " }}}
        " key mappings: {{{
          inoremap <expr><C-g>     neocomplcache#undo_completion()
          inoremap <expr><C-l>     neocomplcache#complete_common_string()

          " <CR>: close popup and save indent.
          inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
          function! s:my_cr_function()
            return neocomplcache#smart_close_popup() . "\<CR>"
            " For no inserting <CR> key.
            "return pumvisible() ? neocomplcache#close_popup() : "\<CR>"
          endfunction

          " <TAB>: completion.
          inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

          " <C-h>, <BS>: close popup and delete backword char.
          inoremap <expr><C-h>  neocomplcache#smart_close_popup()."\<C-h>"
          inoremap <expr><BS>   neocomplcache#smart_close_popup()."\<C-h>"
          inoremap <expr><C-y>  neocomplcache#close_popup()
          inoremap <expr><C-e>  neocomplcache#cancel_popup()
        " }}}
      endif

    " }}}
    " neosnippet:                 ultra fast snippets {{{
      Bundle 'Shougo/neosnippet'
      " settings: {{{
        " Enable snipMate compatibility feature.
        let g:neosnippet#enable_snipmate_compatibility = 1

        " tell NeoSnippet about other snippets
        let g:neosnippet#snippets_directory='~/.vim/bundle/vim-snippets/snippets'
        " For snippet_complete marker.
        if has('conceal')
          set conceallevel=2 concealcursor=i
        endif
      " }}}
      " key mappings: {{{
        imap <C-k>     <Plug>(neosnippet_expand_or_jump)
        smap <C-k>     <Plug>(neosnippet_expand_or_jump)
        xmap <C-k>     <Plug>(neosnippet_expand_target)

        " SuperTab like snippets behavior.
        imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
          \ "\<Plug>(neosnippet_expand_or_jump)"
          \ : pumvisible() ? "\<C-n>" : "\<TAB>"
        smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
          \ "\<Plug>(neosnippet_expand_or_jump)"
          \ : "\<TAB>"
      " }}}
    " }}}
    " honza-snippets:             snippets for various languages: {{{
      Bundle 'honza/vim-snippets'
    " }}}

    " Language Helpers:
    " html:                       html5 {{{
      " html5 syntax and omni-complete
      Bundle 'DAddYE/html5.vim'
      " convert to and from html entities
      Bundle 'skwp/vim-html-escape'
    " }}}
    " php:                        PIV {{{
      Bundle 'spf13/PIV'
    " }}}
    " node.js:                    node.js {{{
      Bundle 'mmalecki/vim-node.js'
    " }}}
    " ruby/rails:                 ruby, rails, rake, bundler, endwise, haml, rspec, cucumber {{{
      " essential for ruby code writing, eh?
      Bundle 'vim-ruby/vim-ruby'

      " rails power tools for vim: http://git.io/rails.vim
      Bundle 'tpope/vim-rails'
      " it's like rails.vim without the rails
      Bundle 'tpope/vim-rake'
      " lightweight support for Ruby's Bundler
      Bundle 'tpope/vim-bundler'

      " syntax support
      Bundle 'tpope/vim-haml'
      " Bundle 'DAddYE/vim-slim'
      Bundle 'tpope/vim-rspec'
      Bundle 'tpope/vim-cucumber'
    " }}}
    " stylesheets:                less, css3-syntax, scss-syntax {{{
      Bundle 'groenewege/vim-less'
      Bundle 'hail2u/vim-css3-syntax'
      Bundle 'cakebaker/scss-syntax.vim'
    " }}}
    " text/markdown:              markdown, textile {{{
      Bundle 'tpope/vim-markdown'
      Bundle 'timcharper/textile.vim'
      Bundle 'jtratner/vim-flavored-markdown'
      Bundle 'nelstrom/vim-markdown-preview'
    " }}}
    " javascript:                 coffeescript, javascript {{{
      Bundle 'pangloss/vim-javascript'
      Bundle 'kchmck/vim-coffee-script'
      Bundle 'itspriddle/vim-jquery'
    " }}}
    " miscelleneous:              csv {{{
      Bundle 'csv.vim'
    " }}}

    " Miscelleneous:
    " matchit:                    extended % matching for HTML, LaTeX, etc. {{{
      Bundle 'matchit.zip'
    " }}}
    " vim-scratch:                scratchable buffer for scrappables {{{
      Bundle 'duff/vim-scratch'
      " key mappings {{{
        nmap <leader><tab> :Sscratch<CR><C-W>x<C-J>
      " }}}
    " }}}

    " Disabled Plugins:
    " " unite:                      interface to rule almost everything {{{
      " Bundle 'Shougo/unite.vim'
      " call SourceIfReadable('~/.vim/lib/unite.vim')
    " " }}}
    " " vimfiler:                   easy file browsing that integrates with unite {{{
      " Bundle 'Shougo/vimfiler.vim'
      " " settings {{{
        " let g:vimfiler_as_default_explorer = 1
      " " }}}
      " " key mappings {{{
        " nnoremap <silent> [unite]v :<C-u>VimFilerBufferDir -quit<CR>
        " nnoremap <silent> [unite]p :<C-u>VimFilerBufferDir -split -simple -winwidth=30 -no-quit<CR>
        " nnoremap <silent> [unite]i :<C-u>VimFiler -split -explorer -status -simple -winwidth=30 -no-quit<CR>
      " " }}}
    " " }}}
    " " vimproc:                    asynchronously runs commands (Bundle, Unite) {{{
      " Bundle 'Shougo/vimproc', {
          " \ 'build' : {
          " \     'windows' : 'make -f make_mingw32.mak',
          " \     'cygwin' : 'make -f make_cygwin.mak',
          " \     'mac' : 'make -f make_mac.mak',
          " \     'unix' : 'make -f make_unix.mak',
          " \    },
          " \ }
    " " }}}
    " " yankring:                   maintains a history of previous yanks, changes and deletes {{{
      " Bundle 'YankRing.vim'
    " " }}}
    " " flake8:                     automatic syntax checker for Python {{{
      " Bundle 'nvie/vim-flake8'
    " " }}}
    " " screen:                     simulate a split shell in vim using gnu screen or tmux {{{
      " Bundle 'ervandew/screen'
    " " }}}
    " " easytags:                   automated tag generation and syntax highlighting in Vim {{{
      " Bundle 'easytags.vim'
      " " settings {{{
        " let g:easytags_cmd = '/usr/local/bin/ctags'
        " let g:easytags_dynamic_files = 1
        " let g:easytags_by_filetype = '~/.ctags'
        " let g:easytags_resolve_links = 1
        " " let g:easytags_file = '~/.easytags'
      " " }}}
    " " }}}
    " " nerdcommenter:              easy comments for the naive {{{
      " Bundle 'scrooloose/nerdcommenter'
      " " settings {{{
        " let NERDSpaceDelims = 1
        " " let NERDRemoveExtraSpaces = 1
      " " }}}
    " " }}}
    " " youcompleteme:              auto completion engine for vim: {{{
    "   " Bundle 'Valloric/YouCompleteMe'
    "   " let g:ycm_collect_identifiers_from_tags_files = 1
    " " }}}
    " " tern_for_vim:               intelligent javascript autocompletion: {{{
    "   Bundle 'marijnh/tern_for_vim'
    " " }}}
    " " ultisnips:                  vim snippets with ease: {{{
    "   Bundle 'SirVer/ultisnips'
    "   let g:UltiSnipsExpandTrigger       = '<c-e>'
    "   let g:UltiSnipsListSnippets        = '<c-s-l>'
    "   let g:UltiSnipsJumpForwardTrigger  = '<c-e>'
    "   let g:UltiSnipsJumpBackwardTrigger = '<c-s-e>'
    " " }}}
    " " organizer:                  org mode for vim {{{
    "   Bundle 'hsitz/VimOrganizer'
    " " }}}
  
  " }}}

  " install Bundles, if we just installed Vundle
  if iCanHazVundle == 0
    echo "Installing Bundles, please ignore key map error messages"
    :BundleInstall
  endif

  " require matchit
  runtime macros/matchit.vim

  " required by Vundle
  filetype plugin indent on       " enable detection, plugins and indenting in one step
" }}}

" Behaviour: Vim {{{
" set encoding
scriptencoding utf-8
set encoding=utf-8
set termencoding=utf-8
set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1

" security related matters
set nomodeline                  " disable mode lines (security measure)

" mouse related matters
if has('mouse')
  set mouse=a                   " enable using mouse if terminal supports it
  set mousehide
endif

" session related matters
if has('mksession')
  set sessionoptions+=resize
endif

" wrapping related matters
set nowrap                      " don't wrap lines
set linebreak                   " break long lines at words, when wrap is on
set textwidth=80                " wrap after this many characters in a line
set colorcolumn=+1              " highlight end of textwidth
set whichwrap=b,s,h,l,<,>,[,]   " allow <BS> & cursor keys to move to prev/next line
set showbreak=↪                 " string to put at the starting of wrapped lines
set scrolloff=7                 " keep lines off edges of the screen when scrolling
" set scrolljump=5                " lines to scroll when cursor leaves screen
set sidescroll=1                " brings characters in view when side scrolling
set sidescrolloff=15            " start side-scrolling when n chars are left

" look related matters
set number                      " always show line numbers
set numberwidth=4               " number of culumns for line numbers
set showmode                    " always show what mode we're currently editing in
set report=0                    " always report number of lines changed
set cursorline                  " highlight the current line, for quick orientation
set nocursorcolumn              " highlight the current column, for quick orientation
set shortmess+=filmnrxoOtT      " abbrev. vim-messages (avoids 'hit enter', also)
set shortmess+=I                " do not display intro message on Vim startup
set nolist                      " do not show invisible characters
                                " enabled later via autocmd on certain filetypes
set listchars=tab:▸\ ,trail:·,extends:▶,precedes:◀,nbsp:·

" windows related matters
set splitbelow                  " puts new split windows to the bottom of the current
set splitright                  " puts new vsplit windows to the right of the current
set lazyredraw                  " even update the display while executing macros
set tabpagemax=15               " only show 15 tabs
set equalalways                 " split windows are always of eqal size

" statusline related matters
set cmdheight=2                 " use a status bar that is 2 rows high
set laststatus=2                " tell VIM to always put a status line in
if !exists('g:loaded_airline')
  set statusline=\ %{HasPaste()}%<%-15.25(%f%)%m%r%h\ %w\ \
  set statusline+=\ \ \ [%{&ff}/%Y]
  set statusline+=\ \ \ %<%20.30(%{hostname()}:%{CurDir()}%)\
  set statusline+=%=%-10.(%l,%c%V%)\ %p%%/%L
endif
if has('cmdline_info')
  set ruler                     " Show the ruler
  set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
  set showcmd                   " show (partial) command in the last line of the screen this also shows visual selection info
endif

" wildcard related matters for filename completion
set wildmenu                        " make tab completion for files/buffers act like bash
set wildmode=list:longest,full      " show a list when pressing tab, then longest common part and then full name.
set wildignore+=*/vendor/*          " stuff to ignore when tab completing ...
set wildignore+=*/.hg/*,*/.svn/*
set wildignore+=*vim/backups*       " ...
set wildignore+=*/smarty/*          " ...
set wildignore+=*/node_modules/*    " ...
set wildignore+=*/.sass-cache/*     " ...
set wildignore+=*/tmp/*,tmp/**      " ...
set wildignore+=*/out/**,log/**     " ... phew!!
" file suffixes that can be safely ignored for file name completion
set suffixes+=.swo,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.DS_Store,.class,.so
set suffixes+=.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll,.zip
set suffixes+=.gem,.pdf,.avi,.mkv,.png,.jpg,.gif,.psd

" completion related matters
set completeopt+=menuone,longest  " don't select first item, follow typing in autocomplete
set completeopt-=preview          " disable doc preview in omnicomplete
set complete=.,w,b,t              " do lots of scanning on tab completion,  FIXME?
set pumheight=6                   " Keep a small completion window

" terminal related matters
set title                         " change the terminal's title
set ttyfast                       " always use a fast terminal
set visualbell                    " don't beep
set noerrorbells                  " don't beep
set t_vb=                         " remove visual bell character
" Prevent Vim from clobbering the scrollback buffer. See
" http://www.shallowsky.com/linux/noaltscreen.html
set t_ti= t_te=

" other really (ir)relevant matters
set autoread                      " watch for file changes
" set autowrite                     " auto write file when moving away from it.
set autochdir                     " automatically change the working directory
set hidden                        " hide buffers instead of closing them this means that the current buffer can be put to background without being written; and that marks and undo history are preserved.
set switchbuf=useopen,split       " reveal already opened files from the quickfix window instead of opening new buffers, otherwise split current window to make room for new one.
set history=1000                  " remember more commands and search history
set viminfo='500,:100,@100,/20,f1,%,<200    " see :h viminfo to understand what this means :)
set nofsync                       " improves performance -- let OS decide when to flush disk

" undo/redo related matters
if has('persistent_undo')
  set undofile                  " So is persistent undo ...
  set undolevels=1000           " Maximum number of changes that can be undone
  set undoreload=10000          " Maximum number lines to save for undo on a buffer reload
  set undodir=~/.vim/.tmp,/tmp
endif

" shell related matters
if !g:is_windows                  " use bash with login shell and
  " set shell=zsh\ -i              " interactive mode overwrite in vimrc.after
endif                             " if needed

" backup related matters
set nobackup                      " do not keep backup files, it's 70's style cluttering
set nowritebackup                 " do not make a write backup
set noswapfile                    " do not write annoying intermediate swap files
set directory=~/.vim/.tmp,/tmp    " store swap files in one of these directories (in case swapfile is ever turned on)
" }}}
" Behaviour: GUI {{{
" set appropriate terminal colors
if &t_Co > 2 && &t_Co < 16
  set t_Co =16
elseif &t_Co > 16
  set t_Co =256
endif

" set vim's colorscheme, airline theme and background from default values
call LoadDefaultVimColors()

" source our ~/.gvimrc, if gui is running
if has('gui_running')
  call SourceIfReadable('~/.gvimrc')
endif

" Verical bar in insert mode (for iTerm users only)
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

" }}}
" Behaviour: Editor {{{
set ttimeout                    " timeout on key codes
set ttimeoutlen=50              " timeout duration should be small
set nrformats-=octal            " do not treat octal as numbers
set nrformats+=alpha            " but, allow inc/dec on alphabetical letters
set nojoinspaces                " prevents two spaces after punctuation on join
set virtualedit=onemore         " allow cursor 1 char beyond end of current line
set fileformats="unix,dos,mac"  " EOL that will be tried when reading buffers
set formatoptions+=1ron         " see :h formatoptions-values for details
set backspace=indent,eol,start  " allow backspacing over everything in insert mode
set pastetoggle=<F2>            " when in insert mode, press <F2> to go to paste mode
set showmatch                   " set show matching parenthesis
set matchtime=2                 " show matching parenthesis for 0.2 seconds
" set cinoptions=b1,g0,N-s,t0,(0,W4 " see :h cinoptions-values for details
set iskeyword+=_,$,@,%,#        " none of these should be word dividers, so make them not be

" tab related matters
set tabstop=4                   " a tab is two spaces
set softtabstop=4               " when <BS>, pretend tab is removed, even if spaces
set expandtab                   " expand tabs, by default

" indentation related matters
set autoindent                  " always set autoindenting on
set shiftwidth=4                " number of spaces to use for autoindenting
set copyindent                  " copy the previous indentation on autoindenting
set shiftround                  " use multiple of 'sw' when indenting with '<' and '>'
set smarttab                    " insert tabs on start of line acc to 'sw' not 'ts'

" spelling related matters
if has('syntax')
  setlocal spell spelllang=en_us
  set nospell                   " no spell check, by default
endif

" clipboard related matters
if has ('x') && has('unnamedplus')
  set clipboard=unnamedplus,unnamed      " On Linux use + register for copy-paste
else
  set clipboard+=unnamed                 " On mac and Windows, use * register for copy-paste
endif
" }}}
" Behaviour: Folding {{{
set nofoldenable                " do not enable folding, by default
set foldcolumn=2                " add a fold column to the left of line-numbers
set foldlevel=0                 " folds with a higher level will be closed
set foldlevelstart=0            " start out with everything closed
set foldmethod=indent           " create folds based on indentation
set foldnestmax=3               " deepest fold is 3 levels
set foldminlines=1              " do not fold single lines, fold everything else
set foldtext=MyFoldText()       " function for text that appears over folds
" which commands trigger auto-unfold
set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo

" Don't screw up folds when inserting text that might affect them, until
" leaving insert mode. Foldmethod is local to the window. Protect against
" screwing up folding when switching between windows.
" http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod |
                    \ setlocal foldmethod=manual | endif
autocmd InsertLeave,WinLeave * if exists('w:last_fdm') |
                             \ let &l:foldmethod=w:last_fdm |
                             \ unlet w:last_fdm | endif
" }}}
" Behaviour: Search and Syntax Highlighting {{{
set incsearch                   " show search matches as you type
set ignorecase                  " by default, the search should ignore case
set smartcase                   " ignore case lowercase, else case-sensitive
set gdefault                    " search/replace globally (on a line) by default
set synmaxcol=800               " don't try to highlight lines longer than 800 characters.
set magic                       " use magic mode when searching/replacing
set wrapscan                    " search continues after the end of file

if has("gui_running") || &t_Co > 2
  syntax on                     " syntax highlight on, when terminal has colors
  set hlsearch                  " enable highlighting of search items
endif

if has("diff")
  set diffopt+=iwhite " Ignore whitespace changes (focus on code changes)
endif
" }}}
" Behaviour: CTags {{{
set tags+=./tags,tags;/         " find and load tags file up until root
" }}}
" Behaviour: Inbuilt Plugin Settings {{{
if executable('ag')
  let g:ackprg='ag --nogroup --nocolor --column'
  set grepprg=ag\ --nogroup\ --nocolor\ --column
elseif executable("ack")
  set grepprg=ack\ -H\ --nogroup\ --nocolor\ --ignore-dir=tmp\ --ignore-dir=coverage
endif

" Stop fucking netrw
let g:netrw_silent = 1
let g:netrw_quiet  = 1
" let g:loaded_netrw = 1 " prevents loading of netrw, but messes 'gx'
" let g:loaded_netrwPlugin = 1
" }}}
" Behaviour: Security {{{
set exrc                                         " enable per-directory .vimrc files
set secure                                       " disable unsafe commands in them
if exists("&cryptmethod")
  set cryptmethod=blowfish                       " https://coderwall.com/p/hypjbg
endif
" }}}
" Behaviour: Mappings {{{
  " ease-of-use related mappings {{{
    " Since I never use the ; key anyway, this is a real optimization for almost
    " all Vim commands, since we don't have to press that annoying Shift key that
    " slows the commands down
    nnoremap ; :
    " nnoremap : ;    " not recommended

    " Swap implementations of ` and ' jump to markers
    nnoremap ' `
    nnoremap ` '

    " Swap implementations of 0 and ^
    nnoremap 0 ^
    nnoremap ^ 0
  " }}}
  " mappings created to avoid any accidental hits {{{
    " avoid accidental hits of <F1> while aiming for <Esc>
    map! <F1> <Esc>

    " avoid accidental hits of Shift key
    cmap Tabe tabe
    if has("user_commands")
      command! -bang -nargs=* -complete=file E e<bang> <args>
      command! -bang -nargs=* -complete=file W w<bang> <args>
      command! -bang -nargs=* -complete=file Wq wq<bang> <args>
      command! -bang -nargs=* -complete=file WQ wq<bang> <args>
      command! -bang Wa wa<bang>
      command! -bang WA wa<bang>
      command! -bang Q q<bang>
      command! -bang QA qa<bang>
      command! -bang Qa qa<bang>
    endif
  " }}}
  " mappings that perform everyday tasks quicker {{{
    " quickly close the current window
    noremap <leader>q :q<CR>

    " quick save a file
    nnoremap <leader>w :w!<CR>

    " sudo to write
    cmap w!! w !sudo tee % >/dev/null

    " quickly yanking a complete line
    nmap Y yy

    " Switch between the last two files
    nnoremap <leader><leader> <c-^>
  " }}}
  " movement related mappings {{{

    " use the damn hjkl keys
    nnoremap <Left> :echoe "Use h"<CR>
    nnoremap <Right> :echoe "Use l"<CR>
    nnoremap <Up> :echoe "Use k"<CR>
    nnoremap <Down> :echoe "Use j"<CR>

    " remap j and k to act as expected when used on long, wrapped, lines
    noremap j gj
    noremap k gk

    " jump to matching pairs easily, with Tab
    nnoremap <Tab> %
    vnoremap <Tab> %

    " toggle RelativeLineNumbers manually using Ctrl+n
    nnoremap <C-n> :call NumberToggle()<cr>

  " }}}
  " windows related mappings {{{

    " resize windows automatically
    map <leader>= <C-w>=

    " easy window navigation
    map <C-h> <C-w>h
    map <C-j> <C-w>j
    map <C-k> <C-w>k
    map <C-l> <C-w>l

    " easy window navigation with maximize
    map <leader><C-h> <C-w>h<C-w><bar>
    map <leader><C-j> <C-w>j<C-w>_
    map <leader><C-k> <C-w>k<C-w>_
    map <leader><C-l> <C-w>l<C-w><bar>

    " speed up scrolling of the viewport slightly
    nnoremap <C-e> 2<C-e>
    nnoremap <C-y> 2<C-y>

    " create a split buffer containing the current file and switch to it
    nnoremap <leader>wh <C-w>s<C-w>k
    nnoremap <leader>wv <C-w>v<C-w>l

    " Split previously opened file ('#') in a split window and switch to it
    nnoremap <leader>ph :execute 'rightbelow split' bufname('#')<cr>
    nnoremap <leader>pv :execute 'leftabove vsplit' bufname('#')<cr>

  " }}}
  " editing/formatting related mappings {{{

    " strip all trailing whitespace from a file and save it
    nnoremap <silent> <leader>W  :%s/\v<C-v><C-m>//e<CR>:retab<CR>:%s/\s\+$//e<CR>:let @/=''<CR>:w<CR>

    " allow using the repeat operator with a visual selection (!)
    " http://stackoverflow.com/a/8064607/127816
    vnoremap . :normal .<CR>

    " join lines and restore cursor location
    nnoremap J mjJ`j

    " quickly get out of insert mode without your fingers having to leave the
    " home row (either use 'jj' or 'jk')
    inoremap jj <Esc>
    inoremap jk <Esc>

    " toggle highlighting of cursor column - useful for manual indentation
    nnoremap <leader>cr :set cursorcolumn!<CR>

    " view changes in the current buffer as compared to the last saved document
    nnoremap <leader>ds :DiffSaved<CR>

    " quickly create new buffers with files from current directory
    " http://vimcasts.org/e/14
    cnoremap %% <C-R>=expand('%:h').'/'<cr>

    map <leader>er :e **/*
    map <leader>ew :e %%
    map <leader>es :sp %%
    map <leader>ev :vsp %%
    map <leader>et :tabe %%

    " use Q for formatting the current paragraph (or visual selection)
    vmap Q gq
    nmap Q gqap

    " Visual shifting (does not exit Visual mode)
    vnoremap < <gv
    vnoremap > >gv

    " auto-indent the entire document
    nmap <leader>fef ggVG=

    " quick alignment of text across the window-width
    nmap <leader>al :left<CR>
    nmap <leader>ar :right<CR>
    nmap <leader>ac :center<CR>

    " insert modeline after last line of the file
    nnoremap <silent> <leader>ml :call AppendModeline()<CR>:echo 'Added Modeline.'<CR>

    " insert current time
    nnoremap <F5> "=strftime("%d-%m-%y %H:%M:%S")<CR>P
    inoremap <F5> <C-R>=strftime("%d-%m-%y %H:%M:%S")<CR>

    " underline the current line with '='
    nmap <silent> <leader>ul YpVr=<CR>

  " }}}
  " file system related mappings {{{

    " change Working Directory to that of the current file
    cmap cd. lcd %:p:h
    cmap cwd lcd %:p:h

    " create the directory containing the file in the buffer
    nmap <silent> <leader>md :!mkdir -p %:p:h<CR>

    " make file executable
    command! -nargs=* Xe !chmod +x <args>
    command! -nargs=0 Xe !chmod +x %

  " }}}
  " search/replace related mappings {{{

    " use 'really' magic mode for search patterns
    " 01-09-13 03:03:06 - using `magic` mode, instead.
    " nnoremap / /\v
    " vnoremap / /\v

    " run Ack fast
    nnoremap <leader>a :Ack<Space>

    " clears the search register
    nmap <silent> <leader><cr> :nohlsearch<CR>

    " keep search matches in the middle of the window and pulse the line when moving
    " to them (no need to map to: Nzz hence)
    nnoremap <silent> n n:call PulseCursorLine()<cr>
    nnoremap <silent> N N:call PulseCursorLine()<cr>

    " search: display all lines with keyword under cursor and ask which one to jump to
    nmap <Leader>fs [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<CR>

    " replace: pull word under cursor into LHS of a substitute (for quick search and replace)
    nmap <leader>fr :%s#\<<C-r>=expand("<cword>")<CR>\>#

    " search: search for a pattern across multiple files
    nmap <leader>fm :call SearchAcrossMultipleFiles("")<cr>
    nmap <leader>fc :call SearchAcrossMultipleFiles("<C-r>=expand("<cword>")<CR>")<cr>

    " center display after searching
    nnoremap n   nzz
    nnoremap N   Nzz
    nnoremap *   *zz
    nnoremap #   #zz
    nnoremap g*  g*zz
    nnoremap g#  g#z
  " }}}
  " clipboard related mappings {{{

    " toggle paste mode on and off
    map <leader>pp :setlocal paste!<cr>

    " yank/paste to the OS clipboard with ,y and ,p
    " (not required, if using 'unnamed' clipboard on OS)
    nmap <leader>y "+y
    nmap <leader>Y "+yy
    nmap <leader>p "+p
    nmap <leader>P "+P

    " use ,d (or ,dd or ,dj or 20,dd) to delete a line without adding it to the
    " yanked stack (also, in visual mode)
    nmap <silent> <leader>d "_d
    vmap <silent> <leader>d "_d

    " reselect text that was just pasted with ,v
    nnoremap <leader>v V`]

  " }}}
  " folding related mappings {{{

    " fold/unfold the current-fold using a space
    nnoremap <Space> za
    vnoremap <Space> za

    " code folding for a specific level
    nmap <leader>f0 :set foldlevel=0<CR>
    nmap <leader>f1 :set foldlevel=1<CR>
    nmap <leader>f2 :set foldlevel=2<CR>
    nmap <leader>f3 :set foldlevel=3<CR>
    nmap <leader>f4 :set foldlevel=4<CR>
    nmap <leader>f5 :set foldlevel=5<CR>
    nmap <leader>f6 :set foldlevel=6<CR>
    nmap <leader>f7 :set foldlevel=7<CR>
    nmap <leader>f8 :set foldlevel=8<CR>
    nmap <leader>f9 :set foldlevel=9<CR>

    " creating folds for tags in HTML
    nnoremap <leader>ft Vatzf

  " }}}
  " completion related mappings {{{

    " complete filenames in insert mode
    imap <C-f> <C-x><C-f>

    " complete lines from current buffer in insert mode
    imap <C-l> <C-x><C-l>

  " }}}
  " command line mappings {{{

    " bash like keys for the command line
    cnoremap <C-A> <Home>
    cnoremap <C-E> <End>
    cnoremap <C-K> <C-U>
    cnoremap <C-P> <Up>
    cnoremap <C-N> <Down>
  " }}}
  " ctags related mappings {{{
    nnoremap <silent> <leader>j :tnext<cr>zt
    nnoremap <silent> <leader>J :tprev<cr>zt
    nnoremap <silent> <leader>k :pop<cr>zt
    map <C-\> :tab split<CR>:exec("tag ".expand("<cword>"))<CR>
    map <A-]> :vsp <CR>:exec("tag ".expand("<cword>"))<CR>
  " }}}
  " mappings that provide some expected behaviours {{{
    " make p in Visual mode replace the selected text with the yank register
    vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>
  " }}}
  " mappings that provide some special behaviours {{{

    " open/close QuickFix window using <l>f
    nmap <silent> <leader>f :QFix<CR>

    " shortcut to jump to next conflict marker
    nmap <silent> <leader>co /^\(<\\|=\\|>\)\{7\}\([^=].\+\)\?$<CR>
    " nmap <silent> <leader>co /\v^[<\|=>]{7}( .*\|$)<CR>

    " Panic button - rot13s the current buffer
    nnoremap <f9> mzggg?G'z'

    " Md5 COMMAND - Show the MD5 of the current buffer or range
    command! -range Md5 :echo system('echo '.shellescape(join(getline(<line1>, <line2>), '\n')) . '| md5')

    " Load a random ColorScheme
    nmap <silent> <leader>cs :call LoadRandomColorScheme()<CR>
    nmap <silent> <leader>dcs :call LoadDefaultVimColors()<CR>
  " }}}
  " Vim related mappings {{{

    " edit the vimrc file
    nmap <leader>vi :vs<CR>:e $MYVIMRC<CR>

    " edit the gvimrc file
    nmap <leader>vg :vs<CR>:e $MYGVIMRC<CR>

    " source the current file
    nmap <leader>vs :source %<CR>

  " }}}
  " OSX specific mappings {{{
  if g:is_mac

    " indentation related
    omap <D-]> >>
    omap <D-[> <<
    nmap <D-]> >>
    nmap <D-[> <<
    vmap <D-]> >gv
    vmap <D-[> <gv
    imap <D-]> <Esc>>>i
    imap <D-[> <Esc><<i

    " bubble lines up/down
    nmap <D-k> [e
    nmap <D-j> ]e
    vmap <D-k> [egv
    vmap <D-j> ]egv

    " map Command-# to switch tabs
    map  <D-0> 0gt
    imap <D-0> <Esc>0gt
    map  <D-1> 1gt
    imap <D-1> <Esc>1gt
    map  <D-2> 2gt
    imap <D-2> <Esc>2gt
    map  <D-3> 3gt
    imap <D-3> <Esc>3gt
    map  <D-4> 4gt
    imap <D-4> <Esc>4gt
    map  <D-5> 5gt
    imap <D-5> <Esc>5gt
    map  <D-6> 6gt
    imap <D-6> <Esc>6gt
    map  <D-7> 7gt
    imap <D-7> <Esc>7gt
    map  <D-8> 8gt
    imap <D-8> <Esc>8gt
    map  <D-9> 9gt
    imap <D-9> <Esc>9gt
  endif
  " }}}
  " abbreviations: {{{
    iabbr NG@  Nikhil Gupta
    iabbr WD@  Wicked Developers

    iabbr ng@  me@nikhgupta.com
    iabbr mg@  mestoic@gmail.com
    iabbr wd@  nikhil@wickeddevelopers.com

    iabbr ng/  http://nikhgupta.com/
    iabbr wd/  http://wickeddevelopers.com/
    iabbr gh/  http://github.com/
    iabbr ghn/ http://github.com/nikhgupta/

    iabbr nsig --<cr>Nikhil Gupta<cr>me@nikhgupta.com
    iabbr wsig --<cr>Nikhil Gupta<cr>nikhil@wickeddevelopers.com
  " }}}
" }}}
" Behaviour: AutoCommands {{{
  if has("autocmd")
    match ErrorMsg '^\(<\|=\|>\)\{7\}\([^=].\+\)\?$'  " highlight conflict markers

    augroup omni_complete           " declare functions used for omni-completion {{{
      au!
      if exists('+omnifunc')
        " Enable omni completion for filetypes (Ctrl-X Ctrl-O)
        autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
        autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
        autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
        autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
        autocmd FileType c set omnifunc=ccomplete#Complete
        autocmd filetype css setlocal omnifunc=csscomplete#CompleteCSS
        autocmd FileType java set omnifunc=javacomplete#Complete

        " use syntax complete if nothing else available
        autocmd Filetype * if &omnifunc == '' | setlocal omnifunc=syntaxcomplete#Complete | endif
      endif
    augroup end
  " }}}
    augroup miscelleneous           " miscelleneous auto-commands {{{
      au!

      " reload last session and colorscheme based on whether gui is running or not
      autocmd VimEnter * nested silent! call ReloadSessionAndRestoreColors()

      " toggle relative line numbering
      autocmd FocusLost   * :set number
      autocmd FocusGained * :set relativenumber
      autocmd InsertEnter * :set number
      autocmd InsertLeave * :set relativenumber

      " Restore cursor position upon reopening files
      autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$")
                            \ | exe "normal! g`\"" | endif

      " Show invisible characters in all of these files
      autocmd filetype vim,python,ruby,javascript,css,rst setlocal list

      " resize splits when the windows is resized
      au VimResized * :wincmd =
    augroup end " }}}

    " filetype-specific auto-commands
    augroup shell_files             " {{{
      " TODO: let g:is_bash = 1
      au Filetype sh,zsh,bash set ts=4 sts=4 sw=4 expandtab
    " }}}
    augroup git_files               " {{{
      autocmd BufRead,BufNewFile GHI_* set ft=gitcommit
      autocmd FileType gitcommit setlocal spell textwidth=72
    " }}}
    augroup vim_files               " {{{
        au!

        " Reload Vim Configuration automatically (FIXME??) {{{
        " if has("autocmd")
          " augroup AutoReloadVimRC
            " au!
            " " automatically reload vimrc when it's saved
            " au BufWritePost $MYVIMRC so $MYVIMRC
            " " au BufWritePost $MYVIMRC call Pl#Load()
          " augroup END
        " endif
        " }}}
        autocmd filetype vim setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 textwidth=80
        autocmd filetype vim setlocal foldmethod=marker foldmarker={{{,}}} foldlevel=0
        " Bind <F1> to show the keyword under cursor
        autocmd filetype vim noremap <buffer> <F1> <Esc>:help <C-r><C-w><CR>
        autocmd filetype vim noremap! <buffer> <F1> <Esc>:help <C-r><C-w><CR>
    augroup end "}}}
    augroup html_files              " {{{
        au!

        " autocmd BufNewFile,BufRead *.html,*.htm call s:DetectHTMLVariant()
        autocmd filetype html,htmldjango,xhtml,haml setlocal tabstop=2 shiftwidth=2 softtabstop=2 textwidth=0
        " Auto-closing of HTML/XML tags
        autocmd filetype html,htmldjango,xhtml,haml let b:closetag_html_style=1
        autocmd filetype html,htmldjango,xhtml,haml let b:closetag_default_xml=1
    augroup end " }}}
    augroup python_files            " {{{
      au!
      autocmd BufNewFile,BufRead *.py call s:DetectPythonVariant()
      autocmd BufNewFile,BufRead *.jinja set syntax=htmljinja
      autocmd BufNewFile,BufRead *.mako set ft=mako

      " PEP8 compliance (set 1 tab = 4 chars explicitly, even if set
      " earlier, as it is important)
      autocmd filetype python setlocal expandtab shiftwidth=4 tabstop=4 softtabstop=4
      autocmd filetype python setlocal textwidth=80
      autocmd filetype python match ErrorMsg '\%>80v.\+'

      " But disable autowrapping as it is super annoying
      autocmd filetype python setlocal formatoptions-=t

      " Folding for Python (uses syntax/python.vim for fold definitions)
      "autocmd filetype python,rst setlocal nofoldenable
      "autocmd filetype python setlocal foldmethod=expr

      " Python runners
      autocmd filetype python map <buffer> <F5> :w<CR>:!python %<CR>
      autocmd filetype python imap <buffer> <F5> <Esc>:w<CR>:!python %<CR>
      autocmd filetype python map <buffer> <S-F5> :w<CR>:!ipython %<CR>
      autocmd filetype python imap <buffer> <S-F5> <Esc>:w<CR>:!ipython %<CR>

      " Run a quick static syntax check every time we save a Python file
      " autocmd BufWritePost *.py call Flake8()
    augroup end " }}}
    augroup ruby_files              " {{{
        au!

        autocmd BufNewFile,BufRead Rakefile,Capfile,Gemfile,Guardfile set ft=ruby syntax=ruby
        autocmd BufRead,BufNewFile Vagrantfile,Thorfile,Do,dorc,Dofile,config.ru set ft=ruby syntax=ruby
        autocmd BufNewFile,BufRead .autotest,.irbrc,.pryrc,*.treetop,*.tt set ft=ruby syntax=ruby

        autocmd filetype ruby setlocal expandtab shiftwidth=2 tabstop=2 softtabstop=2 textwidth=80
        autocmd filetype ruby setlocal foldmethod=syntax
    augroup end " }}}
    augroup rst_files               " {{{
      au!

      " Auto-wrap text around 74 chars
      autocmd filetype rst setlocal textwidth=74
      autocmd filetype rst setlocal formatoptions+=nqt
      autocmd filetype rst match ErrorMsg '\%>74v.\+'
    augroup end " }}}
    augroup css_group_files         " {{{
      au!

      autocmd BufNewFile,BufRead *.less setlocal filetype=less
      autocmd BufNewFile,BufRead *.scss setlocal filetype=scss
      autocmd BufNewFile,BufRead *.sass setlocal filetype=sass
      autocmd filetype css,less,sass,scss setlocal foldmethod=marker foldmarker={,}
      autocmd filetype css,less,sass,scss setlocal tabstop=2 shiftwidth=2 softtabstop=2
    augroup end "}}}
    augroup javascript_group_files  " {{{
      au!

      autocmd BufNewFile,BufRead *.json setfiletype json syntax=javascript

      autocmd filetype javascript set syntax=javascript

      autocmd filetype coffee,javascript setlocal listchars=trail:·,extends:#,nbsp:·
      autocmd filetype coffee,javascript setlocal expandtab tabstop=2 shiftwidth=2 softtabstop=2

      autocmd filetype coffee setlocal foldmethod=indent foldlevelstart=1
      " autocmd filetype javascript setlocal foldmethod=marker foldmarker={,}
      autocmd filetype javascript setlocal foldmethod=syntax foldlevelstart=1
      autocmd filetype javascript syn region foldBraces start=/{/ end=/}/ transparent fold keepend extend
      autocmd filetype javascript setlocal foldtext=substitute(getline(v:foldstart), '{.*', '{...}', '')

      autocmd Syntax javascript set syntax=jquery

    augroup end " }}}
    augroup textile_files           " {{{
      au!

      autocmd filetype textile setlocal tw=78 wrap spell

      " Render YAML front matter inside Textile documents as comments
      autocmd filetype textile syntax region frontmatter start=/\%^---$/ end=/^---$/
      autocmd filetype textile highlight link frontmatter Comment
    augroup end "}}}
    augroup markdown_files          " {{{
      au!

      autocmd BufRead,BufNewFile *.{md,mkd,mkdn,mdown,markdown} setfiletype ghmarkdown
      autocmd filetype ghmarkdown setlocal tw=78 wrap spell

      " Render YAML front matter inside Markdown documents as comments
      autocmd filetype ghmarkdown syntax region frontmatter start=/\%^---$/ end=/^---$/
      autocmd filetype ghmarkdown highlight link frontmatter Comment

      " md, markdown, and mk are markdown and define buffer-local preview
      autocmd filetype ghmarkdown setlocal wrap wrapmargin=2 textwidth=72 nolist
      autocmd filetype ghmarkdown map <buffer> <leader>p :Mm<CR>
    augroup end "}}}
    augroup php_files               " {{{
      au!

      autocmd BufRead *.php setlocal makeprg=php\ -l\ %
      autocmd BufRead *.ctp setlocal filetype=php
      autocmd filetype php,ctp setlocal tabstop=4 shiftwidth=4 softtabstop=4 textwidth=80
    " }}}
    augroup nu_files                " {{{
      au BufNewFile,BufRead *.nu,*.nujson,Nukefile setf nu
    " }}}
    augroup compiled_files          " {{{
      au FileType make set noexpandtab " make uses real tabs
    " }}}
    augroup yaml_files              " {{{
      au FileType *.yml,*.yaml set ft=yaml tabstop=2 shiftwidth=2 softtabstop=2
    " }}}
  endif
" }}}

" other files that need to be sourced
call SourceIfReadable('autocorrect.vim')         " auto-corrections for spellings
call SourceIfReadable('~/.vimrc.after')          " useful to override vimrc configuration
