" Credits:       """""""""""""""""""""""""""""""""""""""""""""" {{{
"
"            _ _    _                       _        _
"           (_) |  | |                     | |      ( )
"      _ __  _| | _| |__   __ _ _   _ _ __ | |_ __ _|/ ___
"     | '_ \| | |/ / '_ \ / _` | | | | '_ \| __/ _` | / __|
"     | | | | |   <| | | | (_| | |_| | |_) | || (_| | \__ \
"     |_| |_|_|_|\_\_| |_|\__, |\__,_| .__/ \__\__,_| |___/
"                          __/ |     | |
"                         |___/      |_|
"                            _       _    __ _ _
"                           | |     | |  / _(_) |
"                         __| | ___ | |_| |_ _| | ___  ___
"                        / _` |/ _ \| __|  _| | |/ _ \/ __|
"                       | (_| | (_) | |_| | | | |  __/\__ \
"                        \__,_|\___/ \__|_| |_|_|\___||___/
"
"
"   This is the personal .vimrc file of Nikhil Gupta.
"   While much of it is beneficial for general use, I would
"   recommend picking out the parts you want and understand.
"
"   Hello, I am Nikhil Gupta, and
"   You can find me at http://nikhgupta.com
"
"   You can find an online version of this vimrc file at:
"   https://github.com/nikhgupta/dotfiles/blob/master/vim/vimrc
"
" }}}
" Compatibility: """""""""""""""""""""""""""""""""""""""""""""" {{{
"
"   I am on a MacOSX, and the configuration works wonderfully on it.
"
"   I have not, yet, checked this configuration for Linux environment, but
"   I am quite sure that the configuration should work nicely with it :)
"
"   Since, I never use Windows, this configuration might not be (and, I know for
"   a fact, that it won't be) compatible with it :(
"
"   I have, deliberately, removed any configuration that attempted to have such
"   a compatibility from this file, at around December, 2013.
"
" }}}
" Updated On:    """""""""""""""""""""""""""""""""""""""""""""" {{{
"
"   Here, you will find date ranges where I devoted much of my time configuring
"   this vim configuration. Note that, this section includes only major updates
"   starting from December, 2013.
"
"   :: 27/12/13 - 30/12/13  # 4 days
"   :: 30/05/14 - 31/05/14  # 2 days
"   :: 03/08/14 - 06/08/14  # 4 days
"
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" NORC:         """"""""""""""""""""""""""""""""""""""""""""""" {{{
"   To start vim without using this .vimrc file, use:
"     vim -u NORC
"
"   To start vim without loading any .vimrc or plugins, use:
"     vim -u NONE
" }}}
" Vim Tips:     """"""""""""""""""""""""""""""""""""""""""""""" {{{
"   - Press `F1` key on any keyword to get quick help!
"   - Use `:X` to set encryption on any file
"   - Use `setl key=` to disable this encryption
"   - Use `gf` to open file under cursor using default file handler
"   - Use `gx` to open the current url using default url handler
"   - Use `g:netrw_browserx_viewer` to set the binary for above command
"   - Use `''` to jump to location of the last jump
"   - Use `'.` to jump to location of your last edit
" }}}
" TODOs:        """"""""""""""""""""""""""""""""""""""""""""""" {{{
"   - create functions to quickly add day-night themes via a simple function "   call
"   - add mappings for conque shell
"   - convert common functionality into a plugin
"   - display whether working in terminal or gui mode inside the airline statusbar
"   - revisit: http://learnvimscriptthehardway.stevelosh.com/
"   - implement Ranger file browser
"   - display syntax highlighting in foldtext
"   - auto-open fold when a search match is found or when it is jumped upon
"   - read and implement vim configuration from:
"     - https://github.com/skwp/dotfiles
"     - https://github.com/gf3/dotfiles
"     - https://bitbucket.org/sjl/dotfiles/src/tip/vim/vimrc
" }}}
" Inspirations: """"""""""""""""""""""""""""""""""""""""""""""" {{{
"   In no specific order:
"   - https://github.com/zenom/dotfiles
"   - https://github.com/jferris/config_files
"   - https://github.com/ryanb/dotfiles
"   - https://github.com/holman/dotfiles
"   - https://github.com/thoughtbot/dotfiles
"   - https://github.com/rtomayko/dotfiles
"   - https://github.com/garybernhardt/dotfiles
"   - https://github.com/amix/vimrc
"   - https://github.com/vgod/vimrc
"   - https://github.com/humiaozuzu/dot-vimrc
"   - https://github.com/sontek/dotfiles
"   - https://github.com/mathiasbynens/dotfiles
"   - https://github.com/nvie/vimrc
" }}}
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" - set tw to 74 or less

set nocompatible     " No to the total compatibility with the ancient vi
" Preamble:                           {{{
" _preferences_ is a group of functionality around a specific topic, which is
" expected to be customized, at leisure.

" A _feature_ is a functionality that can only be enabled or disabled, but can not
" be modified. Often times, various preferences can be grouped together to
" create a new feature.

" An _essential_ is a functionality that is expected to exist in a modern
" editor. Often, this can be interchangeably used with preferences or features.

" An _internal_ is code written to help in writeing this configuration,
" effectively.

" A _tweak_ is a set of editor functionality that does not constitute
" either a preference, feature or an essential functionality, but still provides
" for a smoother experience.
" }}}
" Prelogue:                           {{{
  " Preferences: leader keys                                                 {{{
    let mapleader      = ","     " change mapleader key from / to ,
    let g:mapleader    = ","     " some plugins may require this variable to be set
    let maplocalleader = "\\"    " used inside filetype settings
  " }}}
  " Internal:    custom variables                                            {{{
    " os specific variables
    let g:is_gui     = has('gui_running')
    let g:is_mac     = has('mac') || has('macunix') || has('gui_macvim')
    let g:is_nix     = has('unix') && !has('macunix') && !has("win32unix")
    let g:is_macvim  = g:is_mac && g:is_gui && has('gui_macvim')
    let g:is_ubuntu  = g:is_nix && system("uname -a") =~ "Ubuntu"
    let g:is_windows = has('win16') || has('win32') || has('win64')

    " other relevant variables
    let g:is_posix   = 1 " enable better bash syntax highlighting

    " initialize plugin related dictionaries
    let g:thematic#defaults = {}
    let g:thematic#themes   = {}
  " }}}
  " Internal:    custom functions                                            {{{
    " Function: Source a file, only if we can read it - display a message, optionally :) {{{
    function! SourceIfReadable(file, ...)
      let l:file = expand(a:file)
      if filereadable(l:file)
        execute "source" l:file
      elseif a:0 > 0 && a:1 == 1
        echomsg "Could not read file for sourcing: " . l:file
      endif
    endfunction " }}}
    " Function: Return first argument if day time, otherwise second argument {{{
    function! DayOrNight(day, night)
      let curr_hour = strftime("%H")
      return curr_hour > 7 && curr_hour < 19 ? a:day : a:night
    endfunction
    " }}}
    " Function: Quick distraction-free theme setup for Thematic {{{
    function! DistractionFree(theme)
      let l:theme = {
      \     'ruler': 1,
      \     'laststatus': 0,
      \     'sign-column-color-fix': 1,
      \     'fold-column-color-mute': 1,
      \     'number-column-color-mute': 1,
      \ }
      call extend(l:theme, a:theme)
      return l:theme
    endfunction
    " }}}
    " Function: Add a day night theme to thematic {{{
      function AddDayNightThemeForThematic(name)
        let g:thematic#themes[a:name] = DayOrNight(
              \ g:thematic#themes[a:name . "-light"],
              \ g:thematic#themes[a:name . "-dark" ]
              \ )
      endfunction
    " }}}
  " }}}
" }}}
" Basics:                             {{{
  " Tweaks                                                                   {{{
    set nofsync                       " improves performance -- let OS decide when to flush disk
  " }}}
  " Essential:   advocate UTF-8 style encoding                               {{{
    scriptencoding utf-8
    set encoding=utf-8 nobomb " BOM often causes trouble
    set termencoding=utf-8
    set fileencodings=utf-8,gb2312,gb18030,gbk,ucs-bom,cp936,latin1
  " }}}
  " Essential:   minimize security nightmares                                {{{
    set nomodeline                  " disable mode lines (security measure)
    set noexrc                      " disble per-directory .vimrc files
    set secure                      " disable unsafe commands in them
  " }}}
  " Essential:   support mouse interaction with the editor                   {{{
    if has('mouse')
      set mouse=a          " enable using mouse if terminal supports it
      set mousehide
    endif
  " }}}
  " Essential:   discourage backup files (hint: use versioning instead)      {{{
    set nobackup                      " do not keep backup files - it's 70's style cluttering
    set nowritebackup                 " do not make a write backup
    set noswapfile                    " do not write annoying intermediate swap files
    set directory=~/.vim/.tmp,/tmp    " store swap files in one of these directories (in case swapfile is ever turned on)
  " }}}
  " Essential:   add support for adding/extending features via plugins       {{{
    " Auto-install Vundle, if not found
    let iCanHazVundle = 1
    if !filereadable(expand("~/.vim/bundle/vundle/README.md"))
      echo "Installing Vundle..\n"
      " :silent !mkdir -p ~/.vim/bundle
      :silent !git clone https://github.com/gmarik/vundle ~/.vim/bundle/vundle
      let iCanHazVundle=0
    endif

    " turn filetype detection off (MacOSX Fix: http://bit.ly/17MENzJ)
    filetype on
    filetype off

    " initialize Vundle
    set rtp+=~/.vim/bundle/vundle
    call vundle#begin()

    " let Vundle manage Vundle:
    Plugin 'gmarik/vundle'

    " Plugins that provide multiple features in VIM
    Plugin 'bling/vim-airline'
    Plugin 'reedes/vim-thematic'

    " require matchit
    runtime macros/matchit.vim
  " }}}
  " Essential:   do not beep or show flash messages - that's rude!           {{{
    set noerrorbells                  " don't beep
    set visualbell t_vb=              " don't beep, remove visual bell char
  " }}}
  " Preferences: basic preliminary mappings {{{
    " Since I never use the ; key anyway, this is a real optimization for almost
    " all Vim commands, since we don't have to press that annoying Shift key that
    " slows the commands down
    nnoremap ; :
    " nnoremap : ;    " not recommended
  " }}}
" }}}
" Editor UI:                          {{{
  " Tweaks       {{{
    " Use vertical bar in insert mode
    " TODO: only required/supported for iTerm users?
    let &t_SI = "\<Esc>]50;CursorShape=1\x7"
    let &t_EI = "\<Esc>]50;CursorShape=0\x7"
  " }}}
  " Preferences: startup screen {{{
    " always show these bookmarks on the startup screen
    let g:startify_bookmarks = [ '~/.vimrc', '~/.zshrc', '~/Code', '~/Code/scripts/' ]

    " parse output from a command (login shell only) and show a custom header on the startup screen
    if !executable('fortune') && executable('curl')
      " TODO: create a command to fetch the ascii art from this website:
      " http://patooftware/taag/#p=display&f=Doh&t=VIM.%207.4
      " let s:startify_custom_header_command = ""
    endif
  " }}}
  " Preferences: add number of themes/colorschemes to choose from {{{
    " singles:
    Plugin 'wombat256.vim'
    Plugin 'ciaranm/inkpot'
    Plugin 'morhetz/gruvbox'
    Plugin 'DAddYE/soda.vim'
    " Plugin 'cstrahan/grb256'
    Plugin 'Pychimp/vim-luna'
    Plugin 'jnurmine/Zenburn'
    Plugin 'fugalh/desert.vim'
    Plugin 'nanotech/jellybeans.vim'
    " Plugin 'zenorocha/dracula-theme'
    Plugin '29decibel/codeschool-vim-theme'
    Plugin 'altercation/vim-colors-solarized'
    Plugin 'minofare/VIM-Railscasts-Color-Theme'

    " collections:
    Plugin 'chriskempson/base16-vim'
    " Plugin 'chriskempson/vim-tomorrow-theme'
    " Plugin 'daylerees/colour-schemes', { 'rtp': 'vim-themes/' }
  " }}}
  " Preferred:   highlight current line, but not column {{{
    set cursorline                  " highlight the current line for quick orientation
    set nocursorcolumn              " do not highlight the current column
  " }}}
  " Preferred:   display column markers at predefined columns {{{
    if has('syntax')
      set colorcolumn=+1,+11,+21,+41
    endif
  " }}}
  " Preferred:   display relative line numbers when editing, otherwise absolute ones {{{
    set number                      " always show line numbers
    set numberwidth=4               " number of culumns for line numbers
  " }}}
  " Preferred:   enable (force) fullscreen mode {{{
    set fullscreen
    let g:thematic#defaults["fullscreen"] = 1
    let g:thematic#defaults["fullscreen-background-color-fix"] = 1
  " }}}
  " Feature:     display a helpful screen when editor is started {{{
    set shortmess+=I                " do not display intro message on Vim startup

    Plugin 'vim-startify'
    " when opening a shortcut, switch to its directory
    let g:startify_change_to_dir = 1
    " enable 'empty buffer', and 'quit' commands
    let g:startify_enable_special = 1
    " display upto 10 recent files
    let g:startify_files_number = 10
    " also, allow 'o' to open an empty buffer
    let g:startify_empty_buffer_key = 'o'
    " use the given session directory
    let g:startify_session_dir = '~/.vim/data/session'
    " first four shortcuts should be available from home row
    let g:startify_custom_indices = [ 'a', 's', 'd', 'f' ]
    " display shortcuts in the given order
    let g:startify_lists = ['bookmarks', 'files', 'dir', 'sessions']
    " skip these files from the recent files list
    let g:startify_skiplist = [ 'COMMIT_EDITMSG', $VIMRUNTIME .'/doc', 'bundle/.*/doc', '/tmp' ]

    " display a fortune cookie (or output from custom command) as the header
    if exists("s:startify_custom_header_commad")
      let g:startify_custom_header = map(split(system(s:startify_custom_header_command), '\n'), '"   ". v:val') + ['','']
    elseif executable('fortune') && executable('cowsay')
      let g:startify_custom_header = map(split(system('fortune -s | cowsay'), '\n'), '"   ". v:val') + ['','']
    elseif executable('fortune')
      let g:startify_custom_header = map(split(system('fortune -s'), '\n'), '"   ". v:val') + ['','']
    else
      let g:startify_custom_header = [
            \ '    ██╗   ██╗██╗███╗   ███╗ ',
            \ '    ██║   ██║██║████╗ ████║ ',
            \ '    ██║   ██║██║██╔████╔██║ ',
            \ '    ╚██╗ ██╔╝██║██║╚██╔╝██║ ',
            \ '     ╚████╔╝ ██║██║ ╚═╝ ██║ ',
            \ '      ╚═══╝  ╚═╝╚═╝     ╚═╝ ',
            \ '', '' ]
    endif
  " }}}
  " Feature:     display a beautiful status line {{{
    set showmode                    " always show what mode we're currently editing in
    set report=0                    " always report number of lines changed
    set shortmess+=filmnrxoOtT      " abbrev. vim-messages (avoids 'hit enter', also)

    set cmdheight=2                 " use a status bar that is 2 rows high
    set laststatus=2                " tell VIM to always put a status line in

    if has('cmdline_info')
      set ruler                     " Show the ruler
      set rulerformat=%30(%=\:b%n%y%m%r%w\ %l,%c%V\ %P%) " A ruler on steroids
      set showcmd                   " show (partial) command in the last line of the screen this also shows visual selection info
    endif

    " Use :AirlineToggle to revert to this statusline
    if has('statusline') && !exists('g:loaded_airline')
      set statusline=\ \ \ [%{&ff}/%Y]%=%-10.(%l,%c%V%)\ %p\%\%\ \ \ %LL\ Total
    endif

    " use airline themes depending upon day or night time, as default in Thematic
    let g:airline_powerline_fonts  = 1 " use powerline symbols
    " use the given separator symbols (powerline enabled font required!)
    let g:airline_left_alt_sep     = ''
    let g:airline_right_alt_sep    = ''
    let g:thematic#defaults['airline-theme'] = DayOrNight("solarzied", "base16")

    " set a default airline theme, if none has, been defined!
    if !exists('g:airline_theme') | let g:airline_theme = 'solarized' | endif
  " }}}
  " Feature:     display beautiful tab bars when editing multiple files {{{
    let g:airline#extensions#tabline#enabled = 1
    let g:airline#extensions#tabline#show_buffers = 0
    " TODO: check if this works:
    let g:airline#extensions#tabline#excludes = ['*NERD*', '*Tagbar*', 'ControlP']
    let g:airline#extensions#tabline#tab_min_count = 2
    let g:airline#extensions#tabline#tab_nr_type = 1 " tab number
    let g:airline#extensions#tabline#show_tab_type = 0
    let g:airline#extensions#tabline#show_close_button = 1
    let g:airline#extensions#tabline#left_sep = ''
    let g:airline#extensions#tabline#left_alt_sep = ''
    let g:airline#extensions#tabline#right_sep = ''
    let g:airline#extensions#tabline#right_alt_sep = ''
  " }}}
  " Feature:     switch theme, automatically, based on whether time of the day {{{
    " use 256 colorspace support, since we want to use a base16 colorscheme.
    " NOTE: this requires `base16-shell` to be sourced by our ZSH configuration,
    " so that the terminal program can support 256 colorspace, as well.
    let base16colorspace=256

    let g:thematic#themes["default-dark"] = {
          \ 'colorscheme'  : 'base16-eighties',
          \ 'background'   : 'dark',
          \ 'airline-theme': 'base16' }
    let g:thematic#themes["default-light"] = {
          \ 'colorscheme'  : 'solarized',
          \ 'background'   : 'light',
          \ 'airline-theme': 'solarized' }
    call AddDayNightThemeForThematic('default')

    " switch theme on GUI as per day/night, but use dark version for terminal vim
    let g:thematic#theme_name = g:is_gui ? "default" : "default-dark"
  " }}}
  " Sense:       use light background in day, and dark ones in night {{{
    let g:thematic#defaults["background"] = DayOrNight("light", "dark")
  " }}}
  " Feature:     visually display indent levels in editor {{{
    Plugin 'nathanaelkane/vim-indent-guides'
    " NOTE: default map: <leader>ig
    nmap <silent> <Leader>igt <Plug>IndentGuidesToggle
    nmap <silent> <Leader>tig <Plug>IndentGuidesToggle

    let g:indent_guides_guide_size  = 1
    let g:indent_guides_start_level = 2
  " }}}
  " Feature:     display tags of the current file ordered by scope {{{
    Plugin 'Tagbar'
    let g:tagbar_autofocus = 1
    let g:tagbar_autoshowtag = 1
    let g:tagbar_width = 40
    let g:tagbar_ctags_bin = '/usr/local/bin/ctags'
    nmap <leader>ttt :TagbarToggle<CR>
  " }}}
  " " Preferred:   display location marks visually {{{
  "   Plugin 'xsunsmile/showmarks'
  "   let g:showmarks_enable = 0
  "   map <silent> <leader>smt :ShowMarksToggle<CR>
  "   map <silent> <leader>tms :ShowMarksToggle<CR>
  "   " <leader>mt : Toggles ShowMarks on and off.
  "   " <leader>mh : Hides an individual mark.
  "   " <leader>ma : Hides all marks in the current buffer.
  "   " <leader>mm : Places the next available mark.
  " " }}}
" }}}
" Editor GUI:                         {{{
  " Preferences: fonts for GUI version {{{
    if g:is_gui
      " Use a nice font on the specific OS
      " No support for Windows, again :)
      if g:is_mac
        set guifont=Monaco\ For\ Powerline:h15
      elseif g:is_ubuntu
        set guifont=Ubuntu\ Mono\ derivative\ Powerline\ 12
      elseif g:is_nix
        set guifont=Monospace\ 11
      endif
    endif
  " }}}
  " Essential:   maximized GUI window with a custom title {{{
    if g:is_gui
      set lines=999 columns=999   " maximize GUI window
      set guitablabel=%t\ %m      " custom tab labels
    endif
  " }}}
  " Preferred:   remove unnecessary interfaces from GUI version {{{
    if g:is_gui
      " adjust the GUI accordingly
      set guioptions-=T   " Remove the toolbar
      set guioptions-=m   " Remove the menu
      set guioptions+=c   " Use console dialogs

      " remove scrollbars
      set guioptions-=r
      set guioptions-=R
      set guioptions-=l
      set guioptions-=L
    endif
  " }}}
  " Preferred:   cursor should be a non-blinking solid block {{{
    if g:is_gui
      let &guicursor = substitute(&guicursor, 'n-v-c:', '&blinkon0-', '')
      set guicursor+=a:block-Cursor
    endif
  " }}}
" }}}
" Terminal Interaction:               {{{
  " Tweaks {{{
    " Prevent Vim from clobbering the scrollback buffer. See
    " http://www.shallowsky.com/linux/naltscreen.html
    set t_ti= t_te=

    " set appropriate terminal colors
    if &t_Co > 2 && &t_Co < 16
      set t_Co =16
    elseif &t_Co > 16
      set t_Co =256
    endif
  " }}}
  " Preferences: general behaviour {{{
    set title                         " change the terminal's title
  " }}}
  " Essential:   expected behaviour {{{
    set ttyfast                       " always use a fast terminal
  " }}}
  " Preferences: shell to integrate with {{{
    " NOTE: DO NOT ENABLE INTERACTIVE SHELL OR TERMINAL VIM WILL SUSPEND ITSELF.
    " NOTE: For this reason, important environment variables, rbenv initialization,
    "       etc. must be placed inside ~/.zprofile, so that VIM can read them.
    if !g:is_windows
      if !empty('$SHELL')
        set shell=$SHELL\ -l
      elseif executable('zsh')
        set shell=zsh\ -l               " use a ZSH login shell
      elseif executable('bash')
        set shell=bash\ -l              " use a Bash login shell
      else
        set shell=/bin/sh
      endif
    endif
  " }}}
  " Feature:     execute shell commands in interactive mode {{{
    Plugin 'christoomey/vim-run-interactive'
    nnoremap <leader>ri :RunInInteractiveShell<space>
    " TODO: clam functionality: fetch output in buffer
  " }}}
" }}}
" General Behaviour:                   {{{
  " Essential:   enable syntax highlighting {{{
    set synmaxcol=800               " don't try to highlight lines longer than 800 characters.
    " syntax highlight on, when terminal has colors
    if g:is_gui || &t_Co > 2 | syntax on | endif
  " }}}
  " Essential:   remember a lot of commands and search history {{{
    set history=1000
  " }}}
  " Essential:   code indentation {{{
    set autoindent                  " always set autoindenting on
    set shiftwidth=4                " number of spaces to use for autoindenting
    set copyindent                  " copy the previous indentation on autoindenting
    set shiftround                  " use multiple of 'sw' when indenting with '<' and '>'
    set smarttab                    " insert tabs on start of line acc to 'sw' not 'ts'
  " }}}
  " Essential:   code folding {{{
    set nofoldenable                " do not enable folding, by default
    set foldcolumn=0                " add a fold column to the left of line-numbers
    set foldlevel=0                 " folds with a higher level will be closed
    set foldlevelstart=10           " start out with everything open
    set foldmethod=indent           " create folds based on indentation
    set foldnestmax=7               " deepest fold is 7 levels
    set foldminlines=1              " do not fold single lines, fold everything else
    " which commands trigger auto-unfold
    set foldopen=block,hor,insert,jump,mark,percent,quickfix,search,tag,undo
  " }}}
  " Essential:   text scrolling when near the end of viewing area {{{
    set scrolloff=7                 " keep lines off edges of the screen when scrolling
    " set scrolljump=5                " lines to scroll when cursor leaves screen
    set sidescroll=1                " brings characters in view when side scrolling
    set sidescrolloff=15            " start side-scrolling when n chars are left
  " }}}
  " Preferences: split editing {{{
    set splitbelow                  " puts new split windows to the bottom of the current
    set splitright                  " puts new vsplit windows to the right of the current
    set equalalways                 " split windows are always of eqal size
  " }}}
  " Preferences: text wrapping {{{
    set wrap                        " don't wrap lines
    set linebreak                   " break long lines at words, when wrap is on
    set whichwrap=b,s,h,l,<,>,[,]   " allow <BS> & cursor keys to move to prev/next line
    set showbreak=↪                 " string to put at the starting of wrapped lines
    set textwidth=80                " wrap after this many characters in a line
  " }}}
  " Preferences: grammar & spell checking {{{
    " no spell check, by default - enabled via autocommands, where required
    " `public` dictionary file is versioned, while the `private` one is not.
    if has('spell')
      set dictionary=/usr/share/dict/words
      set spellfile=~/.vim/spell/public.utf-8.add,~/.vim/spell/private.utf-8.add
      set nospell

      nnoremap zG 2zg
    endif
  " }}}
  " Preferred:   use soft tabs over hard tabs {{{
    set tabstop=2                   " a tab is two spaces
    set softtabstop=2               " when <BS>, pretend tab is removed, even if spaces
    set expandtab                   " expand tabs, by default
    set nojoinspaces                " prevents two spaces after punctuation on join
  " }}}
  " Preferred:   show invisible whitespace characters, e.g. hard tabs, trailing whitespace, etc. {{{
    set list                        " show invisible characters like spaces
                                    " enabled later via autocmd on certain filetypes
    set listchars=tab:▸\ ,trail:·,extends:▶,precedes:◀,nbsp:·
  " }}}
  " Preferred:   highlight matching paranthesis for a very short period of time {{{
    set showmatch                   " set show matching parenthesis
    set matchtime=2                 " show matching parenthesis for 0.2 seconds
  " }}}
  " Preferred:   watch for file changes, and change working directory automatically, but do not auto-write {{{
    set autoread                      " watch for file changes
    set autochdir                     " automatically change the working directory
    set noautowrite                   " do not auto write file when moving away from it.
  " }}}
  " Preferred:   ignore whitespace changes in diff mode {{{
    if has("diff")
      set diffopt+=iwhite     " Ignore whitespace changes (focus on code changes)
    endif
  " }}}
  " Preferred:   timeout on mappings and terminal key codes {{{
    set timeout                     " timeout on :mappings and key codes
    set timeoutlen=600              " timeout duration should be sufficient to type the mapping
    set ttimeoutlen=50              " timeout duration should be small for keycodes
                                    " try pressing 'O' in normal mode in terminal editor
  " }}}
  " Feature:     beautiful code folds {{{
    " Function: Text to display on folded lines {{{
    function! MyFoldText()
      let line = getline(v:foldstart)

      let nucolwidth = &fdc + &number * &numberwidth
      let windowwidth = winwidth(0) - nucolwidth - 3
      let foldedlinecount = v:foldend - v:foldstart

      " expand tabs into spaces
      let onetab = strpart('          ', 0, &tabstop)
      let line = substitute(line, '\t', onetab, 'g')

      let line = strpart(line, 0, windowwidth - 2 -len(foldedlinecount))
      let fillcharcount = windowwidth - len(line) - len(foldedlinecount) - 4
      return line . ' ' . repeat("-",fillcharcount) . ' ' . foldedlinecount . ' '
    endfunction " }}}
    set foldtext=MyFoldText()       " function for text that appears over folds
  " }}}
  " Feature:     do not screw up folds when inserting text {{{
    " Don't screw up folds when inserting text that might affect them, until
    " leaving insert mode. Foldmethod is local to the window. Protect against
    " screwing up folding when switching between windows.
    " http://vim.wikia.com/wiki/Keep_folds_closed_while_inserting_text
    autocmd InsertEnter * if !exists('w:last_fdm') | let w:last_fdm=&foldmethod |
                        \ setlocal foldmethod=manual | endif
    autocmd InsertLeave,WinLeave * if exists('w:last_fdm') |
                                \ let &l:foldmethod=w:last_fdm |
                                \ unlet w:last_fdm | endif
  " }}}
  " Feature:     easily toggle editor configuration with simple mappings {{{
  " TODO: remove mappings obsolete because of this plugin
    Plugin 'tpope/vim-unimpaired'
  " }}}
" }}}
" Code Editing:                       {{{
  " Essential:   expected behaviour   {{{
    set virtualedit=onemore         " allow cursor 1 char beyond end of current line
    set backspace=indent,eol,start  " allow backspacing over everything in insert mode
    set fileformats="unix,dos,mac"  " EOL that will be tried when reading buffers
  " }}}
  " Preferences: characters that are considered a part of keywords {{{
    set iskeyword-=.
    set iskeyword-=#
    set iskeyword-=-
  " }}}
  " Preferences: automatic code formatting options {{{
    " do not format just about any type of text, esp. source code
    set formatoptions-=t
    " automatically, insert comment marker, when possible:
    set formatoptions+=cro
    " allow 'gq' to format comments
    set formatoptions+=q
    " recognize numbered lists when formatting
    set formatoptions+=n
    " don't break a line after a one-letter word
    set formatoptions+=1
    " remove comment markers when joining lines
    set formatoptions+=j
  " }}}
  " Preferences: code completion {{{
    set completeopt+=menu,longest     " select first item, follow typing in autocomplete
    set completeopt+=preview          " disable doc preview in omnicomplete
    set complete=.,w,b,u,t            " do lots of scanning on tab completion,  FIXME?
    set pumheight=6                   " Keep a small completion window
  " }}}
  " Preferences: exuberant tags {{{
    set tags+=./tags,tags;/         " find and load tags file up until root
  " }}}
  " Feature:     easily align your code {{{
    Plugin 'tsaleh/vim-align'
  " }}}
  " Feature:     enable code linting, i.e. live error checking for code {{{
    Plugin 'scrooloose/syntastic'
    let g:syntastic_enable_signs             = 1
    let g:syntastic_auto_loc_list            = 1
    let g:syntastic_check_on_open            = 1
    let g:syntastic_error_symbol             = '✗'
    let g:syntastic_warning_symbol           = '⚠'
    let g:syntastic_always_populate_loc_list = 1

    " enable integration with airline
    let g:airline#extensions#syntastic#enabled = 1
  " }}}
  " Feature:     autoclose and smarter punctuation pairs {{{
    Plugin 'kana/vim-smartinput'
  " }}}
  " Feature:     auto-add block level endings {{{
    Plugin 'tpope/vim-endwise'
  " }}}
  " Feature:     enable support for repeating plugin mappings via '.' mapping {{{
    " supports plugins namely: commentary, surround, abolish, unimpaired
    Plugin 'tpope/vim-repeat'
  " }}}
  " Feature:     easy comments for the naive {{{
    Plugin 'tpope/vim-commentary'
    " From the FAQ:
    " > My favorite file type isn't supported!
    " > > Relax! You just have to adjust 'commentstring':
    "     autocmd FileType apache set commentstring=#\ %s
  " }}}
  " Feature:     surround action for words/phrases with a given character {{{
    Plugin 'tpope/vim-surround'
  " }}}
  " Feature:     easily search, substitute, and abbrv multiple variants of a word + easy conversion to and from various keyword cases {{{
    " Supports converting to and from snake_case, camelCase, MixedCase & UPPER_CASE
    Plugin 'tpope/vim-abolish'
  " }}}
  " Feature:     focus on a narrow region of text and make reset inaccessible {{{
    Plugin 'chrisbra/NrrwRgn'
    " remove highlighting for narrow region
    let g:nrrw_rgn_nohl = 1

    " TODO: implement a function that selects lines based on regex and opens a NRW
    " TODO: Open the current fold in a narrow region
    " nmap <leader>nf <esc><space>zRvaz<leader>nr<C-W>T<leader>f9
  " }}}
  " Feature:     switch between code easily {{{
    Plugin "AndrewRadev/switch.vim"
    nnoremap - :Switch<cr>
  " }}}
  " Feature:     true Sublime Text style multiple cursors for vim {{{
    Plugin 'terryma/vim-multiple-cursors'
    let g:multi_cursor_use_default_mapping = 0
    let g:multi_cursor_next_key='<F3>'
    let g:multi_cursor_prev_key=''
    let g:multi_cursor_skip_key=''
    let g:multi_cursor_quit_key='<Esc>'
  " }}}
" }}}
" Undo And Redo:                      {{{
  " Essential:   expected behaviour {{{
    if has('persistent_undo')
      set undofile                  " So is persistent undo ...
      set undolevels=1000           " Maximum number of changes that can be undone
      set undoreload=10000          " Maximum number lines to save for undo on a buffer reload
      set undodir=~/.vim/.tmp,/tmp
    endif
  " }}}
  " Feature:     graphical undo tree browsing {{{
    Plugin 'sjl/gundo.vim'

    " toggle gundo window
    nnoremap <leader>gut :GundoToggle<CR>
    nnoremap <leader>tgu :GundoToggle<CR>
  " }}}
" }}}
" Search And Replace:                 {{{
  " Preferences: general behaviour {{{
    set magic                       " use magic mode when searching/replacing
    set gdefault                    " search/replace globally (on a line) by default
  " }}}
  " Essential:   expected behaviour {{{
    set smartcase                   " ignore case if pattern is lowercase, else be case-sensitive
    set wrapscan                    " search continues after the end of file
  " }}}
  " Essential:   enable highlighting of items being searched, when possible {{{
    if g:is_gui || &t_Co > 2 | set hlsearch | endif
  " }}}
  " Essential:   show search matches while searching {{{
    set incsearch                   " show search matches as you type
  " }}}
  " Feature:     allow '*' or '#' based searches in visual mode {{{
    Plugin 'nelstrom/vim-visual-star-search'
  " }}}
  " Preferred:   prefer 'silver-searcher' over 'ack' for searching {{{
    if executable('ag')
      Plugin 'rking/ag.vim'
      let g:agprg='ag --nogroup --nocolor --column'
      set grepprg=ag\ --nogroup\ --nocolor\ --column
    elseif executable('ack')
      Plugin 'mileszs/ack.vim'
    endif
  " }}}
" }}}
" Clipboard And Yanking:              {{{
  "  Preferences: use <F2> key to turn on 'paste' mode {{{
    set pastetoggle=<F2>
  "  }}}
  "  Essential:   do share clipboard between editor and operating system {{{
    if g:is_nix && has('unnamedplus')
      set clipboard=unnamedplus,unnamed      " On Linux use + register for copy-paste
    else
      set clipboard+=unnamed                 " On mac and Windows, use * register for copy-paste
    endif
  "  }}}
  "  Feature:     store and cycle through yanked text strings {{{
    Plugin 'maxbrunsfeld/vim-yankstack'

    " do not use meta keys
    let g:yankstack_map_keys = 0

    " use <left> and <right> keys for cycling what is pasted
    nnoremap <left>  <Plug>yankstack_substitute_older_paste
    nnoremap <right> <Plug>yankstack_substitute_newer_paste

    " toggle YankStack window
    nnoremap <leader>yst :Yanks<CR>
    nnoremap <leader>tys :Yanks<CR>
  "  }}}
  "  Feature:     context-aware indented pasting without enabling paste mode {{{
    Plugin 'sickill/vim-pasta'
    " disable pasta on some file types:
    let g:pasta_disabled_filetypes = ['python', 'coffee', 'yaml']
    " " enable paste on specific file types:
    " let g:pasta_enabled_filetypes = ['ruby', 'javascript', 'css', 'sh']
    " " make pasta use different mappings rather than overloading [p,P]
    " let g:pasta_paste_before_mapping = ',P'
    " let g:pasta_paste_after_mapping = ',p'
  "  }}}
" }}}
" File Management And Navigation:     {{{
  " Feature:    fuzzy find files, buffers, tags, etc. {{{
    Plugin 'kien/ctrlp.vim'
    " notes:
    "   - when CtrlP window is open:
    "   : f5 will clear the CtrlP cache (useful if you add new files during the session)
    "   : <C-f> & <C-b> will cycle between CtrlP modes
    "   : Press <c-d> to switch to filename only search instead of full path.
    "   : Press <c-r> to switch to regexp mode.
    "   : Use <c-j>, <c-k> or the arrow keys to navigate the result list.
    "   : Use <c-t> or <c-v>, <c-x> to open the selected entry in a new tab or in a new split.
    "   : Use <c-n>, <c-p> to select the next/previous string in the prompt's history.
    "   : Use <c-y> to create a new file and its parent directories.
    "   : Use <c-z> to mark/unmark multiple files and <c-o> to open them.
    " Set no max file limit
    let g:ctrlp_max_files = 0
    " Ignore files matching the following patterns
    let g:ctrlp_custom_ignore = '\.git$\|\.hg$\|\.svn$'
    " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
    if executable("ag") | let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""' | endif
    " switch between buffers, easily.
    " disabling movement between buffers, because of this :)
    map <C-b> :CtrlPBuffer<CR>
    " Search from current directory instead of project root
    map <C-o> :CtrlP %:p:h<CR>
    nnoremap <leader>. :CtrlPTag<cr>
  " }}}
  " Feature:    file explorer sidebar {{{
    Plugin 'scrooloose/nerdtree'

    " focus on nerdtree window
    nmap <leader>ntf :NERDTreeClose<CR>:NERDTreeFind<CR>

    " close nerdtree window
    nmap <leader>ntc :NERDTreeClose<CR>

    " toggle nerdtree window
    nmap <Leader>ntt <plug>NERDTreeTabsToggle<CR>
    nmap <Leader>tnt <plug>NERDTreeTabsToggle<CR>

    " change NerdTree's appearance
    let NERDTreeWinPos    = "left"
    let NERDChristmasTree = 1

    " Show hidden files, and bookmarks
    let NERDTreeShowFiles     = 1
    let NERDTreeShowHidden    = 0
    let NERDTreeShowBookmarks = 1

    " change directory, whenever tree root is changed
    let NERDTreeChDirMode = 2

    " Quit on opening files from the tree
    let NERDTreeQuitOnOpen = 0

    " Highlight the selected entry in the tree
    let NERDTreeHighlightCursorline = 1

    " Use a single click to fold/unfold directories and a double click to open files
    let NERDTreeMouseMode = 2

    " use the default Status Line for NerdTree buffers
    let NerdTreeStatusLine = -1

    " Store the bookmarks file
    let NERDTreeBookmarksFile = expand("$HOME/.vim/data/bookmarks")

    " Sort NerdTree to show ruby php, vim and markdown files earlier
    let NerdTreeSortOrder = ['\/$', '\.rb$', '\.php$', '\.vim', '\.md', '\.markdown',
                            \ '*', '\.swp$',  '\.bak$', '\~$']

    " Don't display these kinds of files
    let NERDTreeIgnore = [ '\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$',
                        \ '\.so$', '\.egg$', '^\.git$', '^\.DS_Store' ]
  " }}}
  " Preferred:  make <tab> completion for files/buffers act like bash {{{
    set wildmenu
    set wildmode=list:longest,full      " show a list when pressing tab, then longest common part and then full name.
    set wildignore+=*/vendor/*          " stuff to ignore when tab completing ...
    set wildignore+=*/.hg/*,*/.svn/*
    set wildignore+=*vim/backups*       " ...
    set wildignore+=*/smarty/*          " ...
    set wildignore+=*/node_modules/*    " ...
    set wildignore+=*/.sass-cache/*     " ...
    set wildignore+=*/tmp/*,tmp/**      " ...
    set wildignore+=*/out/**,log/**     " ... phew!!
    " file suffixes that can be safely ignored for file name completion
    set suffixes+=.swo,.d,.info,.aux,.log,.dvi,.pdf,.bin,.bbl,.blg,.DS_Store,.class,.so
    set suffixes+=.brf,.cb,.dmg,.exe,.ind,.idx,.ilg,.inx,.out,.toc,.pyc,.pyd,.dll,.zip
    set suffixes+=.gem,.pdf,.avi,.mkv,.png,.jpg,.gif,.psd
  " }}}
  " Feature:    enable commands to run simple unix file commands, e.g. chmod {{{
  Plugin 'tpope/vim-eunuch'
  " }}}
" }}}
" Tabs And Buffers:                   {{{
  " Preferences: general behaviour {{{
    set tabpagemax=15      " only open 15 tabs when using '-p' CLI switch
  " }}}
  " Essential:   expected behaviour {{{
    set lazyredraw                  " do not update the display while executing macros, registers, etc.
    set switchbuf=useopen,split     " reveal already opened files from the quickfix window instead of opening new buffers, otherwise split current window to make room for new one.
  " }}}
  " Preferred:   hide buffers instead of closing them {{{
    set hidden                      " means that current buffer can be put to background without being written; and that marks and undo history are preserved.
  " }}}
  " Feature:     easily maximize the current buffer/split by pressing <C-w>o {{{
    " TODO: use a toggle key for this
      Plugin 'blueyed/ZoomWin'
    " }}}
" }}}
" Automation:                         {{{
  " Preferred:   also, restore vim window's size when resoring sessions {{{
    if has('mksession')
      set sessionoptions+=resize
    endif
  " }}}
  " Preferred:   on startup, continue from where we left the editor previously {{{
    if has('viminfo')
      " ': Remember upto 500 files for which marks are remembered.
      " %: Save and restore the buffer list.
      " :: Remember upto 100 items in command-line history.
      " /: Remember upto 20  items in the search pattern history.
      " <: Remember upto 200 lines for each register.
      " f: Store file marks ('0 to '9 and 'A to 'Z)
      " Further, reading:  :h viminfo
      set viminfo='500,:100,@100,/20,f1,%,<200
    endif
  " }}}
  " Feature:     automatically, save and restore editor sessions {{{
    " NOTE: vim-misc is required for vim-session
    Plugin 'xolox/vim-misc'
    Plugin 'xolox/vim-session'
    let g:session_autoload = 'yes'
    let g:session_autosave = 'yes'
    " let g:session_default_overwrite = 1
    let g:session_default_to_last = 1
    " let g:session_command_aliases = 1

    nnoremap <leader>QA :call SaveSessionWithPrompt()<CR>:qall<CR>
    " Function: save session by prompting the user for a session name {{{
    function! SaveSessionWithPrompt()
      " guess name from current session, if any
      let name = xolox#session#find_current_session()
      let is_tab_scoped = xolox#session#is_tab_scoped()

      " ask user for a session name, otherwise
      if empty(name)
        let default_name = ''
        if g:session_default_name
          let default_name = g:session_default_name
        endif

        call inputsave()
        let name = input('save session? by what name? ', default_name)
        call inputrestore()
      endif

      " use the default session name, otherwise
      if empty(name) && g:session_default_name
        let name = g:session_default_name
      endif

      " save the given session
      if xolox#session#is_tab_scoped()
        call xolox#session#save_tab_cmd(name, '!', 'SaveTabSession')
      else
        call xolox#session#save_cmd(name, '!', 'SaveSession')
      endif

    endfunction
    " }}}
  " }}}
" }}}
" Git Version Control:                {{{
  " Feature:     add support for running git commands from within the editor {{{
    Plugin 'tpope/vim-fugitive'
  " }}}
  " Feature:     display git diff in the gutter (sign column) {{{
    Plugin 'airblade/vim-gitgutter'
    " do not enable gitgutter by default
    let g:gitgutter_enabled = 0
    " do not be eager - only work when reading/writing a file
    let g:gitgutter_eager = 0
    " ignore whitespace
    let g:gitgutter_diff_args = '-w'
    nmap <leader>ggt :GitGutterToggle<CR>
    nmap <leader>tgg :GitGutterToggle<CR>
  " }}}
  " Feature:     enable support to manage Github Gists from the editor {{{
    Plugin 'mattn/webapi-vim'
    Plugin 'mattn/gist-vim'
    let g:gist_clip_command = 'pbcopy'
    let g:gist_detect_filetype = 1
    let g:gist_open_browser_after_post = 1
    let g:gist_post_private = 0
    let g:gist_get_multiplefile = 1
    let g:gist_show_privates = 1
    let g:github_user = $GITHUB_USER
    let g:github_token = $GITHUB_TOKEN
    let g:snips_author = "$MY_NAME <$MY_MAIL>"
  " }}}
  " Feature:     gitk like functionality inside the editor {{{
    Plugin 'gregsexton/gitv'
  " }}}
" }}}
" Workflows:                          {{{
  " Feature:      SimpleNote: note-taking via vim {{{
    Plugin 'mrtazz/simplenote.vim'
    let g:SimplenoteUsername=$SIMPLENOTE_USER
    let g:SimplenotePassword=$SIMPLENOTE_PASS
    let g:SimplenoteFiletype="markdown"
    let g:SimplenoteListHeight=30
  " }}}
" }}}
" Miscelleneous:                      {{{
  " Preferences: encryption support {{{
  " TODO: revisit
    " https://coderwall.com/p/hypjbg
    if exists("&cryptmethod") | set cryptmethod=blowfish | endif
  " }}}
  " Preferences: allow incrementing/decrementing with <C-x> & <C-a> for alphanumeric characters {{{
    set nrformats-=octal            " do not treat octal as numbers
    set nrformats+=alpha            " but, allow inc/dec on alphabetical letters
  " }}}
  " Feature:     scratchable buffer for scrappables {{{
    Plugin 'duff/vim-scratch'
    nmap <leader><tab> :Sscratch<CR><C-W>x<C-J>
  " }}}
" }}}
" Languages: {{{
  " HTML:                             {{{
    " Essential: html5 syntax highlighting and omni-complete {{{
    Plugin 'DAddYE/html5.vim'
    " }}}
    " Feature: easily escape or unescape HTML {{{
    Plugin 'skwp/vim-html-escape'
    " mappings: <leader>he => escape | <leader>hu => unescape
    " }}}
    " Feature: focus theme for easy content editing {{{
      let g:thematic#themes['focus-dark']  = DistractionFree({'colorscheme': 'focus-dark' })
      let g:thematic#themes['focus-light'] = DistractionFree({'colorscheme': 'focus-light'})
      call AddDayNightThemeForThematic('focus')
    " }}}
    " Feature: runtime files for Haml, Sass & SCSS {{{
      Plugin 'tpope/vim-haml'
    " }}}
  " }}}
  " Ruby:                             {{{
    " Essential: runtime files for Ruby {{{
      Plugin 'vim-ruby/vim-ruby'
    " }}}
    " Feature: ruby on rails support along with rbenv and bundler {{{
      Plugin 'tpope/vim-bundler'
      Plugin 'tpope/vim-rbenv'
      Plugin 'tpope/vim-rails'
      let g:rails_ctags_arguments = ['--languages=ruby', '--exclude=.git', '--exclude=log']
      if g:is_mac
        command! -bar -nargs=1 OpenURL :!open <args>
      endif
    " }}}
    " Feature: vim-rails for non-rails projects {{{
      Plugin 'tpope/vim-rake'
    " }}}
  " }}}
  " Text Markups:                     {{{
    " TODO: set fo+=wal - autocommand
    " Essential:    support for new text markup languages {{{
      " Plugin 'tpope/vim-markdown' # TODO: required?
      Plugin 'timcharper/textile.vim'
    " }}}
    " Essential: preview transformed HTML in browser {{{
      " Plugin 'matthias-guenther/hammer.vim'
      " nmap <leader>hp :Hammer<cr>
    " }}}
    " Feature: github flavored markdown syntax highlighting {{{
      Plugin 'jtratner/vim-flavored-markdown'
    " }}}
    " Feature: distract-free editing theme with ByWord like UI {{{
      let g:thematic#themes['awesome-text-dark'] = DistractionFree({
            \    'colorscheme': 'awesome-text-dark',
            \    'typeface'   : 'Source Code Pro Light',
            \    'font-size'  : '24',
            \    'linespace'  : '8',
            \ })
      let g:thematic#themes['awesome-text-light'] = DistractionFree({
            \    'colorscheme': 'awesome-text-light',
            \    'typeface'   : 'Source Code Pro Light',
            \    'font-size'  : '24',
            \    'linespace'  : '8',
            \ })
      call AddDayNightThemeForThematic('awesome-text')
    " }}}
  " }}}
  " PHP:                              {{{
    " Essential: integration environment for PHP {{{
      Plugin 'spf13/PIV'
    " }}}
    " Essential: better code completion {{{
      Plugin 'shawncplus/phpcomplete.vim'
    " }}}
  " }}}
  " CSS:                              {{{
    " Essential: runtime files for CSS, Less, and SCSS {{{
      Plugin 'groenewege/vim-less'
      Plugin 'hail2u/vim-css3-syntax'
      Plugin 'cakebaker/scss-syntax.vim'
    " }}}
    " Feature:      view color previews inside CSS files {{{
      Plugin 'skammer/vim-css-color'
    " }}}
  " }}}
  " NodeJS:                           {{{
    " Essential: runtime files for node.js {{{
      Plugin 'mmalecki/vim-node.js'
    " }}}
  " }}}
  " Python:                           {{{
    " Essential: integrated environment for Python {{{
    " adds support for linting, doc search, execution, debugging, code completion, etc.
        Plugin 'klen/python-mode'
    " }}}
  " }}}
  " JavaScript:                       {{{
    " Essential: runtime files for Javascript, Coffeescript and jQuery {{{
      Plugin 'pangloss/vim-javascript'
      Plugin 'kchmck/vim-coffee-script'
      Plugin 'itspriddle/vim-jquery'
    " }}}
  " }}}
  " Miscelleneous:                    {{{
    " Essential: runtime files for CSV syntax highlighting, filetype detection, etc.{{{
      Plugin 'csv.vim'
    " }}}
  " }}}
  " Vim:                              {{{
  " todo: autocommand
   map <silent> <F7> :execute(":OpenURL https://github.com/" . split(getline("."), "'")[1])<CR><CR>
  " }}}
" }}}
" Internal: Epilogue                  {{{
  call SourceIfReadable("~/.gvimrc")
  call SourceIfReadable("~/.vimrc.after")
  " required by Vundle
  call vundle#end()               " required
  filetype plugin indent on       " enable detection, plugins and indenting in one step

  " install Plugins, if we just installed Vundle
  if iCanHazVundle == 0
    echo "Installing Plugins, please ignore key map error messages"
    :PluginInstall
  endif
" }}}
