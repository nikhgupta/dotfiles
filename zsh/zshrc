#!/usr/bin/env zsh

LANG=en_US.UTF-8
LC_ALL=en_US.UTF-8
skip_global_compinit=1
typeset -U path # set $path variable to only have unique values

# # enable vim key bindings in ZSH
# bindkey -v
# zle_default_mode='ins'
# zle_ins_more_like_emacs='yes'
# bindkey -M viins 'jj' vi-cmd-mode
# bindkey '\e[A' history-beginning-search-backward
# bindkey '\e[B' history-beginning-search-forward
# bindkey '^R' history-incremental-search-backward

# other useful settings for ZSH
setopt auto_pushd
setopt pushd_silent
setopt pushd_ignore_dups
setopt ignore_eof
setopt rm_star_silent
unsetopt nomatch
unsetopt correct_all

# export ZSH_DEBUG=1 # uncomment, if debugging
export HIST_IGNORE_SPACE=true

# set term to use 256 colors
export TERM=xterm-256color

# directory variables {{{
# some useful directories
export CODE_DIR="$HOME/Code"
export DOT_DIR="$HOME/Code/__dotfiles"
export BACKUP_DIR="$HOME/Code/__backups"
export FILE_DIR="$HOME/Code/__files"
export REPO_DIR="$HOME/Code/__repos"
export SCRIPT_DIR="$HOME/Code/scripts"
export SNIPPET_DIR="$HOME/Code/snippets"

# directories dealing with Dotfiles
export ZSH="$HOME/.oh-my-zsh" # do not rename this variable - needed by OH MY ZSH??
export DOTZSH="$HOME/Code/__dotfiles/zsh"
export DOTVIM="$HOME/Code/__dotfiles/vim"
# }}}

if [[ `hostname` == "MacBookPro.local" ]] && [[ `uname -s` == "Darwin" ]]
then export DEVELOPMENT_SERVER="1"
else export DEVELOPMENT_SERVER="0"
fi
#

# remember the location to my SSH key {{{
export SSH_KEY="$HOME/.ssh/macbookpro.pub"
# }}}

# which zsh theme? {{{
export ZSH_THEME="blinks"
# }}}

# which editor? {{{
# export EDITOR="emacsclient -ta ''"
export EDITOR="vim"
# export EDITOR="/usr/local/bin/mate -w"
# }}}

# which zsh plugins? {{{
plugins=(fasd battery brew coffee colored-man common-aliases
composer copydir copyfile cp extract gem git-flow git-extras git github
gitignore heroku history-substring-search osx rails systemadmin thor
vundle web-search)
# }}}

function source_file() { # sources a file, provides debugging option {{{
  if [[ -s "$1" ]]; then # run, if file's size is not zero
    source "$1"; [[ -n "${ZSH_DEBUG}" ]] && echo "loading file.. $1"
  fi
} # }}}

# source some files before ZSH configuration is loaded {{{
# load OhMyZSH, because its auwesomeeee :)
source_file "$ZSH/oh-my-zsh.sh"

# for our secret somethings | symlinked <= $DOTDIR/private.symlink
source_file "$HOME/.private"

# (create, if required) any specific configuration that needs to be changed.
source_file "$HOME/.localrc.before"

# sets some of the configuration options
source_file "$HOME/.localrc"

# (create, if required) anything that needs to run before loading zsh files
source_file "$HOME/.zshrc.before"
# }}}

# if this is not a reloaded shell, add some paths to $PATH {{{
add_to_path_nicely() { # $1 -> path, $2 -> add to start?
  newpath=$1; at_start=$2
  if [ -z "${path}" ]; then path=( "${newpath}" );
  elif [ -d "${newpath}" ]; then
    [ -z "${at_start}" ] && path+=( "${newpath}" ) || path=( "${newpath}" "${path[@]}" )
  else echo "Non-existent directory added to \$PATH: $1"; fi
}

if (( $DEVELOPMENT_SERVER )); then
    # make sure we use gnu version of commands like ls, etc.
    add_to_path_nicely "/usr/local/opt/coreutils/libexec/gnubin" at_start
    MANPATH="/usr/local/opt/coreutils/libexec/gnuman:$MANPATH"

    # add paths created by heroku toolbelt
    add_to_path_nicely "/usr/local/heroku/bin" at_start

    # add custom php
    if which brew &>/dev/null; then
      add_to_path_nicely "$(brew --prefix josegonzalez/php/php53)/bin"
    fi

    # add paths for Haskell binaries
    add_to_path_nicely "${HOME}/.cabal/bin"

    # add paths created by homebrew
    add_to_path_nicely "/usr/local/sbin" at_start
    add_to_path_nicely "/usr/local/bin" at_start
fi

# add path to local bin files
# add_to_path_nicely "${HOME}/Code/scripter/bin"

# add android sdk tools
# add_to_path_nicely "${HOME}/Code/android/sdk/tools"

# add pear to our path
# add_to_path_nicely "/usr/local/pear/bin"

# instead use rbenv - now, resides in ~/.zshenv to make this VIM compatible
# eval "$(rbenv init -)"
# }}}

# add rvm to our path (useful for scripting)
# add_to_path_nicely "${HOME}/.rvm/bin"

# Load some very essential scripts - I can't live without {{{
# Load RVM into our shell - oh! I can throw away my computer without this one little tiny line ;)
# [[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
# __rvm_project_rvmrc

# Load Z
# 17-02-14 17:53:42 - Using FASD now.
# source_file "$SCRIPT_DIR/shell/z/z.sh"

# Load AutoEnv
# source_file "$SCRIPT_DIR/shell/autoenv/activate.sh"
source_file "/usr/local/opt/autoenv/activate.sh"

# Python development environment configuration
if [[ -s /usr/local/bin/virtualenvwrapper.sh ]]; then
 source /usr/local/bin/virtualenvwrapper.sh
fi
# pip should only run if there is a virtualenv currently activated
export PIP_REQUIRE_VIRTUALENV=true
# cache pip-installed packages to avoid re-downloading
export PIP_DOWNLOAD_CACHE=$HOME/.pip/cache
# virtualenv wrapper support
export WORKON_HOME=~/Code/python/VirtualEnvs
# make pip use the virtualenv dir
export PIP_VIRTUALENV_BASE=$WORKON_HOME

# Load Todo.txt
# source_file "$SCRIPT_DIR/shell/todo.txt-cli/todo_completion"
# export T="$SCRIPT_DIR/shell/todo.txt-cli/todo.sh -d $TODO_TXT_CLI_CONFIG_FILE" # handy when defining functions that depend on it.
# alias t="$T"

# Load Syntax Highlighting for ZSH
# source_file $SCRIPT_DIR/shell/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source_file "/usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
# export ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR=/usr/local/share/zsh-syntax-highlighting/highlighters

# source some files after ZSH configuration is loaded {{{
# source all files that have extension 'zsh' in the ZSH's directory
for config_file ($DOTZSH/**/*.zsh) source_file $config_file

# (create, if required) specify any other commands or configuration options here...
source_file "$HOME/.zshrc.after"   # keep over-riding or custom settings here
source_file "$HOME/.localrc.after" # keep over-riding or custom exports here
# }}}

# completions go here {{{
# complete -F _todo t # for todo.txt-cli
# }}}

# tell ZSH to not correct certain commands {{{
if [ -f ~/.zsh_nocorrect ]; then
while read -r COMMAND; do
    alias $COMMAND="nocorrect $COMMAND"
done < ~/.zsh_nocorrect
fi
# }}}
